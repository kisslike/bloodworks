#include <unordered_map>
#include <vector>
#define HAS_AUTO_GENERATED
std::unordered_map<std::string, const char*> fileMap = {
{"resources/helpers.lua", "RenderableAlignment = {<<newline>>""    world = 0,<<newline>>""    topLeft = 1,<<newline>>""    top = 2,<<newline>>""    topRight = 3,<<newline>>""    left = 4,<<newline>>""    center = 5,<<newline>>""    right = 6,<<newline>>""    bottomLeft = 7,<<newline>>""    bottom = 8,<<newline>>""    bottomRight = 9<<newline>>""}<<newline>>""TextAlignment = {<<newline>>""    left = 0,<<newline>>""    center = 1,<<newline>>""    right = 2,<<newline>>""    fit = 3<<newline>>""}<<newline>>""VerticalTextAlignment = {<<newline>>""    top = 0,<<newline>>""    mid = 1,<<newline>>""    bottom = 2<<newline>>""}<<newline>>""RenderableLevel = {<<newline>>""    background = -1000,<<newline>>""    gameObjects = 1000,<<newline>>""    monsters = 2000,<<newline>>""    player = 3000,<<newline>>""    bullets = 4000,<<newline>>""    objectGUI = 5000,<<newline>>""    foreground = 6000,<<newline>>""    GUI = 7000<<newline>>""}<<newline>>""<<newline>>""CollisionFlags = {<<newline>>""    NoPlayerCollision = 1,<<newline>>""    NoMonsterCollision = 2,<<newline>>""    NoBulletCollision = 4,<<newline>>""}<<newline>>""<<newline>>""function logTable(myTable)<<newline>>""    if myTable == nil then<<newline>>""        log(\"nil\")<<newline>>""    else <<newline>>""        for k, v in pairs( myTable ) do<<newline>>""           log(k, v)<<newline>>""        end<<newline>>""    end<<newline>>"" end<<newline>>"" <<newline>>""local seen={}<<newline>>""<<newline>>"" function dumpTable(t)<<newline>>""    seen={}<<newline>>""    dump(t, \"\")<<newline>>"" end<<newline>>"" <<newline>>"" <<newline>>""<<newline>>""function dump(t,i)<<newline>>""    seen[t]=true<<newline>>""    local s={}<<newline>>""    local n=0<<newline>>""    for k in pairs(t) do<<newline>>""        n=n+1 s[n]=k<<newline>>""    end<<newline>>""    for k,v in ipairs(s) do<<newline>>""        log(v .. \" \" .. tostring(t[v]))<<newline>>""        v=t[v]<<newline>>""        if type(v)==\"table\" and not seen[v] then<<newline>>""            dump(v,i..\"\t\")<<newline>>""        --elseif type(v)==\"userdata\" and not seen[v] then<<newline>>""        --    dump(getmetatable(v),i..\"\t\")<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""function clamp(t)<<newline>>""    if t < 0.0 then<<newline>>""        return 0.0<<newline>>""    elseif t > 1.0 then<<newline>>""        return 1.0<<newline>>""    end<<newline>>""    return t<<newline>>""end<<newline>>""<<newline>>""<<newline>>""function lerp (a, b, t)<<newline>>""    return a + (b-a) * t<<newline>>""end<<newline>>""<<newline>>""function fixAngle(a)<<newline>>""    while a > math.pi do<<newline>>""        a = a - 2.0 * math.pi<<newline>>""    end<<newline>>""    while a < -math.pi do<<newline>>""        a = a + 2.0 * math.pi<<newline>>""    end<<newline>>""    return a<<newline>>""end<<newline>>""<<newline>>""function shallowcopy(orig)<<newline>>""    local orig_type = type(orig)<<newline>>""    local copy<<newline>>""    if orig_type == 'table' then<<newline>>""        copy = {}<<newline>>""        for orig_key, orig_value in pairs(orig) do<<newline>>""            copy[orig_key] = orig_value<<newline>>""        end<<newline>>""    else <<newline>>""        copy = orig<<newline>>""    end<<newline>>""    return copy<<newline>>""end<<newline>>""<<newline>>""FadeOutImage = {}<<newline>>""<<newline>>""function FadeOutImage.init(gameObject)<<newline>>""    if gameObject.data.fadeOutStartTime == nil then<<newline>>""        gameObject.data.fadeOutStartTime = 1.0<<newline>>""    end<<newline>>""    if gameObject.data.fadeOutDuration == nil then<<newline>>""        gameObject.data.fadeOutDuration = 1.0<<newline>>""    end<<newline>>""    if gameObject.data.fadeInDuration == nil then<<newline>>""        gameObject.data.fadeInDuration = 0.0<<newline>>""    end<<newline>>""    if gameObject.data.startAlpha == nil then<<newline>>""        gameObject.data.startAlpha = 1.0<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""<<newline>>""function FadeOutImage.onTick(gameObject)<<newline>>""    local timeDiff = time - gameObject.data.startTime<<newline>>""    local alpha<<newline>>""    if timeDiff < gameObject.data.fadeInDuration then<<newline>>""        alpha = timeDiff / gameObject.data.fadeInDuration<<newline>>""    elseif gameObject.data.fadeOutStartTime < 0.0 then<<newline>>""        alpha = 1.0<<newline>>""    else <<newline>>""        alpha = 1.0 - (timeDiff - gameObject.data.fadeOutStartTime) / gameObject.data.fadeOutDuration<<newline>>""        if alpha < 0.0 then <<newline>>""            gameObject.toBeRemoved = true<<newline>>""            alpha = 0.0<<newline>>""        elseif alpha > 1.0 then<<newline>>""            alpha = 1.0<<newline>>""        end<<newline>>""    end<<newline>>""    gameObject.data.renderable:setColor(Vec4.new(1.0, 1.0, 1.0, alpha * gameObject.data.startAlpha))<<newline>>""end<<newline>>""<<newline>>""function FadeOutImage.clear(gameObjectId)<<newline>>""<<newline>>""end<<newline>>""DummyProfiler = {}<<newline>>""DummyProfiler.start = function()<<newline>>""end<<newline>>""DummyProfiler.stop = function()<<newline>>""end<<newline>>""if createSumProfiler == nil then<<newline>>""    createSumProfiler = function()<<newline>>""        return DummyProfiler<<newline>>""    end<<newline>>""end<<newline>>""if createProfiler == nil then<<newline>>""    createProfiler = function()<<newline>>""        return DummyProfiler<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""function deleteAll()<<newline>>""    for k in pairs (_G) do<<newline>>""        if k ~= \"\" and k ~= nil and _G[k] ~= _G and _G[k] ~= doNotDelete and doNotDelete[k] ~= true then<<newline>>""            _G[k] = nil<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""function printStack()<<newline>>""    print(debug.traceback())<<newline>>""end<<newline>>""<<newline>>""function fillDoNotDelete()<<newline>>""    doNotDelete = {}<<newline>>""    for k in pairs (_G) do<<newline>>""        doNotDelete[k] = true<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>"""}, 
{"resources/missions/helpers.lua", "<<newline>>""function calcRandomSpawns()<<newline>>""    missionData.spawnRates = {}<<newline>>""    local monsterTypeCount = getAllMonsterTypeCount()<<newline>>""    missionData.totalChanceSpawn = 0.0<<newline>>""    <<newline>>""    local m = \"\"<<newline>>""    for i = 0, monsterTypeCount - 1 do<<newline>>""        local monsterType = getMonsterTypeAt(i)<<newline>>""        if monsterType.scriptTable.spawnChanceInMission ~= nil then<<newline>>""            local chance = monsterType.scriptTable.spawnChanceInMission(missionData, min)<<newline>>""            if chance > 0.0 then<<newline>>""                missionData.totalChanceSpawn = missionData.totalChanceSpawn + chance<<newline>>""                missionData.spawnRates[monsterType.scriptName] = chance<<newline>>""            end<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""function addRandomMonster(forceType, cannotBecomeBoss, cannotShootBullets, levelReduce)<<newline>>""    local min = missionTime / 60.0 +  math.random() * 1.5<<newline>>""    <<newline>>""    if missionData.extraMin ~= nil then<<newline>>""        min = min + missionData.extraMin<<newline>>""    end<<newline>>""    if levelReduce ~= nil then<<newline>>""        min = min - levelReduce<<newline>>""    end<<newline>>""    <<newline>>""    if forceType ~= nil then<<newline>>""        m = forceType<<newline>>""    else<<newline>>""        local randChance = math.random() * missionData.totalChanceSpawn<<newline>>""        for key,value in pairs(missionData.spawnRates) do<<newline>>""            randChance = randChance - value<<newline>>""            if randChance <= 0.000001 then<<newline>>""                m = key<<newline>>""                break<<newline>>""            end<<newline>>""        end<<newline>>""<<newline>>""        if m == \"\" then<<newline>>""            log(\"error not picked mon type\")<<newline>>""            m = \"Alien\"<<newline>>""        end<<newline>>""    end<<newline>>""    <<newline>>""    local monster = addMonster(m)<<newline>>""    <<newline>>""    monster.hitPoint = math.floor(monster.hitPoint * (1.0 + clamp(min * 0.05) * 1.0))<<newline>>""    monster.experienceMultiplier = math.random() * 0.4 + 0.8<<newline>>""    monster.experienceMultiplier = 0.9 + math.random() * 0.2<<newline>>""    monster.scoreMultiplier = 0.9 + math.random() * 0.2<<newline>>""    <<newline>>""    monster.data.cannotBecomeBoss = cannotBecomeBoss<<newline>>""    monster.data.cannotShootBullets = cannotShootBullets<<newline>>""    <<newline>>""    if cannotBecomeBoss ~= true and monster.scriptTable.makeBoss ~= nil and missionData.lastBossSpawn + 15.0 - clamp(min/7) * 6 < missionTime and missionTime > 1.0 then<<newline>>""        missionData.lastBossSpawn = missionTime<<newline>>""        monster.data.isBoss = true<<newline>>""        monster.scriptTable.makeBoss(monster, min)<<newline>>""    else<<newline>>""        local r = 0.9 + 0.1 * math.random()<<newline>>""        local g = 0.9 + 0.1 * math.random()<<newline>>""        local b = 0.9 + 0.1 * math.random()<<newline>>""        local ra = math.random()<<newline>>""        if ra < 0.333 then<<newline>>""            r = 1.0<<newline>>""        elseif ra < 0.666 then<<newline>>""            g = 1.0<<newline>>""        else<<newline>>""            b = 1.0<<newline>>""        end<<newline>>""        <<newline>>""        monster.colorMultiplier:addBuff(Vec4.new(r, g, b, 1.0))<<newline>>""    end<<newline>>""    <<newline>>""    if monster.scriptTable.buffStats ~= nil then<<newline>>""        monster.scriptTable.buffStats(monster, min)<<newline>>""    end<<newline>>""    <<newline>>""    return monster<<newline>>""end<<newline>>""<<newline>>""GhostBuffId = getGlobalUniqueId()<<newline>>""<<newline>>""function makeBossDefault(monster, forceType)<<newline>>""    local min = missionTime / 60.0 +  math.random() * 1.5 + missionData.extraMin<<newline>>""    monster.hitPoint = math.floor(monster.hitPoint * 1.5)<<newline>>""    <<newline>>""    monster.data.minDamage = math.floor(monster.data.minDamage * 1.1)<<newline>>""    monster.data.maxDamage = math.floor(monster.data.maxDamage * 1.1)<<newline>>""    <<newline>>""    monster.data.maxMoveSpeed = monster.data.maxMoveSpeed * 1.05<<newline>>""    monster.data.randomMove = monster.data.randomMove or math.random() > 0.3<<newline>>""    monster.data.playerSeeRange = monster.data.playerSeeRange * 1.5<<newline>>""    <<newline>>""    monster.experienceMultiplier = 5.0 + math.random() * 2.0<<newline>>""    monster.scoreMultiplier = 5.0 + math.random() * 2.0<<newline>>""    monster:modifyDrawLevel(3)<<newline>>""    <<newline>>""    local t = 0<<newline>>""    repeat<<newline>>""        t = math.random(11)<<newline>>""    until missionTime > 30.0 or t ~= 8 <<newline>>""    <<newline>>""    if forceType ~= nil then<<newline>>""        t = forceType<<newline>>""    end<<newline>>""    <<newline>>""    <<newline>>""    if t == 1 then -- huge & tank<<newline>>""        monster.hitPoint = monster.hitPoint * 6<<newline>>""        monster.data.maxMoveSpeed = monster.data.maxMoveSpeed * 0.7<<newline>>""        monster.colorMultiplier:addBuff(Vec4.new(0.9, 0.8, 0.3, 1.0))<<newline>>""        monster:setScale(1.3 + math.random() * 0.1)<<newline>>""        monster.knockbackResistance:addBuff(0.07)<<newline>>""        monster.data.stunDuration = 0.0<<newline>>""        monster.data.slowDuration = 0.0<<newline>>""    elseif t == 2 then -- ghost<<newline>>""        monster.colorMultiplier:addBuffWithId(GhostBuffId, Vec4.new(0.5, 0.5, 0.5, 0.0))<<newline>>""        monster:setScale(monster.scale * 0.85)<<newline>>""        monster.hasCollision = false<<newline>>""        monster.hasBlood = false<<newline>>""        monster.hasGibs = false<<newline>>""        monster.data.randomMove = false<<newline>>""        monster.data.maxRotateSpeed = monster.data.maxRotateSpeed * 0.8<<newline>>""        addCustomOnTick(monster, function (monster)<<newline>>""            local diffToPlayer = player.position - monster.position <<newline>>""            local distanceToPlayer = diffToPlayer:length()<<newline>>""            monster.colorMultiplier:addBuffWithId(GhostBuffId, Vec4.new(0.5, 0.5, 0.5, 0.7 * clamp( 1.0 - (distanceToPlayer - 150.0) / 300 ) ) )<<newline>>""        end)<<newline>>""    elseif t == 3 then -- hits hard<<newline>>""        monster.colorMultiplier:addBuff(Vec4.new(1.0, 0.3, 0.3, 1.0))<<newline>>""        monster.data.minDamage = math.floor(monster.data.minDamage * 3.0)<<newline>>""        monster.data.maxDamage = math.floor(monster.data.maxDamage * 4.0)<<newline>>""        monster.data.hitWaitTime = monster.data.hitWaitTime * 0.5<<newline>>""        monster.hitPoint = math.floor(monster.hitPoint * 1.1)<<newline>>""        monster.data.maxMoveSpeed = monster.data.maxMoveSpeed * 1.1<<newline>>""        monster.data.randomMove = false<<newline>>""    elseif t == 4 then -- fast<<newline>>""        monster.colorMultiplier:addBuff(Vec4.new(0.2, 0.7, 1.0, 1.0))<<newline>>""        monster.data.maxMoveSpeed = monster.data.maxMoveSpeed * 1.65<<newline>>""        monster.data.maxRotateSpeed = monster.data.maxRotateSpeed * 2.0<<newline>>""        monster.data.minDamage = math.floor(monster.data.minDamage * 0.8)<<newline>>""        monster.data.maxDamage = math.floor(monster.data.maxDamage * 0.8)<<newline>>""        monster.data.hitWaitTime = monster.data.hitWaitTime * 0.2<<newline>>""        monster.knockbackResistance:addBuff(0.4)<<newline>>""        monster.hitPoint = math.floor(monster.hitPoint * 0.6)<<newline>>""    elseif t == 5 then -- shoots bullets (fast)<<newline>>""        monster.colorMultiplier:addBuff(Vec4.new(0.2, 0.7, 0.3, 1.0))<<newline>>""        monster.data.shootsBullets = true<<newline>>""        monster.data.bulletMinDamage = math.floor(monster.data.bulletMinDamage * (1.0 + min * 0.1))<<newline>>""        monster.data.bulletMaxDamage = math.floor(monster.data.bulletMaxDamage * (1.0 + min * 0.1))<<newline>>""        <<newline>>""        monster.data.bulletRate = 1.0 - clamp(min * 0.1) * 0.4<<newline>>""        monster.data.bulletRandom = 0.2 - clamp(min * 0.15) * 0.15<<newline>>""        monster.data.bulletCount = 5 + math.floor( min / 2 ) * 2<<newline>>""    elseif t == 6 then -- spawns 2 on death<<newline>>""        monster.data.remainingLife = 3<<newline>>""        monster.colorMultiplier:addBuff(Vec4.new(0.7, 0.2, 0.7, 1.0))<<newline>>""        monster:setScale(monster.scale * (1.1 + math.random() * 0.1))<<newline>>""        monster.experienceMultiplier = monster.experienceMultiplier * 0.3<<newline>>""        monster.scoreMultiplier = monster.scoreMultiplier * 0.3<<newline>>""        monster.data.hitPoint = monster.hitPoint<<newline>>""        monster.data.onKillFuncSplit = function (monster)<<newline>>""            if monster.data.remainingLife > 0 then<<newline>>""                monster.data.remainingLife = monster.data.remainingLife - 1<<newline>>""                for i = 1,2 do<<newline>>""                    if monster.hitPoint > 0 then<<newline>>""                        return<<newline>>""                    end<<newline>>""                    local newMonster = addMonster(monster.monsterTemplate.name)<<newline>>""                    newMonster.data.remainingLife = monster.data.remainingLife<<newline>>""                    newMonster.position = monster.position<<newline>>""                    newMonster:setScale(math.max(0.40, monster.scale * 0.80))<<newline>>""                    newMonster.colorMultiplier:addBuff(Vec4.new(0.7, 0.2, 0.7, 1.0))<<newline>>""                    newMonster:copyIgnoreId(monster)<<newline>>""                    <<newline>>""                    newMonster.data.playerSeeRange = monster.data.playerSeeRange<<newline>>""                    newMonster.data.maxMoveSpeed = monster.data.maxMoveSpeed * 0.8<<newline>>""                    newMonster.data.maxRotateSpeed = monster.data.maxRotateSpeed<<newline>>""<<newline>>""                    newMonster.data.hitWaitTime = monster.data.hitWaitTime<<newline>>""                    newMonster.data.hitInterval = monster.data.hitInterval<<newline>>""                    newMonster.data.minDamage = monster.data.minDamage<<newline>>""                    newMonster.data.maxDamage = monster.data.maxDamage<<newline>>""<<newline>>""                    newMonster.experienceMultiplier = monster.experienceMultiplier * 0.5<<newline>>""                    newMonster.scoreMultiplier = monster.scoreMultiplier * 0.5<<newline>>""<<newline>>""                    newMonster.hitPoint = math.floor(monster.data.hitPoint * 0.5)<<newline>>""                    newMonster.data.hitPoint = newMonster.hitPoint<<newline>>""                    newMonster.moveAngle = monster.moveAngle + math.pi * (i - 0.5)<<newline>>""                    newMonster.data.onKillFuncSplit = monster.data.onKillFuncSplit<<newline>>""                    addCustomOnKill(newMonster, monster.data.onKillFuncSplit)<<newline>>""                    <<newline>>""                    newMonster.data.invulTime = time + 0.3<<newline>>""                    <<newline>>""                    addCustomOnHit(newMonster, function(monster, damage, args)<<newline>>""                        if time < monster.data.invulTime then<<newline>>""                            return 0<<newline>>""                        end<<newline>>""                        return damage<<newline>>""                    end)<<newline>>""                end<<newline>>""            end<<newline>>""        end<<newline>>""        addCustomOnKill(monster, monster.data.onKillFuncSplit)<<newline>>""    elseif t == 7 then -- spawns 8 on death<<newline>>""        monster.colorMultiplier:addBuff(Vec4.new(0.2, 0.2, 0.2, 1.0))<<newline>>""        monster:setScale(1.0 + math.random() * 0.2)<<newline>>""        monster.experienceMultiplier = monster.experienceMultiplier * 0.5<<newline>>""        monster.scoreMultiplier = monster.scoreMultiplier * 0.5<<newline>>""        monster.data.hitPoint = monster.hitPoint<<newline>>""        addCustomOnKill(monster, function (monster)<<newline>>""            if monster.hitPoint > 0 then<<newline>>""                return<<newline>>""            end<<newline>>""            for i = 1,8 do<<newline>>""                local newMonster = addMonster(monster.monsterTemplate.name)<<newline>>""                newMonster.position = monster.position<<newline>>""                newMonster:setScale(math.max(0.40, monster.scale * 0.50))<<newline>>""                newMonster.colorMultiplier:addBuff(Vec4.new(0.2, 0.2, 0.2, 1.0))<<newline>>""                newMonster:copyIgnoreId(monster)<<newline>>""                <<newline>>""                newMonster.data.playerSeeRange = monster.data.playerSeeRange<<newline>>""                newMonster.data.maxMoveSpeed = monster.data.maxMoveSpeed * 1.2<<newline>>""                newMonster.data.maxRotateSpeed = monster.data.maxRotateSpeed * 0.7<<newline>>""<<newline>>""                newMonster.data.hitWaitTime = monster.data.hitWaitTime<<newline>>""                newMonster.data.hitInterval = monster.data.hitInterval<<newline>>""                newMonster.data.minDamage = monster.data.minDamage / 2<<newline>>""                newMonster.data.maxDamage = monster.data.maxDamage / 2<<newline>>""<<newline>>""                newMonster.experienceMultiplier = monster.experienceMultiplier * 0.1<<newline>>""                newMonster.scoreMultiplier = monster.scoreMultiplier * 0.1<<newline>>""<<newline>>""                newMonster.hitPoint = math.floor(monster.data.hitPoint * 0.5)<<newline>>""                newMonster.data.hitPoint = newMonster.hitPoint<<newline>>""                    <<newline>>""                newMonster.data.randomMove = true<<newline>>""                newMonster.moveAngle = monster.moveAngle + math.pi * i / 8<<newline>>""                <<newline>>""                newMonster.data.invulTime = time + 0.3<<newline>>""                addCustomOnHit(newMonster, function(monster, damage, args)<<newline>>""                    if time < monster.data.invulTime then<<newline>>""                        return 0<<newline>>""                    end<<newline>>""                    return damage<<newline>>""                end)<<newline>>""            end<<newline>>""        end)<<newline>>""    elseif t == 8 then -- angel<<newline>>""        monster.colorMultiplier:addBuff(Vec4.new(2.0, 2.0, 2.0, 1.0))<<newline>>""        monster.data.maxMoveSpeed = math.min(500.0, monster.data.maxMoveSpeed * 3.0)<<newline>>""        monster.data.originalSpeed = monster.data.maxMoveSpeed<<newline>>""        monster.data.maxRotateSpeed =  monster.data.maxRotateSpeed * 3.0<<newline>>""        monster.data.originalRotateSpeed =  monster.data.maxRotateSpeed<<newline>>""            <<newline>>""        monster.data.minDamage = math.floor(monster.data.minDamage * 0.5)<<newline>>""        monster.data.maxDamage = math.floor(monster.data.maxDamage * 0.5)<<newline>>""        <<newline>>""        monster.data.hitWaitTime = monster.data.hitWaitTime * 0.1<<newline>>""        monster.data.hitInterval = monster.data.hitInterval * 0.4<<newline>>""        monster.data.targetShift = Vec2.new(0.0, 0.0)<<newline>>""        monster.data.randomMove = false<<newline>>""        monster.knockbackResistance:addBuff(0.0)<<newline>>""        addCustomOnTick(monster, function (monster)<<newline>>""            local diffToPlayer = player.position - monster.position <<newline>>""            local distanceToPlayer = diffToPlayer:length()<<newline>>""            local angleToPlayer = diffToPlayer:getAngle() - math.pi<<newline>>""            local angle = 0.2<<newline>>""            if distanceToPlayer < 150 then<<newline>>""                angle = angle + 1.4 * (1.0 - distanceToPlayer / 150.0)<<newline>>""            end<<newline>>""            if distanceToPlayer > 1000 or math.abs(angleDiff(angleToPlayer, player.aimAngle)) < angle then<<newline>>""                monster.data.maxMoveSpeed = 0.0<<newline>>""                monster.animationSpeed = 0.0<<newline>>""                monster.moveSpeed = 0.0<<newline>>""                monster.data.maxRotateSpeed = 0.0<<newline>>""                monster.data.canHit = false<<newline>>""            else<<newline>>""                monster.data.maxMoveSpeed = monster.data.originalSpeed<<newline>>""                monster.animationSpeed = 1.0<<newline>>""                monster.data.maxRotateSpeed = monster.data.originalSpeed<<newline>>""                monster.data.canHit = true<<newline>>""            end<<newline>>""        end)<<newline>>""    elseif t == 9 then -- invulnerability after hit<<newline>>""        monster.colorMultiplier:addBuff(Vec4.new(0.7, 1.7, 0.7, 1.0))<<newline>>""        addCustomOnHit(monster, function(monster, damage, args)<<newline>>""            if time - monster.data.lastHitTime < 1.0 then<<newline>>""                damage = 0<<newline>>""            end<<newline>>""            <<newline>>""            local buffId = monster.moveSpeedMultiplier:addBuffWithId(monster.id, 0.3)<<newline>>""            monster.moveSpeedMultiplier:setBuffDuration(buffId, 1.0)<<newline>>""            <<newline>>""            buffId = monster.colorMultiplier:addBuff(Vec4.new(1.0, 1.0, 1.0, 0.2))<<newline>>""            monster.colorMultiplier:setBuffDuration(buffId, 1.0)<<newline>>""            monster.data.lastHitTime = time<<newline>>""            return damage<<newline>>""        end)<<newline>>""        addCustomShouldHit(monster, function(monster, gun, bullet)<<newline>>""            return monster.data.lastHitTime == nil or time - monster.data.lastHitTime > 1.0<<newline>>""        end)<<newline>>""    elseif t == 10 then -- blinks<<newline>>""        monster.data.blinkParticle = monster:addParticleSpawner(\"CriticalParticle\", {});<<newline>>""        monster.colorMultiplier:addBuff(Vec4.new(0.7, 1.7, 1.7, 1.0))<<newline>>""        monster.hitPoint = math.floor(monster.hitPoint * 1.5)<<newline>>""<<newline>>""        addCustomOnHit(monster, function(monster, damage, args)<<newline>>""            if monster.hitPoint > damage then<<newline>>""                local t = math.random() * math.pi * 2.0<<newline>>""                local r = math.random() * 100.0 + 100.0<<newline>>""                local v = Vec2.fromAngle(t) * r<<newline>>""                for i=1,8 do<<newline>>""                    monster:spawnParticle(monster.data.blinkParticle, {initialScale = 15.0, moveSpeed = 150.0})<<newline>>""                end<<newline>>""                monster.position = monster.position + v<<newline>>""                for i=1,8 do<<newline>>""                    monster:spawnParticle(monster.data.blinkParticle, {initialScale = 15.0, moveSpeed = 150.0})<<newline>>""                end<<newline>>""                <<newline>>""                playSound({path = \"~/resources/sounds/shimmer.ogg\"})<<newline>>""            end<<newline>>""            return damage<<newline>>""        end)<<newline>>""    elseif t == 11 then -- spawn little clones<<newline>>""        monster.colorMultiplier:addBuff(Vec4.new(0.722, 0.369, 0.176, 1.0))<<newline>>""        monster.moveSpeed = monster.moveSpeed * 0.5<<newline>>""        monster.data.maxHitpoint = monster.hitPoint<<newline>>""        monster:setScale(0.8 + math.random() * 0.3)<<newline>>""        <<newline>>""        addCustomOnTick(monster, function (monster)<<newline>>""            if monster.data.spawnTimer == nil then<<newline>>""                monster.data.spawnTimer = 3.0<<newline>>""            end<<newline>>""            monster.data.spawnTimer = monster.data.spawnTimer - dt<<newline>>""            <<newline>>""            if monster.data.spawnTimer < 0.0 then<<newline>>""                monster.data.spawnTimer = monster.data.spawnTimer + 5.0<<newline>>""                <<newline>>""                if missionData.ignoreMonsterCount < 100 then<<newline>>""                    local newMonster = addMonster(monster.monsterTemplate.name)<<newline>>""                    newMonster.position = monster.position<<newline>>""                    newMonster:setScale(math.max(0.3, monster.scale * 0.60))<<newline>>""                    newMonster.colorMultiplier:addBuff(Vec4.new(0.722, 0.369, 0.176, 1.0))<<newline>>""                    <<newline>>""                    newMonster.data.playerSeeRange = monster.data.playerSeeRange<<newline>>""                    newMonster.data.maxMoveSpeed = monster.data.maxMoveSpeed * 0.8<<newline>>""                    newMonster.data.maxRotateSpeed = monster.data.maxRotateSpeed<<newline>>""<<newline>>""                    newMonster.data.hitWaitTime = monster.data.hitWaitTime<<newline>>""                    newMonster.data.hitInterval = monster.data.hitInterval<<newline>>""                    newMonster.data.minDamage = math.ceil(monster.data.minDamage * 0.4)<<newline>>""                    newMonster.data.maxDamage = math.ceil(monster.data.maxDamage * 0.4)<<newline>>""<<newline>>""                    newMonster.experienceMultiplier = 0.0<<newline>>""                    newMonster.scoreMultiplier = 0.0<<newline>>""<<newline>>""                    newMonster.hitPoint = math.floor(monster.data.maxHitpoint * 0.2)<<newline>>""                    newMonster.data.randomMove = true<<newline>>""                    newMonster.moveAngle = -monster.moveAngle<<newline>>""                    <<newline>>""                    ignoreMonsterForCount(newMonster)<<newline>>""                end<<newline>>""            end<<newline>>""        end)<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""function removeBuffIcon(name, dontUpdate)<<newline>>""    local buffData = missionData.buffs[name] <<newline>>""    if buffData ~= nil then<<newline>>""        missionData.buffObject:removeTexture(buffData.renderable)<<newline>>""        missionData.buffs[name] = nil<<newline>>""        missionData.buffCount = missionData.buffCount - 1<<newline>>""        <<newline>>""        if dontUpdate ~= true then<<newline>>""            updateBuffPositions()<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""function addBuffIcon(name, path)<<newline>>""    if missionData.buffObject == nil then<<newline>>""        missionData.buffObject = addGameObject(\"BuffIcons\")<<newline>>""        missionData.buffObject:setAlignment(RenderableAlignment.top)<<newline>>""        missionData.buffObject:setLevel(RenderableLevel.GUI)<<newline>>""        BuffIcons.repositionGUI(missionData.buffObject)<<newline>>""        missionData.buffs = {}<<newline>>""        missionData.buffCount = 0<<newline>>""    end<<newline>>""    <<newline>>""    removeBuffIcon(name, true)<<newline>>""    <<newline>>""    local buffObject = missionData.buffObject<<newline>>""    local renderable = buffObject:addTexture(path, \"~/resources/default\")<<newline>>""    renderable:setAlignment(RenderableAlignment.top)<<newline>>""    <<newline>>""    local buffData = {}<<newline>>""    buffData.renderable = renderable<<newline>>""    buffData.name = name<<newline>>""    buffData.id = getUniqueId()<<newline>>""    missionData.buffs[name] = buffData<<newline>>""    missionData.buffCount = missionData.buffCount + 1<<newline>>""    <<newline>>""    updateBuffPositions()<<newline>>""end<<newline>>""<<newline>>""function updateBuffPositions()<<newline>>""    local p = 0<<newline>>""    local shift = (missionData.buffCount - 1) * 34.0 / 2<<newline>>""    <<newline>>""    for key,value in pairs(missionData.buffs) do<<newline>>""        value.renderable:setWorldMatrix(Mat3.fromPositionAndScale(Vec2.new(p * 34 - shift, 0), Vec2.new(15.0, 15.0)))<<newline>>""        p = p + 1<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""BuffIcons = {}<<newline>>""function BuffIcons.init()<<newline>>""end<<newline>>""function BuffIcons.repositionGUI(gameObject, size)<<newline>>""    gameObject:setPosition(Vec2.new(0, -90 / getCameraZoom()))<<newline>>""    gameObject:setScale(Vec2.new(1.0 / getCameraZoom(), 1.0 / getCameraZoom()))<<newline>>""end<<newline>>""<<newline>>""<<newline>>""function ignoreMonsterForCount(monster)<<newline>>""    if monster.data.ignoreForCount ~= true then<<newline>>""        monster.data.ignoreForCount = true<<newline>>""        missionData.ignoreMonsterCount = missionData.ignoreMonsterCount + 1<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""function canSpawnMonster()<<newline>>""    return (missionData.maxMonster == nil or getMonsterCount() < missionData.maxMonster + missionData.ignoreMonsterCount)<<newline>>""end<<newline>>""<<newline>>""function canSpawnIgnoredMonster()<<newline>>""    return (missionData.maxMonster == nil or getMonsterCount() < missionData.maxMonster) and (missionData.ignoreMonsterCount == nil or missionData.ignoreMonsterCount < 100)<<newline>>""end<<newline>>""<<newline>>""function gameResetTick()<<newline>>""    if missionData.enableReset == true then<<newline>>""        if missionData.scoreText ~= nil then<<newline>>""            missionData.scoreText:setText(\"Score : \" .. getScore())<<newline>>""        end<<newline>>""        <<newline>>""        if isKeyPressed(keys.Space) then<<newline>>""            loadMission(missionScript)<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>""    <<newline>>""function showGameReset(title)<<newline>>""    if title == nil then<<newline>>""        title = \"You Died\"<<newline>>""    end<<newline>>""    local space = 0.0<<newline>>""    if string.match(title, \"<<escapednewline>>""\") then<<newline>>""        space = 50.0<<newline>>""    end<<newline>>""    <<newline>>""    local gameObject = addGameObject(\"FadeOutImage\")<<newline>>""    gameObject.data.startTime = time<<newline>>""    gameObject.data.fadeOutStartTime = -1<<newline>>""    gameObject.data.fadeInDuration = 1.0<<newline>>""    gameObject:setLevel(RenderableLevel.GUI + 5)<<newline>>""    gameObject.data.renderable = gameObject:addText(title, \"resources/fontData.txt\")<<newline>>""    gameObject.data.renderable:setAlignment(RenderableAlignment.center)<<newline>>""    gameObject.data.renderable:setTextAlignment(TextAlignment.center)<<newline>>""    gameObject.data.renderable:setTextSize(120.0)<<newline>>""    gameObject:setPosition(Vec2.new(0, 50 + space))<<newline>>""    <<newline>>""    gameObject = addGameObject(\"FadeOutImage\")<<newline>>""    gameObject.data.startTime = time<<newline>>""    gameObject.data.fadeOutStartTime = -1<<newline>>""    gameObject.data.fadeInDuration = 1.0<<newline>>""    gameObject:setLevel(RenderableLevel.GUI + 5)<<newline>>""    gameObject.data.renderable = gameObject:addText(\"Press Space to Reset\", \"resources/fontData.txt\")<<newline>>""    gameObject.data.renderable:setAlignment(RenderableAlignment.center)<<newline>>""    gameObject.data.renderable:setTextAlignment(TextAlignment.center)<<newline>>""    gameObject.data.renderable:setTextSize(32.0)<<newline>>""    gameObject:setPosition(Vec2.new(0, -40 -space))<<newline>>""    <<newline>>""    gameObject = addGameObject(\"FadeOutImage\")<<newline>>""    gameObject.data.startTime = time<<newline>>""    gameObject.data.fadeOutStartTime = -1<<newline>>""    gameObject.data.fadeInDuration = 1.0<<newline>>""    gameObject:setLevel(RenderableLevel.GUI + 5)<<newline>>""    gameObject.data.renderable = gameObject:addText(\"Esc to Exit\", \"resources/fontData.txt\")<<newline>>""    gameObject.data.renderable:setAlignment(RenderableAlignment.center)<<newline>>""    gameObject.data.renderable:setTextAlignment(TextAlignment.center)<<newline>>""    gameObject.data.renderable:setTextSize(32.0)<<newline>>""    gameObject:setPosition(Vec2.new(0, -80-space))<<newline>>""    <<newline>>""    gameObject = addGameObject(\"FadeOutImage\")<<newline>>""    gameObject.data.startTime = time<<newline>>""    gameObject.data.fadeOutStartTime = -1<<newline>>""    gameObject.data.fadeInDuration = 1.0<<newline>>""    gameObject:setLevel(RenderableLevel.GUI + 5)<<newline>>""    gameObject.data.renderable = gameObject:addText(\"Score : \" .. getScore(), \"resources/fontData.txt\")<<newline>>""    gameObject.data.renderable:setAlignment(RenderableAlignment.center)<<newline>>""    gameObject.data.renderable:setTextAlignment(TextAlignment.center)<<newline>>""    gameObject.data.renderable:setTextSize(32.0)<<newline>>""    gameObject:setPosition(Vec2.new(0, -160-space))<<newline>>""    <<newline>>""    missionData.scoreText = gameObject.data.renderable<<newline>>""    <<newline>>""    missionData.enableReset = true<<newline>>""end<<newline>>""<<newline>>""function missionInit(missionData)<<newline>>""    missionData.ignoreMonsterCount = 0<<newline>>""end<<newline>>""<<newline>>""function debugInit(missionData)<<newline>>""    missionData.extraMin = 0.0<<newline>>""end<<newline>>""<<newline>>""function debugTick(missionData)<<newline>>""<<newline>>""    if hasCheats() then<<newline>>""        if isKeyReleased(keys.PageUp) then<<newline>>""            missionData.extraMin = missionData.extraMin + 0.5<<newline>>""            log(\"Extra Min \" .. missionData.extraMin)<<newline>>""        end<<newline>>""        if isKeyReleased(keys.PageDown) then<<newline>>""            missionData.extraMin = missionData.extraMin - 0.5<<newline>>""            if missionData.extraMin < 0.0 then<<newline>>""                missionData.extraMin = 0.0<<newline>>""            end<<newline>>""            log(\"Extra Min \" .. missionData.extraMin)<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""<<newline>>""function addRandomColliders(count, distanceToMid)<<newline>>""    local colliderSpawnChances = {}<<newline>>""    local totalChance = 0.0<<newline>>""    for name,collider in pairs(Colliders) do <<newline>>""        local chance = 1.0<<newline>>""        if collider.jsonTable.chance ~= nil then<<newline>>""            chance = collider.jsonTable.chance<<newline>>""        end<<newline>>""        totalChance = totalChance + chance<<newline>>""        colliderSpawnChances[name] = chance<<newline>>""    end<<newline>>""    <<newline>>""    for i=1,count do<<newline>>""        local m = nil<<newline>>""        local randChance = math.random() * totalChance<<newline>>""        for key,value in pairs(colliderSpawnChances) do<<newline>>""            randChance = randChance - value<<newline>>""            if randChance <= 0.000001 then<<newline>>""                m = key<<newline>>""                break<<newline>>""            end<<newline>>""        end<<newline>>""        if m ~= nil then<<newline>>""            addGameObjectUsingTemplate(m, {distanceToMid = distanceToMid})<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>"""}, 
{"resources/guns/helpers.lua", "ShootTimer = {}<<newline>>""<<newline>>""function ShootTimer.initGun(gun, interval)<<newline>>""    gun.data.shootInterval = interval<<newline>>""    gun.data.timeToNextShoot = 0.0<<newline>>""end<<newline>>""<<newline>>""function ShootTimer.IsGunReady(gun)<<newline>>""    return gun.data.timeToNextShoot < time and dt > 0.0<<newline>>""end<<newline>>""<<newline>>""function ShootTimer.GunShot(gun)<<newline>>""    if gun.showShootAnimation then<<newline>>""        player:playShootAnimation()<<newline>>""    end<<newline>>""    gun.data.timeToNextShoot = time + gun.data.shootInterval * player.shootSpeedMultiplier:getBuffedValue()<<newline>>""end<<newline>>""<<newline>>""<<newline>>""function ShootTimer.checkGun(gun)<<newline>>""    if gun.data.timeToNextShoot < time and dt > 0.0 then<<newline>>""        ShootTimer.GunShot(gun)<<newline>>""        return true<<newline>>""    end<<newline>>""    return false<<newline>>""end<<newline>>""<<newline>>""<<newline>>""SpreadHelper = {}<<newline>>""<<newline>>""function SpreadHelper.initGun(gun)<<newline>>""    gun.data.timeToNextShoot = time<<newline>>""    gun.spreadAngle = 0.0<<newline>>""    gun.data.minSpread = 0.0<<newline>>""    gun.data.maxSpread = 0.15<<newline>>""    gun.data.spreadDecreaseStartTime = 0.1<<newline>>""    gun.data.spreadDecreaseSpeed = 0.15<<newline>>""    gun.data.spreadIncreasePerShoot = 0.025<<newline>>""end<<newline>>""<<newline>>""function SpreadHelper.onTick(gun)<<newline>>""    local data = gun.data<<newline>>""    if data.timeToNextShoot < time - data.spreadDecreaseStartTime then<<newline>>""        gun.spreadAngle = gun.spreadAngle - dt * data.spreadDecreaseSpeed<<newline>>""    end<<newline>>""    <<newline>>""    if gun.spreadAngle < data.minSpread then<<newline>>""        gun.spreadAngle = data.minSpread<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""<<newline>>""<<newline>>""function SpreadHelper.onShoot(gun)<<newline>>""    local data = gun.data<<newline>>""    gun.spreadAngle = gun.spreadAngle + data.spreadIncreasePerShoot<<newline>>""    if gun.spreadAngle > gun.data.maxSpread then<<newline>>""        gun.spreadAngle = gun.data.maxSpread<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""BurnMonsterObject = {}<<newline>>""<<newline>>""function BurnMonsterObject.init(gameobject)<<newline>>""    gameobject.data.time = 0.3<<newline>>""    gameobject.data.particletime = 0.01<<newline>>""end<<newline>>""<<newline>>""function BurnMonsterObject.onTick(gameobject)<<newline>>""    local data = gameobject.data<<newline>>""<<newline>>""    data.time = data.time - dt<<newline>>""    if data.time < 0.0 then<<newline>>""        data.time = data.time + 0.3<<newline>>""        data.monster:doDamageWithArgs(math.floor(math.random() * data.damageVar + data.damageMin), Vec2.new(0.0, 0.0), {noSlowdown = true})<<newline>>""        data.count = data.count - 1<<newline>>""        if data.count <= 0 then<<newline>>""            gameobject.toBeRemoved = true<<newline>>""            data.monster.data.flamethrowerObject = nil<<newline>>""        end<<newline>>""    end<<newline>>""<<newline>>""    <<newline>>""    if data.monster.isDead then<<newline>>""        gameobject.toBeRemoved = true<<newline>>""    else<<newline>>""<<newline>>""        if data.monster.data.burnParticle == nil then<<newline>>""            data.monster.data.burnParticle = data.monster:addParticleSpawner(\"FlameParticle\", {})<<newline>>""        end<<newline>>""        <<newline>>""        gameobject.data.particletime = gameobject.data.particletime - dt<<newline>>""        while gameobject.data.particletime < 0.0 do<<newline>>""            gameobject.data.particletime = gameobject.data.particletime + 0.01<<newline>>""            local t = 0.0<<newline>>""            <<newline>>""            while t < data.monster.bulletRadius do<<newline>>""                local speed = Vec2.randDir() * (math.random() * 3.0 + 3.0)<<newline>>""                local pos = Vec2.randDir()<<newline>>""                local r = math.random()<<newline>>""                r = r * r<<newline>>""                pos = pos * (data.monster.bulletRadius * r) <<newline>>""                <<newline>>""                data.monster.data.burnParticle:addParticle(data.monster.position + pos, {moveSpeed = data.monster.moveVelocity + speed})<<newline>>""                t = t + 15<<newline>>""            end<<newline>>""        end<<newline>>""    end<<newline>>""    <<newline>>""end<<newline>>""<<newline>>""<<newline>>""function ultimateSpawnChance()<<newline>>""    if player.ultimate == nil and player.gun ~= nil and player.gun.name ~= \"Pistol\" then<<newline>>""        return 4.0<<newline>>""    end<<newline>>""    return 1.0<<newline>>""end<<newline>>"""}, 
{"resources/monsters/helpers.lua", "<<newline>>""StunController = {}<<newline>>""<<newline>>""function StunController.init(monster)<<newline>>""    data.stunDuration = 0.02<<newline>>""    data.slowDuration = 0.15<<newline>>""    data.slowMultiplier = 0.4<<newline>>""    data.stunTime = 0.0<<newline>>""    data.slowTime = 0.0<<newline>>""end<<newline>>""<<newline>>""function StunController.buffStats(monster, min)<<newline>>""<<newline>>""end<<newline>>""<<newline>>""function StunController.getSlowAmount(monster)<<newline>>""    local mul = 1.0<<newline>>""<<newline>>""    if data.stunTime > 0.0 then<<newline>>""        mul = 0.0<<newline>>""        data.stunTime = data.stunTime - dt<<newline>>""    elseif data.slowTime > 0.0 then<<newline>>""        mul = data.customSlowdownAmount * data.slowMultiplier * (data.slowDuration - data.slowTime)/ data.slowDuration<<newline>>""        data.slowTime = data.slowTime - dt<<newline>>""    end<<newline>>""    return mul<<newline>>""end<<newline>>""<<newline>>""function StunController.onHit(monster, damage, dir, args)<<newline>>""    if args.noSlowdown == true then<<newline>>""        return<<newline>>""    end<<newline>>""    local data = monster.data<<newline>>""    if args.customSlowdownAmount ~= nil then<<newline>>""        data.customSlowdownAmount = args.customSlowdownAmount<<newline>>""    else<<newline>>""        data.customSlowdownAmount = 1.0<<newline>>""    end<<newline>>""    if args.slowdownOnly then<<newline>>""        data.slowTime = data.slowDuration<<newline>>""    elseif args.doNotStun ~= true then<<newline>>""        data.stunTime = data.stunDuration<<newline>>""        data.slowTime = data.slowDuration<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""<<newline>>""<<newline>>""MeleeHitImage = {}<<newline>>""<<newline>>""function MeleeHitImage.build(monster)<<newline>>""    local gameObject =  addGameObject(\"MeleeHitImage\")<<newline>>""    gameObject:setLevel(RenderableLevel.player + 5)<<newline>>""    gameObject.data.startTime = time<<newline>>""    gameObject.data.renderable = gameObject:addTexture(\"~/resources/monsters/melee_hit.png\", \"~/resources/default\")<<newline>>""    gameObject.data.renderable:setWorldMatrix(Mat3.fromScale(20.0, 20.0))<<newline>>""    gameObject:setPosition(player.position)<<newline>>""    gameObject:setRotation(-math.pi * 0.5 - monster.moveAngle)<<newline>>""    return gameObject<<newline>>""end<<newline>>""<<newline>>""function MeleeHitImage.init(gameObject)<<newline>>""end<<newline>>""<<newline>>""function MeleeHitImage.onTick(gameObject)<<newline>>""    local timeDiff = time - gameObject.data.startTime<<newline>>""    local alpha<<newline>>""    if timeDiff < 0.05 then<<newline>>""        alpha = timeDiff / 0.05<<newline>>""    else <<newline>>""        alpha = 1.0 - (timeDiff - 0.3) / 0.2<<newline>>""        if alpha < 0.0 then <<newline>>""            gameObject.toBeRemoved = true<<newline>>""            alpha = 0.0<<newline>>""        elseif alpha > 1.0 then<<newline>>""            alpha = 1.0<<newline>>""        end<<newline>>""    end<<newline>>""    gameObject.data.renderable:setColor(Vec4.new(1.0, 1.0, 1.0, alpha))<<newline>>""end<<newline>>""<<newline>>""function MeleeHitImage.clear(monster)<<newline>>""<<newline>>""end<<newline>>""<<newline>>""MonsterGroupHelper = {}<<newline>>""<<newline>>""function MonsterGroupHelper.init(monster) <<newline>>""    monster.data.closestMonsterIndex = -1<<newline>>""    monster.data.playerIgnoreDistance = 0.0<<newline>>""end<<newline>>""<<newline>>""function MonsterGroupHelper.fixAngle(monster, angle) <<newline>>""    local closestMonster = nil<<newline>>""    if data.closestMonsterIndex ~= -1 then<<newline>>""        closestMonster = getMonster(data.closestMonsterIndex)<<newline>>""        if closestMonster ~= nil then<<newline>>""            if closestMonster.position:distanceSquared(monster.position) > 30.0 * 30.0 then<<newline>>""                closestMonster = nil<<newline>>""            end<<newline>>""        end<<newline>>""    end<<newline>>""    <<newline>>""    if closestMonster == nil then<<newline>>""        closestMonster = getClosestMonsterInRangeWithIgnoreId(monster.position, 25.0, {monster.id})<<newline>>""    else<<newline>>""        local newClosestMonster = getClosestMonsterInRangeWithIgnoreId(monster.position, 25.0, {monster.id})<<newline>>""        <<newline>>""        if newClosestMonster ~= nil and newClosestMonster ~= closestMonster then<<newline>>""            if closestMonster.position:distanceSquared(monster.position) > newClosestMonster.position:distanceSquared(monster.position) + 15 * 15 then<<newline>>""                closestMonster = newClosestMonster<<newline>>""            end<<newline>>""        end<<newline>>""    end<<newline>>""    <<newline>>""    if closestMonster ~= nil then<<newline>>""        data.closestMonsterIndex = closestMonster.id<<newline>>""        local toOther = closestMonster.position - monster.position;<<newline>>""        local c = 1.0 - toOther:length() / 30.0<<newline>>""            <<newline>>""        local cPlayer = (distanceToPlayer - data.playerIgnoreDistance) / 100<<newline>>""        if cPlayer < 0.0 then<<newline>>""            cPlayer = 0.0<<newline>>""        end<<newline>>""        local dot = toOther:sideVec():dot(diffToPlayer)<<newline>>""        if dot > 0.0 then<<newline>>""            angle = angle + 0.6 * c * cPlayer<<newline>>""        else<<newline>>""            angle = angle - 0.6 * c * cPlayer<<newline>>""        end<<newline>>""    end<<newline>>""    return angle<<newline>>""end<<newline>>""<<newline>>""MonsterMeleeHelper = {}<<newline>>""MonsterMeleeHelper.slowBuffId = getGlobalUniqueId()<<newline>>""<<newline>>""function MonsterMeleeHelper.init(monster) <<newline>>""    monster.data.moving = true<<newline>>""    monster.data.lastHitTime = -1.0<<newline>>""    monster.data.hitInterval = 1.5<<newline>>""    monster.data.hitWaitTime = 0.10<<newline>>""    monster.data.minDamage = 5<<newline>>""    monster.data.maxDamage = 11<<newline>>""    monster.data.slowdownAmount = 0.6<<newline>>""    monster.data.slowdownDuration = 0.12<<newline>>""    monster.data.canHit = true<<newline>>""end<<newline>>""<<newline>>""function MonsterMeleeHelper.buffStats(monster, min)<<newline>>""    local data = monster.data<<newline>>""    data.hitWaitTime = data.hitWaitTime  * (1.0 - clamp(min * 0.1) * 0.8)<<newline>>""    data.hitInterval = data.hitInterval  * (1.0 - clamp(min * 0.1) * 0.4)<<newline>>""    data.minDamage = math.floor(data.minDamage * (1.0 + min * 0.2))<<newline>>""    data.maxDamage = math.floor(data.maxDamage * (1.0 + min * 0.2))<<newline>>""end<<newline>>""<<newline>>""function MonsterMeleeHelper.onTick(monster)<<newline>>""    if data.canHit == false then<<newline>>""        return<<newline>>""    end<<newline>>""    local range = 20.0<<newline>>""    if data.moving == false then<<newline>>""        range = 30.0<<newline>>""    end<<newline>>""    <<newline>>""    if distanceToPlayer < range + monster.collisionRadius and player.isDead == false then<<newline>>""        if data.lastHitTime + data.hitInterval < time then<<newline>>""            data.lastHitTime = time<<newline>>""            data.moving = false<<newline>>""            monster:playAnimation(\"attack\")<<newline>>""            data.willHit = true<<newline>>""        end<<newline>>""        if data.willHit and data.lastHitTime + data.hitWaitTime < time then<<newline>>""            data.willHit = false<<newline>>""            local damage = player:doDamage(math.floor(data.minDamage + math.random() *(data.maxDamage - data.minDamage)), angleToPlayer)<<newline>>""            if damage > 0 then<<newline>>""                playSound({path = \"~/resources/sounds/melee_woosh.ogg\", volume = 0.3})<<newline>>""                if player.data.noSlowdownOnHit == nil then<<newline>>""                    player.maxSpeed:addBuffWithId(MonsterMeleeHelper.slowBuffId, data.slowdownAmount)<<newline>>""                    player.maxSpeed:setBuffDuration(MonsterMeleeHelper.slowBuffId, data.slowdownDuration)<<newline>>""                    player.maxSpeed:setBuffFadeInFadeOut(MonsterMeleeHelper.slowBuffId, data.slowdownDuration/4, data.slowdownDuration/4)<<newline>>""                end<<newline>>""            end<<newline>>""            <<newline>>""            MeleeHitImage.build(monster)<<newline>>""        end<<newline>>""    else<<newline>>""        data.willHit = false<<newline>>""        if data.moving == false then<<newline>>""            data.moving = true<<newline>>""            monster:playAnimation(\"walk\", math.random())<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""<<newline>>""<<newline>>""BulletShooter = {}<<newline>>""<<newline>>""function BulletShooter.init(monster)<<newline>>""    data.bulletMinDamage = 10<<newline>>""    data.bulletMaxDamage = 18<<newline>>""    data.bulletSpeed = 300<<newline>>""    data.bulletRate = 3.0<<newline>>""    data.bulletRandom = 0.3<<newline>>""    data.shootsBullets = false<<newline>>""end<<newline>>""<<newline>>""function BulletShooter.buffStats(monster, min)<<newline>>""    local data = monster.data<<newline>>""    <<newline>>""    if data.isBoss ~= true and data.cannotShootBullets ~= true and math.random() > 0.98 - clamp(min * 0.2) * 0.05 then<<newline>>""        data.shootsBullets = true<<newline>>""        data.bulletMinDamage = math.floor(data.bulletMinDamage * (1.0 + min * 0.3))<<newline>>""        data.bulletMaxDamage = math.floor(data.bulletMaxDamage * (1.0 + min * 0.4))<<newline>>""        <<newline>>""        data.bulletRate = data.bulletRate - clamp(min * 0.1) * 2.0<<newline>>""        data.bulletRandom = data.bulletRandom - clamp(min * 0.15) * 0.2<<newline>>""        data.bulletCount = 1<<newline>>""        monster.colorMultiplier:addBuff(Vec4.new(0.8, 0.95, 0.8, 1.0))<<newline>>""        monster:modifyDrawLevel(1)<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""function BulletShooter.onTick(monster)<<newline>>""    if data.shootsBullets then<<newline>>""        if data.bulletTimer == nil then<<newline>>""            data.bulletTimer = data.bulletRate + math.random() * 2.0<<newline>>""        end<<newline>>""        data.bulletTimer = data.bulletTimer - dt<<newline>>""        if data.bulletTimer < 0.0 then<<newline>>""            data.bulletTimer = data.bulletRate + math.random() * 2.0<<newline>>""            <<newline>>""            local r = math.random() * ( data.bulletRandom * 2.0 - data.bulletRandom)<<newline>>""            for i = 1, monster.data.bulletCount do <<newline>>""            <<newline>>""                local bullet = addCustomBullet({monsterBullet = true})<<newline>>""                bullet.damage = math.floor(math.random(data.bulletMinDamage, data.bulletMaxDamage))<<newline>>""                bullet.position = monster.position + monster.moveDir * 6.0<<newline>>""                bullet.moveSpeed = data.bulletSpeed<<newline>>""                bullet.moveAngle = monster.moveAngle + r  + ( -monster.data.bulletCount * 0.5 + i  - 0.5 ) * math.pi / 14.0<<newline>>""                bullet.radius = 6.0<<newline>>""                bullet:addRenderableTextureWithSize(\"~/resources/monsters/bullet.png\", Vec2.new(18.0, 18.0))<<newline>>""            end<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""function addCustomOnTick(monster, tick)<<newline>>""    if monster.data.customTick == nil then<<newline>>""      monster.data.customTick = {}<<newline>>""      monster.data.customTickCount = 0<<newline>>""    end<<newline>>""    monster.data.customTick[monster.data.customTickCount] = tick<<newline>>""    monster.data.customTickCount = monster.data.customTickCount + 1<<newline>>""end<<newline>>""<<newline>>""function customMonsterOnTick(monster)<<newline>>""    if monster.data.customTick ~= nil then<<newline>>""        for key,tick in pairs( monster.data.customTick) do<<newline>>""            tick(monster)<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""function addCustomOnKill(monster, kill)<<newline>>""    if monster.data.customKill == nil then<<newline>>""      monster.data.customKill = {}<<newline>>""      monster.data.customKillCount = 0<<newline>>""    end<<newline>>""    monster.data.customKill[monster.data.customKillCount] = kill<<newline>>""    monster.data.customKillCount = monster.data.customKillCount + 1<<newline>>""end<<newline>>""<<newline>>""function customMonsterOnKill(monster, damage, dir, args)<<newline>>""    if monster.data.customKill ~= nil then<<newline>>""        for key,kill in pairs(monster.data.customKill) do<<newline>>""            kill(monster, damage, dir, args)<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""function addCustomOnHit(monster, hit)<<newline>>""    if monster.data.customHit == nil then<<newline>>""      monster.data.customHit = {}<<newline>>""      monster.data.customHitCount = 0<<newline>>""    end<<newline>>""    monster.data.customHit[monster.data.customHitCount] = hit<<newline>>""    monster.data.customHitCount = monster.data.customHitCount + 1<<newline>>""end<<newline>>""<<newline>>""function customMonsterOnHit(monster, damage, dir, args)<<newline>>""    if monster.data.customHit ~= nil then<<newline>>""        for key,hit in pairs(monster.data.customHit) do<<newline>>""            damage = hit(monster, damage, dir, args)<<newline>>""            if damage <= 0 then<<newline>>""                break<<newline>>""            end<<newline>>""        end<<newline>>""    end<<newline>>""    return damage<<newline>>""end<<newline>>""<<newline>>""function addCustomShouldHit(monster, shouldHit)<<newline>>""    if monster.data.customShouldHit == nil then<<newline>>""      monster.data.customShouldHit = {}<<newline>>""      monster.data.customShouldHitCount = 0<<newline>>""    end<<newline>>""    monster.data.customShouldHit[monster.data.customShouldHitCount] = shouldHit<<newline>>""    monster.data.customShouldHitCount = monster.data.customShouldHitCount + 1<<newline>>""end<<newline>>""<<newline>>""function customMonsterShouldHit(monster, gun, bullet)<<newline>>""    if monster.data.customShouldHit ~= nil then<<newline>>""        for key,shouldHit in pairs(monster.data.customShouldHit) do<<newline>>""            local r = shouldHit(monster, gun, bullet)<<newline>>""            if r == false then<<newline>>""                return false<<newline>>""            end<<newline>>""        end<<newline>>""    end<<newline>>""    return true<<newline>>""end"}, 
{"resources/bonuses/bullet_crazy/data.json", "{<<newline>>""  \"type\" : \"bonus\",<<newline>>""  \"name\": \"Ammo Maniac\",<<newline>>""  \"iconFile\" : \"icon.png\",<<newline>>""  \"scriptFile\" : \"bullet_crazy.lua\",<<newline>>""  \"scriptName\" : \"AmmoManiac\"<<newline>>""}"}, 
{"resources/bonuses/bullet_crazy/bullet_crazy.lua", "<<newline>>""AmmoManiac.buffId = getGlobalUniqueId()<<newline>>""<<newline>>""function AmmoManiac.spawn(bonus, pos)<<newline>>""    local duration = 6.0 * player.data.bonusDurationMultiplier<<newline>>""    player.gunSpreadMultiplier:addBuffWithId(AmmoManiac.buffId, 1.8)<<newline>>""    player.clipCountMultiplier:addBuffWithId(AmmoManiac.buffId, 4.0)<<newline>>""    player.reloadSpeedMultiplier:addBuffWithId(AmmoManiac.buffId, 2.5)<<newline>>""    player.shootSpeedMultiplier:addBuffWithId(AmmoManiac.buffId, 0.35)<<newline>>""    player.damageMultiplier:addBuffWithId(AmmoManiac.buffId, 0.75)<<newline>>""    <<newline>>""    player.clipCountMultiplier:setBuffDuration(AmmoManiac.buffId, duration)<<newline>>""    player.gunSpreadMultiplier:setBuffDuration(AmmoManiac.buffId, duration)<<newline>>""    player.reloadSpeedMultiplier:setBuffDuration(AmmoManiac.buffId, duration)<<newline>>""    player.shootSpeedMultiplier:setBuffDuration(AmmoManiac.buffId, duration)<<newline>>""    player.damageMultiplier:setBuffDuration(AmmoManiac.buffId, duration)<<newline>>""<<newline>>""    addBuffIcon(\"AmmoManiac\", AmmoManiac.basePath .. \"icon.png\")<<newline>>""    <<newline>>""    playSound({path = AmmoManiac.basePath .. \"bulletcrazy.ogg\", volume = 0.5})<<newline>>""    <<newline>>""    bonus:setActive(true)<<newline>>""end<<newline>>""<<newline>>""function AmmoManiac.onTick(bonus)<<newline>>""    if player.clipCountMultiplier:hasBuffInfo(AmmoManiac.buffId) == false then<<newline>>""        removeBuffIcon(\"AmmoManiac\")<<newline>>""        bonus:setActive(false)<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>"""}, 
{"resources/bonuses/circle_fire/data.json", "{<<newline>>""  \"type\" : \"bonus\",<<newline>>""  \"name\": \"Laser Turret\",<<newline>>""  \"iconFile\" : \"icon.png\",<<newline>>""  \"scriptFile\" : \"circle_fire.lua\",<<newline>>""  \"scriptName\" : \"CircleFire\",<<newline>>""  \"spawnChance\" : 1.5<<newline>>""}"}, 
{"resources/bonuses/circle_fire/circle_fire.lua", "<<newline>>""function CircleFire.spawn(bonus, pos)<<newline>>""    local t = addGameObject(\"CircleFire\")<<newline>>""    t.data.position = Vec2.new(pos.x, pos.y)<<newline>>""end<<newline>>""<<newline>>""<<newline>>""function CircleFire.init(gameObject)<<newline>>""    gameObject.data.startTime = time<<newline>>""    gameObject.data.lastShootTime = 0.0<<newline>>""    gameObject.data.lastShootIndex = 0<<newline>>""    gameObject.data.i = 0<<newline>>""end<<newline>>""<<newline>>""function CircleFire.onTick(gameObject)<<newline>>""    if time - gameObject.data.startTime > 0.04 * gameObject.data.lastShootIndex + 0.04 * 0.25 * gameObject.data.i<<newline>>""    then<<newline>>""        local shift = math.floor(gameObject.data.lastShootIndex/10)*0.25<<newline>>""        <<newline>>""        local angle = math.pi * 2.0 * (gameObject.data.lastShootIndex + gameObject.data.i * 10 + shift) / 40<<newline>>""        local bullet = addCustomBullet()<<newline>>""        bullet.damage = math.floor(math.random() * 30.0 + 30)<<newline>>""        bullet.position = gameObject.data.position<<newline>>""        bullet.moveSpeed = 450.0<<newline>>""        bullet.moveAngle = angle<<newline>>""        bullet:addRenderableTextureWithSize(CircleFire.basePath .. \"bullet.png\", Vec2.new(14.0, 14.0))<<newline>>""        <<newline>>""        gameObject.data.i = gameObject.data.i + 1<<newline>>""        if gameObject.data.i == 4 then<<newline>>""            if gameObject.data.lastShootIndex % 2 == 0 then<<newline>>""                playSound({path = CircleFire.basePath .. \"laser_machinegun.ogg\", position = gameObject.data.position})<<newline>>""            end<<newline>>""            gameObject.data.i = 0<<newline>>""            gameObject.data.lastShootIndex = gameObject.data.lastShootIndex + 1<<newline>>""            <<newline>>""        end<<newline>>""        <<newline>>""        if gameObject.data.lastShootIndex >= 40 * player.data.bonusDurationMultiplier - 0.1<<newline>>""        then<<newline>>""            gameObject.toBeRemoved = true<<newline>>""        end<<newline>>""    end<<newline>>""end"}, 
{"resources/bonuses/double_exp/data.json", "{<<newline>>""  \"type\" : \"bonus\",<<newline>>""  \"name\": \"Double Experience\",<<newline>>""  \"iconFile\" : \"icon.png\",<<newline>>""  \"scriptFile\" : \"double_exp.lua\",<<newline>>""  \"scriptName\" : \"DoubleExp\"<<newline>>""}"}, 
{"resources/bonuses/double_exp/double_exp.lua", "DoubleExp.buffId = getGlobalUniqueId()<<newline>>""        <<newline>>""function DoubleExp.spawn(bonus, pos)<<newline>>""<<newline>>""    local duration = 25.0 * player.data.bonusDurationMultiplier<<newline>>""    <<newline>>""    player.monsterExperienceMultiplier:addBuffWithId(DoubleExp.buffId, 2.0)<<newline>>""    player.monsterExperienceMultiplier:setBuffDuration(DoubleExp.buffId, duration)<<newline>>""    <<newline>>""    addBuffIcon(\"DoubleExp\", DoubleExp.basePath .. \"icon.png\")<<newline>>""    <<newline>>""    playSound({path = DoubleExp.basePath .. \"double_exp.ogg\", volume = 1.3})<<newline>>""    bonus:setActive(true)<<newline>>""end<<newline>>""<<newline>>""function DoubleExp.onTick(bonus)<<newline>>""    if player.monsterExperienceMultiplier:hasBuffInfo(DoubleExp.buffId) == false then<<newline>>""        removeBuffIcon(\"DoubleExp\")<<newline>>""        bonus:setActive(false)<<newline>>""    end<<newline>>""end<<newline>>"""}, 
{"resources/bonuses/experience/data.json", "{<<newline>>""  \"type\" : \"bonus\",<<newline>>""  \"name\": \"Experience Boost\",<<newline>>""  \"iconFile\" : \"icon.png\",<<newline>>""  \"scriptFile\" : \"experience.lua\",<<newline>>""  \"scriptName\" : \"Experience\"<<newline>>""}"}, 
{"resources/bonuses/experience/experience.lua", "<<newline>>""function Experience.spawn(bonus, pos)<<newline>>""    player:gainExperience(math.floor(player.experienceForNextLevel / 3))<<newline>>""    playSound({path = Experience.basePath .. \"bonus.ogg\"})<<newline>>""end<<newline>>"""}, 
{"resources/bonuses/explosion/data.json", "{<<newline>>""  \"type\" : \"bonus\",<<newline>>""  \"name\": \"Explosion\",<<newline>>""  \"iconFile\" : \"icon.png\",<<newline>>""  \"scriptFile\" : \"explosion.lua\",<<newline>>""  \"scriptName\" : \"Explosion\", <<newline>>""  \"spawnChance\" : 1.5<<newline>>""}"}, 
{"resources/bonuses/explosion/explosion.lua", "<<newline>>""function Explosion.spawn(bonus, pos)<<newline>>""    addExplosion(pos, 200.0, 200.0, 250, 350)<<newline>>""    playSound({path = \"~/resources/sounds/explode.ogg\"})<<newline>>""end<<newline>>""<<newline>>"""}, 
{"resources/bonuses/extra_1000/data.json", "{<<newline>>""  \"type\" : \"bonus\",<<newline>>""  \"name\": \"1000 Points\",<<newline>>""  \"iconFile\" : \"icon.png\",<<newline>>""  \"scriptFile\" : \"extra_1000.lua\",<<newline>>""  \"scriptName\" : \"Extra1000\", <<newline>>""  \"spawnChance\" : 1.2<<newline>>""}"}, 
{"resources/bonuses/extra_1000/extra_1000.lua", "<<newline>>""function Extra1000.spawn(bonus, pos)<<newline>>""    addScore(1000)<<newline>>""    playSound({path = Extra1000.basePath .. \"score.ogg\", volume = 0.5})<<newline>>""end<<newline>>""<<newline>>""<<newline>>""<<newline>>"""}, 
{"resources/bonuses/extra_5000/data.json", "{<<newline>>""  \"type\" : \"bonus\",<<newline>>""  \"name\": \"5000 Points\",<<newline>>""  \"iconFile\" : \"icon.png\",<<newline>>""  \"scriptFile\" : \"extra_5000.lua\",<<newline>>""  \"scriptName\" : \"Extra5000\",<<newline>>""  \"spawnChance\" : 0.15<<newline>>""}"}, 
{"resources/bonuses/extra_5000/extra_5000.lua", "<<newline>>""function Extra5000.spawn(bonus, pos)<<newline>>""    addScore(5000)<<newline>>""    playSound({path = Extra5000.basePath .. \"score.ogg\", volume = 0.5})<<newline>>""end<<newline>>""<<newline>>""<<newline>>""<<newline>>"""}, 
{"resources/bonuses/faster_movement/data.json", "{<<newline>>""  \"type\" : \"bonus\",<<newline>>""  \"name\": \"Faster Movement\",<<newline>>""  \"iconFile\" : \"icon.png\",<<newline>>""  \"scriptFile\" : \"faster_movement.lua\",<<newline>>""  \"scriptName\" : \"FasterMovementBonus\"<<newline>>""}"}, 
{"resources/bonuses/faster_movement/faster_movement.lua", "FasterMovementBonus.buffId = getGlobalUniqueId()<<newline>>""<<newline>>""function FasterMovementBonus.spawn(bonus, pos)<<newline>>""    player.maxSpeed:addBuffWithId(FasterMovementBonus.buffId, 1.5)<<newline>>""    local buff = player.maxSpeed:getBuffInfo(FasterMovementBonus.buffId)<<newline>>""    if buff:getCurrentBuffAmount() >= 0.99 then<<newline>>""        buff:setBuffFadeInFadeOut(0.4, 0.5)<<newline>>""    else<<newline>>""        buff:setBuffFadeInFadeOut(0.0, 0.5)<<newline>>""    end<<newline>>""    buff:setBuffDuration(12.0 * player.data.bonusDurationMultiplier)<<newline>>""    buff:restart()<<newline>>""    playSound({path = FasterMovementBonus.basePath .. \"movement_bonus.ogg\"})<<newline>>""    <<newline>>""    addBuffIcon(\"FasterMovementBonus\", FasterMovementBonus.basePath .. \"icon.png\")<<newline>>""    <<newline>>""    bonus:setActive(true)<<newline>>""end<<newline>>""<<newline>>""function FasterMovementBonus.onTick(bonus)<<newline>>""    if player.maxSpeed:hasBuffInfo(FasterMovementBonus.buffId) == false then<<newline>>""        removeBuffIcon(\"FasterMovementBonus\")<<newline>>""        bonus:setActive(true)<<newline>>""    end<<newline>>""end<<newline>>"""}, 
{"resources/bonuses/homing/data.json", "{<<newline>>""  \"type\" : \"bonus\",<<newline>>""  \"name\": \"Homing Orb\",<<newline>>""  \"iconFile\" : \"icon.png\",<<newline>>""  \"scriptFile\" : \"homing.lua\",<<newline>>""  \"scriptName\" : \"HomingOrb\",<<newline>>""  \"spawnChance\" : 1.5<<newline>>""}"}, 
{"resources/bonuses/homing/homing.lua", "<<newline>>""HomingOrb.homingOrbId = getGlobalUniqueId()<<newline>>""HomingOrb.homingOrbIdInitial = getGlobalUniqueId()<<newline>>""<<newline>>""function HomingOrb.spawn(bonus, pos)<<newline>>""    local monster = getClosestMonsterWithIgnoreId(pos, {HomingOrb.homingOrbIdInitial})<<newline>>""    if monster ~= nil then<<newline>>""        monster:addIgnoreId(HomingOrb.homingOrbIdInitial)<<newline>>""        local bullet = addCustomBullet()<<newline>>""        bullet.damage = math.floor(math.random() * 30.0 + 30)<<newline>>""        bullet.position = Vec2.new(pos.x, pos.y)<<newline>>""        bullet.moveSpeed = 300.0<<newline>>""        bullet.moveAngle = 0<<newline>>""        bullet:setScript(HomingOrbBullet)<<newline>>""        bullet:addRenderableTextureWithSize(HomingOrb.basePath .. \"bullet.png\", Vec2.new(14.0, 14.0))<<newline>>""        bullet.data.lastHitIndex = -1<<newline>>""        bullet.radius = 15.0<<newline>>""        bullet.hasCollision = false<<newline>>""        bullet.lifeTime = 10.0<<newline>>""        <<newline>>""        bullet.moveAngle = (monster.position - pos):getAngle()<<newline>>""        bullet.penetrateCount = math.floor(6 * player.data.bonusDurationMultiplier)<<newline>>""        bullet.damage = math.floor(math.random() * 70 + 60)<<newline>>""        bullet.data.monster = monster<<newline>>""        local particle = bullet:addTrailParticle(\"PlasmaTrailParticle\", Vec2.new(0.0, 0.0), 20.0, { doNotShare = true })<<newline>>""        particle.args.color = Vec3.new(0.8, 0.7, 0.1)<<newline>>""        particle.args.initialScale = 10.0<<newline>>""        particle.args.initialAlpha = 0.4<<newline>>""        particle.args.scaleSpeed = -20<<newline>>""        particle:setTexture(HomingOrb.basePath .. \"particle.png\")<<newline>>""        <<newline>>""        playSound({path = HomingOrb.basePath .. \"plasma.ogg\"})<<newline>>""        <<newline>>""        return bullet<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""HomingOrbBullet = {}<<newline>>""<<newline>>""function HomingOrbBullet.onTick(bullet)<<newline>>""    if bullet.data.monster ~= nil then<<newline>>""        local toMonster = (bullet.data.monster.position - bullet.position)<<newline>>""        local m = 1.0 - clamp(toMonster:length() / 60)<<newline>>""        bullet.moveAngle = approachAngle(bullet.moveAngle, toMonster:getAngle(), (10 + 90 * m) * dt)<<newline>>""        if bullet.data.monster.isDead or bullet.data.monster:hasIgnoreId(HomingOrb.homingOrbId) then<<newline>>""            bullet.data.monster = getClosestMonsterWithIgnoreId(bullet.position, {HomingOrb.homingOrbIdInitial, HomingOrb.homingOrbId, bullet.id})<<newline>>""        end<<newline>>""    end<<newline>>""    return false<<newline>>""end<<newline>>""<<newline>>""function HomingOrbBullet.onHit(bullet, monster)<<newline>>""    playSound({path = HomingOrb.basePath .. \"plasma_hit.ogg\", position = bullet.position})<<newline>>""    if monster ~= nil then<<newline>>""        addExplosion(bullet.position, 60.0, 100.0, 20, 30, 0.1)<<newline>>""        monster:addIgnoreId(HomingOrb.homingOrbId)<<newline>>""        bullet.data.monster = getClosestMonsterWithIgnoreId(bullet.position, {HomingOrb.homingOrbIdInitial, HomingOrb.homingOrbId, bullet.id, monster.id})<<newline>>""    else<<newline>>""        bullet.data.monster = getClosestMonsterWithIgnoreId(bullet.position, {HomingOrb.homingOrbIdInitial, HomingOrb.homingOrbId, bullet.id})<<newline>>""    end<<newline>>""    bullet.damage = math.floor(math.random() * 70 + 60)<<newline>>""end<<newline>>""<<newline>>"""}, 
{"resources/bonuses/invincibility/data.json", "{<<newline>>""  \"type\" : \"bonus\",<<newline>>""  \"name\": \"Invincibility\",<<newline>>""  \"iconFile\" : \"icon.png\",<<newline>>""  \"scriptFile\" : \"invincibility.lua\",<<newline>>""  \"scriptName\" : \"Invincibility\", <<newline>>""  \"spawnChance\" : 1.4<<newline>>""}"}, 
{"resources/bonuses/invincibility/invincibility.lua", "function Invincibility.spawn(bonus, pos)<<newline>>""    playSound({path = Invincibility.basePath .. \"shield.ogg\", volume = 0.6})<<newline>>""    <<newline>>""    addBuffIcon(\"Invincibility\", Invincibility.basePath .. \"icon.png\")<<newline>>""    <<newline>>""    local duration = 12.0 * player.data.bonusDurationMultiplier<<newline>>""    Invincibility.data.timeToDie = time + duration<<newline>>""    if Invincibility.data.gameObject == nil then<<newline>>""        local gameObject = addGameObject(\"\")<<newline>>""        Invincibility.data.gameObject = gameObject<<newline>>""        gameObject:setLevel(RenderableLevel.player + 2)<<newline>>""        gameObject.data.renderable = gameObject:addTexture(Invincibility.basePath .. \"shield.png\", \"~/resources/default\")<<newline>>""        gameObject.data.renderable:setAlignment(RenderableAlignment.world)<<newline>>""        gameObject.data.renderable:setWorldMatrix(Mat3.fromScale(34.0, 34.0))<<newline>>""        gameObject.data.renderable:setColor(Vec4.fromColor(0x4488AAFF))<<newline>>""        Invincibility.onTick(bonus)<<newline>>""    end<<newline>>""    bonus:setActive(true)<<newline>>""end<<newline>>""<<newline>>""function Invincibility.onTick(bonus)<<newline>>""    local data = Invincibility.data<<newline>>""    local gameObject = data.gameObject<<newline>>""    data.gameObject:setPosition(player.position)<<newline>>""    <<newline>>""        <<newline>>""    local remaining = data.timeToDie - time<<newline>>""    if remaining < 2.0 then<<newline>>""        local t = remaining * 4.0<<newline>>""        t = t - math.floor(t)<<newline>>""        if t < 0.5 then<<newline>>""            gameObject.data.renderable:setColor(Vec4.fromColor(0x2288AAFF))<<newline>>""        else<<newline>>""            gameObject.data.renderable:setColor(Vec4.fromColor(0x4488AAFF))<<newline>>""        end<<newline>>""    end<<newline>>""    <<newline>>""    if remaining < 0.0 then<<newline>>""        removeBuffIcon(\"Invincibility\")<<newline>>""        gameObject.toBeRemoved = true<<newline>>""        Invincibility.data.gameObject = nil<<newline>>""        bonus:setActive(false)<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""function Invincibility.onPlayerDamaged(bonus, damage, dir, params)<<newline>>""    if damage <= 0 then<<newline>>""        return damage<<newline>>""    end<<newline>>""    playSound({path = Invincibility.basePath .. \"shield_hit.ogg\", volume = 0.6})<<newline>>""    return -1<<newline>>""end"}, 
{"resources/bonuses/level_up/data.json", "{<<newline>>""  \"type\" : \"bonus\",<<newline>>""  \"name\": \"Level Up\",<<newline>>""  \"iconFile\" : \"icon.png\",<<newline>>""  \"scriptFile\" : \"level_up.lua\",<<newline>>""  \"scriptName\" : \"LevelUp\"<<newline>>""}"}, 
{"resources/bonuses/level_up/level_up.lua", "<<newline>>""function LevelUp.spawn(bonus, pos)<<newline>>""    player:gainExperience(math.floor(player.experienceForNextLevel))<<newline>>""    playSound({path = Experience.basePath .. \"bonus.ogg\"})<<newline>>""end<<newline>>""<<newline>>""function LevelUp.variableBonusChance()<<newline>>""    if missionData.levelUpBonusChance ~= nil then<<newline>>""        return missionData.levelUpBonusChance<<newline>>""    end<<newline>>""    return 0.0<<newline>>""end"}, 
{"resources/bonuses/medikit/data.json", "{<<newline>>""  \"type\" : \"bonus\",<<newline>>""  \"name\": \"Medi-Kit\",<<newline>>""  \"iconFile\" : \"icon.png\",<<newline>>""  \"scriptFile\" : \"medikit.lua\",<<newline>>""  \"scriptName\" : \"MediKit\"<<newline>>""}"}, 
{"resources/bonuses/medikit/medikit.lua", "<<newline>>""function MediKit.spawn(bonus, pos)<<newline>>""    player:doHeal(30)<<newline>>""    playSound({path = MediKit.basePath .. \"heal.ogg\", volume = 1.5})<<newline>>""end<<newline>>""<<newline>>""<<newline>>""<<newline>>"""}, 
{"resources/bonuses/quad_damage/data.json", "{<<newline>>""  \"type\" : \"bonus\",<<newline>>""  \"name\": \"Quad Damage\",<<newline>>""  \"iconFile\" : \"icon.png\",<<newline>>""  \"scriptFile\" : \"quad_damage.lua\",<<newline>>""  \"scriptName\" : \"QuadDamage\"<<newline>>""}"}, 
{"resources/bonuses/quad_damage/quad_damage.lua", "QuadDamage.buffId = getGlobalUniqueId()<<newline>>""<<newline>>""function QuadDamage.spawn(bonus, pos)<<newline>>""    local data = QuadDamage.data<<newline>>""<<newline>>""    local duration = 8.0 * player.data.bonusDurationMultiplier<<newline>>""    <<newline>>""    player.damageMultiplier:addBuffWithId(QuadDamage.buffId, 4.0)<<newline>>""    player.damageMultiplier:setBuffDuration(QuadDamage.buffId, duration)<<newline>>""    if bonus:isActive() == false then<<newline>>""        bonus:setActive(true)<<newline>>""        data.shaderStartTime = time<<newline>>""        data.postProcess = addPostProcess(\"resources/post_process/red_shift.ps\")<<newline>>""        data.postProcess:setShaderWeight(0.0)<<newline>>""    end<<newline>>""    data.time = time<<newline>>""    playSound({path = QuadDamage.basePath .. \"metal_riff.ogg\", volume = 0.5})<<newline>>""    <<newline>>""    addBuffIcon(\"QuadDamage\", QuadDamage.basePath .. \"icon.png\")<<newline>>""end<<newline>>""<<newline>>""function QuadDamage.onTick(bonus)<<newline>>""    local data = QuadDamage.data<<newline>>""    <<newline>>""    if player.damageMultiplier:hasBuffInfo(QuadDamage.buffId) == false then<<newline>>""        removeBuffIcon(\"QuadDamage\")<<newline>>""        bonus:setActive(false)<<newline>>""        <<newline>>""        removePostProcess(data.postProcess)<<newline>>""        data.postProcess = nil<<newline>>""        return<<newline>>""    end<<newline>>""    <<newline>>""    local t = time - data.shaderStartTime<<newline>>""    local a = 1.0<<newline>>""    if t < 0.3 then<<newline>>""        a = t / 0.3<<newline>>""    end<<newline>>""    <<newline>>""    local remaining = player.damageMultiplier:getBuffRemainingTime(QuadDamage.buffId)<<newline>>""    if remaining < 1.0 then<<newline>>""        a = remaining<<newline>>""    end<<newline>>""    QuadDamage.data.postProcess:setShaderWeight(a)<<newline>>""<<newline>>""end<<newline>>"""}, 
{"resources/bonuses/reflex_boost/data.json", "{<<newline>>""  \"type\" : \"bonus\",<<newline>>""  \"name\": \"Reflex Boost\",<<newline>>""  \"iconFile\" : \"icon.png\",<<newline>>""  \"scriptFile\" : \"reflex_boost.lua\",<<newline>>""  \"scriptName\" : \"ReflexBoost\"<<newline>>""}"}, 
{"resources/bonuses/reflex_boost/reflex_boost.lua", "ReflexBoost.buffId = getGlobalUniqueId()<<newline>>""<<newline>>""function ReflexBoost.spawn(bonus, pos)<<newline>>""    local data = ReflexBoost.data<<newline>>""<<newline>>""    local duration = 5.0 * player.data.bonusDurationMultiplier<<newline>>""    <<newline>>""    local gameSpeed = getGameSpeedMultiplier()<<newline>>""    gameSpeed:addBuffWithId(ReflexBoost.buffId, 0.5)<<newline>>""    gameSpeed:setBuffDuration(ReflexBoost.buffId, duration)<<newline>>""    gameSpeed:setBuffFadeInFadeOut(ReflexBoost.buffId, 0.25, 0.25)<<newline>>""    <<newline>>""    local b = player.accelerationMultiplier<<newline>>""    b:addBuffWithId(ReflexBoost.buffId, 2.0)<<newline>>""    b:setBuffDuration(ReflexBoost.buffId, duration)<<newline>>""    b:setBuffFadeInFadeOut(ReflexBoost.buffId, 0.25, 0.25)<<newline>>""    <<newline>>""    if bonus:isActive() == false then<<newline>>""        bonus:setActive(true)<<newline>>""        data.shaderStartTime = time<<newline>>""        data.postProcess = addPostProcess(\"resources/post_process/sepia.ps\")<<newline>>""        data.postProcess:setShaderWeight(0.0)<<newline>>""    end<<newline>>""    data.time = time<<newline>>""    playSound({path = ReflexBoost.basePath .. \"clock.ogg\", volume = 2.6, uiSound = true })<<newline>>""    <<newline>>""    addBuffIcon(\"ReflexBoost\", ReflexBoost.basePath .. \"icon.png\")<<newline>>""end<<newline>>""<<newline>>""<<newline>>""function ReflexBoost.onTick(bonus)<<newline>>""    local data = ReflexBoost.data<<newline>>""    <<newline>>""    local gameSpeed = getGameSpeedMultiplier()<<newline>>""    if gameSpeed:hasBuffInfo(ReflexBoost.buffId) == false then<<newline>>""        removeBuffIcon(\"ReflexBoost\")<<newline>>""        bonus:setActive(false)<<newline>>""        <<newline>>""        removePostProcess(data.postProcess)<<newline>>""        data.postProcess = nil<<newline>>""        return<<newline>>""    end<<newline>>""    local t = time - data.shaderStartTime<<newline>>""    local a = 1.0<<newline>>""    if t < 0.25 then<<newline>>""        a = t * 4.0<<newline>>""    end<<newline>>""    <<newline>>""    local remaining = gameSpeed:getBuffRemainingTime(ReflexBoost.buffId)<<newline>>""    if remaining < 0.25 then<<newline>>""        a = remaining * 4.0<<newline>>""    end<<newline>>""    ReflexBoost.data.postProcess:setShaderWeight(a * 0.60)<<newline>>""end"}, 
{"resources/bonuses/slow_monsters/data.json", "{<<newline>>""  \"type\" : \"bonus\",<<newline>>""  \"name\": \"Slowdown Monsters\",<<newline>>""  \"iconFile\" : \"icon.png\",<<newline>>""  \"scriptFile\" : \"slow_monsters.lua\",<<newline>>""  \"scriptName\" : \"SlowMonsters\", <<newline>>""  \"spawnChance\" : 1.2<<newline>>""}"}, 
{"resources/bonuses/slow_monsters/slow_monsters.lua", "SlowMonsters.buffId = getGlobalUniqueId()<<newline>>""<<newline>>""function SlowMonsters.spawn(bonus, pos)<<newline>>""    player.globalMonsterSpeedMultiplier:addBuffWithId(SlowMonsters.buffId, 0.4)<<newline>>""    local buff = player.globalMonsterSpeedMultiplier:getBuffInfo(SlowMonsters.buffId)<<newline>>""    if buff:getCurrentBuffAmount() >= 0.99 then<<newline>>""        buff:setBuffFadeInFadeOut(0.4, 0.5)<<newline>>""    else<<newline>>""        buff:setBuffFadeInFadeOut(0.0, 0.5)<<newline>>""    end<<newline>>""    buff:setBuffDuration(8.0 * player.data.bonusDurationMultiplier)<<newline>>""    buff:restart()<<newline>>""    playSound({path = SlowMonsters.basePath .. \"slow.ogg\", volume = 0.6})<<newline>>""<<newline>>""    addBuffIcon(\"SlowMonsters\", SlowMonsters.basePath .. \"icon.png\")<<newline>>""    <<newline>>""    bonus:setActive(true)<<newline>>""end<<newline>>""<<newline>>""function SlowMonsters.onTick(bonus)<<newline>>""    if player.globalMonsterSpeedMultiplier:hasBuffInfo(SlowMonsters.buffId) == false then<<newline>>""        removeBuffIcon(\"SlowMonsters\")<<newline>>""        bonus:setActive(false)<<newline>>""    end<<newline>>""end<<newline>>"""}, 
{"resources/colliders/collider_data.json", "{<<newline>>""    \"type\" : \"json_list\",<<newline>>""    \"elements\" : [<<newline>>""        {<<newline>>""            \"type\" : \"game_object_template\",<<newline>>""            \"name\" : \"house1\",<<newline>>""            \"chance\" : 0.7,<<newline>>""            <<newline>>""            \"scriptFile\" : \"collider.lua\",<<newline>>""            \"scriptName\" : \"Collider\",<<newline>>""            <<newline>>""            \"image\" : \"house_1.png\",<<newline>>""            \"size\" : [120.0, 114.0],<<newline>>""            <<newline>>""            \"colliders\" : [<<newline>>""                {<<newline>>""                    \"type\" : \"quad\",<<newline>>""                    \"shift\" : [0.0, 15.0],<<newline>>""                    \"size\" : [85.0, 67.0]<<newline>>""                },<<newline>>""                {<<newline>>""                    \"type\" : \"quad\",<<newline>>""                    \"shift\" : [10.0, -45.0],<<newline>>""                    \"size\" : [35.0, 45.0]<<newline>>""                }<<newline>>""            ]<<newline>>""        }<<newline>>""        ,{<<newline>>""            \"type\" : \"game_object_template\",<<newline>>""            \"name\" : \"house2\",<<newline>>""            \"chance\" : 0.7,<<newline>>""            \"scriptFile\" : \"collider.lua\",<<newline>>""            \"scriptName\" : \"Collider\",<<newline>>""            <<newline>>""            \"image\" : \"house_1b.png\",<<newline>>""            \"size\" : [120.0, 114.0],<<newline>>""            <<newline>>""            \"colliders\" : [<<newline>>""                {<<newline>>""                    \"type\" : \"quad\",<<newline>>""                    \"shift\" : [0.0, 15.0],<<newline>>""                    \"size\" : [85.0, 67.0]<<newline>>""                },<<newline>>""                {<<newline>>""                    \"type\" : \"quad\",<<newline>>""                    \"shift\" : [42.0, -45.0],<<newline>>""                    \"size\" : [35.0, 45.0]<<newline>>""                }<<newline>>""            ]<<newline>>""        }<<newline>>""        ,{<<newline>>""            \"type\" : \"game_object_template\",<<newline>>""            \"name\" : \"house3\",<<newline>>""            \"chance\" : 0.7,<<newline>>""            <<newline>>""            \"scriptFile\" : \"collider.lua\",<<newline>>""            \"scriptName\" : \"Collider\",<<newline>>""            <<newline>>""            \"image\" : \"house_1c.png\",<<newline>>""            \"size\" : [120.0, 114.0],<<newline>>""            <<newline>>""            \"colliders\" : [<<newline>>""                {<<newline>>""                    \"type\" : \"quad\",<<newline>>""                    \"shift\" : [0.0, 15.0],<<newline>>""                    \"size\" : [85.0, 67.0]<<newline>>""                },<<newline>>""                {<<newline>>""                    \"type\" : \"quad\",<<newline>>""                    \"shift\" : [10.0, -45.0],<<newline>>""                    \"size\" : [35.0, 35.0]<<newline>>""                }<<newline>>""            ]<<newline>>""        }<<newline>>""        ,{<<newline>>""            \"type\" : \"game_object_template\",<<newline>>""            \"name\" : \"house4\",<<newline>>""            \"chance\" : 0.7,<<newline>>""            <<newline>>""            \"scriptFile\" : \"collider.lua\",<<newline>>""            \"scriptName\" : \"Collider\",<<newline>>""            <<newline>>""            \"image\" : \"house_2.png\",<<newline>>""            \"size\" : [126.0, 130.0],<<newline>>""            <<newline>>""            \"colliders\" : [<<newline>>""                {<<newline>>""                    \"type\" : \"quad\",<<newline>>""                    \"shift\" : [-3.0, 27.0],<<newline>>""                    \"size\" : [150.0, 88.0]<<newline>>""                },<<newline>>""                {<<newline>>""                    \"type\" : \"quad\",<<newline>>""                    \"shift\" : [62.0, -48.0],<<newline>>""                    \"size\" : [40.0, 65.0]<<newline>>""                }<<newline>>""            ]<<newline>>""        }<<newline>>""        ,{<<newline>>""            \"type\" : \"game_object_template\",<<newline>>""            \"name\" : \"house5\",<<newline>>""            \"chance\" : 0.7,<<newline>>""            <<newline>>""            \"scriptFile\" : \"collider.lua\",<<newline>>""            \"scriptName\" : \"Collider\",<<newline>>""            <<newline>>""            \"image\" : \"house_2b.png\",<<newline>>""            \"size\" : [126.0, 130.0],<<newline>>""            <<newline>>""            \"colliders\" : [<<newline>>""                {<<newline>>""                    \"type\" : \"quad\",<<newline>>""                    \"shift\" : [-3.0, 27.0],<<newline>>""                    \"size\" : [150.0, 88.0]<<newline>>""                },<<newline>>""                {<<newline>>""                    \"type\" : \"quad\",<<newline>>""                    \"shift\" : [65.0, -50.0],<<newline>>""                    \"size\" : [40.0, 65.0]<<newline>>""                }<<newline>>""            ]<<newline>>""        }<<newline>>""        <<newline>>""        ,{<<newline>>""            \"type\" : \"game_object_template\",<<newline>>""            \"name\" : \"ruin1\",<<newline>>""            <<newline>>""            \"scriptFile\" : \"collider.lua\",<<newline>>""            \"scriptName\" : \"Collider\",<<newline>>""            <<newline>>""            \"image\" : \"ruin_1.png\",<<newline>>""            \"size\" : [94.0, 76.0],<<newline>>""            <<newline>>""            \"colliders\" : [<<newline>>""                {<<newline>>""                    \"type\" : \"capsule\",<<newline>>""                    \"pos1\" : [-40.0, 2.0],<<newline>>""                    \"pos2\" : [40.0, 2.0],<<newline>>""                    \"radius\" : 28.0<<newline>>""                }<<newline>>""            ]<<newline>>""        }<<newline>>""        ,{<<newline>>""            \"type\" : \"game_object_template\",<<newline>>""            \"name\" : \"ruin2\",<<newline>>""            <<newline>>""            \"scriptFile\" : \"collider.lua\",<<newline>>""            \"scriptName\" : \"Collider\",<<newline>>""            <<newline>>""            \"image\" : \"ruin_2.png\",<<newline>>""            \"size\" : [142.0, 100.0],<<newline>>""            <<newline>>""            \"colliders\" : [<<newline>>""                {<<newline>>""                    \"type\" : \"quad\",<<newline>>""                    \"shift\" : [5.0, -13.0],<<newline>>""                    \"size\" : [105.0, 65.0]<<newline>>""                }<<newline>>""            ]<<newline>>""        }<<newline>>""        <<newline>>""        ,{<<newline>>""            \"type\" : \"game_object_template\",<<newline>>""            \"name\" : \"ruin3\",<<newline>>""            <<newline>>""            \"scriptFile\" : \"collider.lua\",<<newline>>""            \"scriptName\" : \"Collider\",<<newline>>""            <<newline>>""            \"image\" : \"ruin_3.png\",<<newline>>""            \"size\" : [136.0, 92.0],<<newline>>""            <<newline>>""            \"colliders\" : [<<newline>>""                {<<newline>>""                    \"type\" : \"quad\",<<newline>>""                    \"shift\" : [14.0, -8.0],<<newline>>""                    \"size\" : [93.0, 55.0]<<newline>>""                }<<newline>>""            ]<<newline>>""        }<<newline>>""        <<newline>>""        ,{<<newline>>""            \"type\" : \"game_object_template\",<<newline>>""            \"name\" : \"ruin4\",<<newline>>""            <<newline>>""            \"scriptFile\" : \"collider.lua\",<<newline>>""            \"scriptName\" : \"Collider\",<<newline>>""            <<newline>>""            \"image\" : \"ruin_4.png\",<<newline>>""            \"size\" : [66.0, 88.0],<<newline>>""            <<newline>>""            \"colliders\" : [<<newline>>""                {<<newline>>""                    \"type\" : \"quad\",<<newline>>""                    \"shift\" : [10.0, -5.0],<<newline>>""                    \"size\" : [40.0, 65.0]<<newline>>""                }<<newline>>""            ]<<newline>>""        }<<newline>>""        <<newline>>""        ,{<<newline>>""            \"type\" : \"game_object_template\",<<newline>>""            \"name\" : \"ruin5\",<<newline>>""            <<newline>>""            \"scriptFile\" : \"collider.lua\",<<newline>>""            \"scriptName\" : \"Collider\",<<newline>>""            <<newline>>""            \"image\" : \"ruin_5.png\",<<newline>>""            \"size\" : [102.0, 74.0],<<newline>>""            <<newline>>""            \"colliders\" : [<<newline>>""                {<<newline>>""                    \"type\" : \"quad\",<<newline>>""                    \"shift\" : [1.0, 3.0],<<newline>>""                    \"size\" : [77.0, 50.0]<<newline>>""                }<<newline>>""            ]<<newline>>""        }<<newline>>""        <<newline>>""        ,{<<newline>>""            \"type\" : \"game_object_template\",<<newline>>""            \"name\" : \"ruin6\",<<newline>>""            <<newline>>""            \"scriptFile\" : \"collider.lua\",<<newline>>""            \"scriptName\" : \"Collider\",<<newline>>""            <<newline>>""            \"image\" : \"ruin_6.png\",<<newline>>""            \"size\" : [87.0, 114.0],<<newline>>""            <<newline>>""            \"colliders\" : [<<newline>>""                {<<newline>>""                    \"type\" : \"quad\",<<newline>>""                    \"shift\" : [0.0, 30.0],<<newline>>""                    \"size\" : [45.0, 40.0]<<newline>>""                },<<newline>>""                {<<newline>>""                    \"type\" : \"quad\",<<newline>>""                    \"shift\" : [20.0, -30.0],<<newline>>""                    \"size\" : [20.0, 40.0]<<newline>>""                }<<newline>>""            ]<<newline>>""        }<<newline>>""        <<newline>>""        ,{<<newline>>""            \"type\" : \"game_object_template\",<<newline>>""            \"name\" : \"bunker1\",<<newline>>""            <<newline>>""            \"scriptFile\" : \"collider.lua\",<<newline>>""            \"scriptName\" : \"Collider\",<<newline>>""            <<newline>>""            \"images\" : [\"bunker1.png\", \"bunker2.png\"],<<newline>>""            \"size\" : [92.0, 92.0],<<newline>>""            <<newline>>""            \"colliders\" : [<<newline>>""                {<<newline>>""                    \"type\" : \"quad\",<<newline>>""                    \"shift\" : [0.0, 0.0],<<newline>>""                    \"size\" : [40.0, 40.0],<<newline>>""                    \"radius\" : 10.0<<newline>>""                }<<newline>>""            ]<<newline>>""        }<<newline>>""        <<newline>>""        ,{<<newline>>""            \"type\" : \"game_object_template\",<<newline>>""            \"name\" : \"bunker2\",<<newline>>""            <<newline>>""            \"scriptFile\" : \"collider.lua\",<<newline>>""            \"scriptName\" : \"Collider\",<<newline>>""            <<newline>>""            \"images\" : [\"bunker3.png\", \"bunker4.png\", \"bunker5.png\", \"bunker6.png\", \"bunker7.png\"],<<newline>>""            \"size\" : [90.0, 160.0],<<newline>>""            <<newline>>""            \"colliders\" : [<<newline>>""                {<<newline>>""                    \"type\" : \"quad\",<<newline>>""                    \"shift\" : [0.0, 0.0],<<newline>>""                    \"size\" : [50.0, 115.0],<<newline>>""                    \"radius\" : 10.0<<newline>>""                }<<newline>>""            ]<<newline>>""        }<<newline>>""        ,{<<newline>>""            \"type\" : \"game_object_template\",<<newline>>""            \"name\" : \"bunker3\",<<newline>>""            <<newline>>""            \"scriptFile\" : \"collider.lua\",<<newline>>""            \"scriptName\" : \"Collider\",<<newline>>""            <<newline>>""            \"images\" : [\"bunker8.png\", \"bunker9.png\", \"bunker10.png\", \"bunker11.png\"],<<newline>>""            \"size\" : [100.0, 230.0],<<newline>>""            <<newline>>""            \"colliders\" : [<<newline>>""                {<<newline>>""                    \"type\" : \"capsule\",<<newline>>""                    \"pos1\" : [0.0, -130.0],<<newline>>""                    \"pos2\" : [0.0, 130.0],<<newline>>""                    \"radius\" : 50.0<<newline>>""                }<<newline>>""            ]<<newline>>""        }<<newline>>""        <<newline>>""        ,{<<newline>>""            \"type\" : \"game_object_template\",<<newline>>""            \"name\" : \"bunker4\",<<newline>>""            <<newline>>""            \"scriptFile\" : \"collider.lua\",<<newline>>""            \"scriptName\" : \"Collider\",<<newline>>""            <<newline>>""            \"images\" : [<<newline>>""                \"bunker12.png\",<<newline>>""                \"bunker13.png\",<<newline>>""                \"bunker14.png\",<<newline>>""                \"bunker15.png\",<<newline>>""                \"bunker16.png\",<<newline>>""                \"bunker17.png\",<<newline>>""                \"bunker18.png\",<<newline>>""                \"bunker19.png\",<<newline>>""                \"bunker20.png\",<<newline>>""                \"bunker21.png\",<<newline>>""                \"bunker22.png\",<<newline>>""                \"bunker23.png\",<<newline>>""                \"bunker24.png\",<<newline>>""                \"bunker25.png\"<<newline>>""            ],<<newline>>""            \"size\" : [100.0, 100.0],<<newline>>""            <<newline>>""            \"colliders\" : [<<newline>>""                {<<newline>>""                    \"type\" : \"circle\",<<newline>>""                    \"radius\" : 50.0<<newline>>""                }<<newline>>""            ]<<newline>>""        }<<newline>>""    ]<<newline>>""}"}, 
{"resources/colliders/collider.lua", "function Collider.onLoad(template)<<newline>>""    if Colliders == nil then<<newline>>""        Colliders = {}<<newline>>""    end<<newline>>""    Colliders[template.name] = template<<newline>>""end<<newline>>""<<newline>>""function Collider.init(gameobject, params, template)<<newline>>""    local jsonTable = template.jsonTable<<newline>>""    local pos <<newline>>""    <<newline>>""    local distanceToMid = 200.0<<newline>>""    if params.distanceToMid ~= nil then<<newline>>""        distanceToMid = params.distanceToMid<<newline>>""    end<<newline>>""    local maxTry = 10<<newline>>""    while maxTry > 0 do<<newline>>""        pos = getFreePosition(150.0)<<newline>>""        if pos:length() > distanceToMid then<<newline>>""            break<<newline>>""        end<<newline>>""        maxTry = maxTry - 1<<newline>>""    end<<newline>>""    gameobject:setPosition(pos)<<newline>>""    <<newline>>""    local s = 0.3 + math.random() * 0.3<<newline>>""    gameobject:setScale(Vec2.new(s, s))<<newline>>""    gameobject:setRotation(math.random() * math.pi * 2.0)<<newline>>""    local json = template.jsonTable<<newline>>""    <<newline>>""    if json.image ~= nil then<<newline>>""        local texture = gameobject:addTexture(template.basePath .. json.image)<<newline>>""        texture:setWorldMatrix(Mat3.fromScale(json.size.x, json.size.y))<<newline>>""        texture:setColor(Vec4.fromColor(0xFF999999))<<newline>>""    elseif json.images ~= nil then<<newline>>""        local image = json.images[math.random(json.images.size) - 1]<<newline>>""        local texture = gameobject:addTexture(template.basePath .. image)<<newline>>""        texture:setWorldMatrix(Mat3.fromScale(json.size.x, json.size.y))<<newline>>""        texture:setColor(Vec4.fromColor(0xFF999999))<<newline>>""    end<<newline>>""    <<newline>>""    local colliders = json.colliders<<newline>>""    for i=0,colliders.size-1 do<<newline>>""        if colliders[i].type == \"quad\" then<<newline>>""            local shift = Vec2.new(0.0, 0.0)<<newline>>""            if colliders[i].shift ~= nil then<<newline>>""                shift = colliders[i].shift<<newline>>""            end<<newline>>""            local size = json.size<<newline>>""            if colliders[i].size ~= nil then<<newline>>""                size = colliders[i].size<<newline>>""            end<<newline>>""            local rotation = 0.0<<newline>>""            if colliders[i].rotation ~= nil then<<newline>>""                rotation = colliders[i].rotation<<newline>>""            end<<newline>>""            local radius = 0.0<<newline>>""            if colliders[i].radius ~= nil then<<newline>>""                radius = colliders[i].radius<<newline>>""            end<<newline>>""            gameobject:addRectCollider(shift, size, rotation, radius)<<newline>>""        elseif colliders[i].type == \"capsule\" then<<newline>>""            gameobject:addCapsuleCollider(colliders[i].pos1, colliders[i].pos2, colliders[i].radius)<<newline>>""        elseif colliders[i].type == \"circle\" then<<newline>>""            local shift = Vec2.new(0.0, 0.0)<<newline>>""            if colliders[i].shift ~= nil then<<newline>>""                shift = colliders[i].shift<<newline>>""            end<<newline>>""            gameobject:addCircleCollider(shift, colliders[i].radius)<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""<<newline>>"""}, 
{"resources/guns/bumerang_gun/data.json", "{<<newline>>""  \"type\" : \"gun\",<<newline>>""  \"name\": \"Bumerang\",<<newline>>""  \"icon\" : \"bullet.png\",<<newline>>""  \"bulletTexture\" : \"bullet.png\",<<newline>>""  \"bulletSize\" : [10.0, 10.0],<<newline>>""  \"bulletMeshShift\" : [0.0, 0.0],<<newline>>""  \"bulletRadius\" : 10.0,<<newline>>""  \"bulletSpeed\" : 0.0,<<newline>>""  \"bulletDamage\" : [65, 150],<<newline>>""  <<newline>>""  \"maxAmmo\" : 8,<<newline>>""  \"reloadTime\" : 2.0,<<newline>>""  <<newline>>""  \"showShootAnimation\" : false,<<newline>>""  <<newline>>""  \"firingSound\" : {<<newline>>""    \"path\" : \"throw.ogg\",<<newline>>""    \"volume\" : 0.70<<newline>>""  },<<newline>>""  <<newline>>""  \"scriptFile\" : \"bumerang_gun.lua\",<<newline>>""  \"scriptName\" : \"BumerangGun\"<<newline>>""}"}, 
{"resources/guns/bumerang_gun/bumerang_gun.lua", "<<newline>>""function BumerangGun.init(gun)<<newline>>""    gun.spreadAngle = 0.0<<newline>>""    gun.crosshairDistance = 750.0<<newline>>""    ShootTimer.initGun(gun, 0.8)<<newline>>""    gun.data.maxSpread = 0.25<<newline>>""    gun.data.spreadDecreaseStartTime = 0.35<<newline>>""    gun.data.spreadDecreaseSpeed = 0.80<<newline>>""    gun.data.spreadIncreasePerShoot = 0.03<<newline>>""    <<newline>>""    gun.data.lastShootTimeForDouble = time<<newline>>""end<<newline>>""<<newline>>""<<newline>>""function BumerangGun.onTick(gun)<<newline>>""    if gun.isTriggered and gun:hasAmmo() then<<newline>>""        local gunReady = ShootTimer.checkGun(gun)<<newline>>""        if time - gun.data.lastShootTimeForDouble > 0.15 or gunReady then<<newline>>""            if gunReady then<<newline>>""                gun.data.lastShootTimeForDouble = time<<newline>>""            else<<newline>>""                gun.data.lastShootTimeForDouble = time + 100<<newline>>""            end<<newline>>""            gun:consumeAmmo()<<newline>>""            local bullet = gun:addBullet()<<newline>>""            <<newline>>""            local distance = math.max(250, player.crosshairDistance)<<newline>>""            distance = math.min(550, distance)<<newline>>""            bullet.data.movePos = player.position + player.aimDir * distance<<newline>>""            bullet.data.startTime = time<<newline>>""            bullet.data.startPos = bullet.position:copy()<<newline>>""            bullet.data.startAngle = player.aimAngle<<newline>>""            bullet.data.sideDir = player.aimDir * 100.0<<newline>>""            bullet.data.sideDir:rotateBy(math.pi * 0.5)<<newline>>""            bullet.meshRotation = 0.0<<newline>>""            bullet.data.speedMult = -clamp(distance / 250) * 0.3 + 1.2<<newline>>""            bullet.penetrateCount = 2<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""function BumerangGun.onBulletTick(gun, bullet)<<newline>>""    local movePos = bullet.data.movePos<<newline>>""    local dur = 1.0 * bullet.data.speedMult<<newline>>""    local timeDiff = (time - bullet.data.startTime) * dur<<newline>>""    <<newline>>""    if bullet.data.returns then<<newline>>""        movePos = lerp(movePos, player.position, timeDiff)<<newline>>""        bullet.data.startAngle = (player.position - bullet.data.startPos) : getAngle()<<newline>>""    end<<newline>>""<<newline>>""    <<newline>>""    local center = (bullet.data.startPos + movePos) * 0.5<<newline>>""    local d = bullet.data.startPos:distance(movePos) * 0.5<<newline>>""    local angle = (-0.5 - timeDiff) * math.pi<<newline>>""    local shift = Vec2:new(math.sin(angle) * d, math.cos(angle) * d * 0.3)<<newline>>""    shift:rotateBy(-bullet.data.startAngle)<<newline>>""    bullet:setPosition(center + shift)<<newline>>""<<newline>>""    bullet.meshRotation = bullet.meshRotation + dt * 10<<newline>>""    if timeDiff > 1.0 then<<newline>>""        if  bullet.data.returns == nil then<<newline>>""            bullet.data.startPos = bullet.data.movePos<<newline>>""            bullet.data.movePos = player.position<<newline>>""            bullet.data.startTime = time<<newline>>""            bullet.data.startAngle = (player.position - bullet.data.startPos) : getAngle()<<newline>>""            bullet.data.returns = true<<newline>>""        else<<newline>>""            bullet:removeSelf()<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>"""}, 
{"resources/guns/flamethrower/data.json", "{<<newline>>""  \"type\" : \"gun\",<<newline>>""  \"name\": \"Flamethrower\",<<newline>>""  \"icon\" : \"icon.png\",<<newline>>""  <<newline>>""  \"bulletRadius\" : 10.0,<<newline>>""  \"bulletSpeed\" : 300.0,<<newline>>""  \"bulletDamage\" : [10, 16],<<newline>>""  \"hideSpread\" : true,<<newline>>""  <<newline>>""  \"maxAmmo\" : 100,<<newline>>""  \"reloadTime\" : 2.4,<<newline>>""  \"bulletLifeTime\" : 0.60,<<newline>>""  <<newline>>""  \"firingSoundContinuous\" : true,<<newline>>""  \"firingSound\" : \"flame.ogg\",<<newline>>""  \"firingSoundFadein\" : 0.1,<<newline>>""  \"firingSoundFadeout\" : 0.6,<<newline>>""  <<newline>>""  \"scriptFile\" : \"flamethrower.lua\",<<newline>>""  \"scriptName\" : \"Flamethrower\"<<newline>>""}"}, 
{"resources/guns/flamethrower/flamethrower.lua", "FlamethrowerObject = {}<<newline>>""<<newline>>""function Flamethrower.init(gun)<<newline>>""    ShootTimer.initGun(gun, 0.05)<<newline>>""    gun.data.gameObject = addGameObject(\"FlamethrowerObject\")<<newline>>""    gun.data.particle = gun.data.gameObject:addParticle(\"FlameParticle\", {})<<newline>>""    gun.data.particleTime = 0.0<<newline>>""    <<newline>>""    gun.data.checkAchievement = true<<newline>>""    gun.data.achievementProcess = 0<<newline>>""    <<newline>>""end<<newline>>""<<newline>>""function Flamethrower.onTick(gun)<<newline>>""    local data = gun.data<<newline>>""    if gun.isTriggered and gun:hasAmmo() then<<newline>>""        if ShootTimer.checkGun(gun) then<<newline>>""            gun:consumeAmmo()<<newline>>""            local bullet = gun:addBullet()<<newline>>""            local playerSpeed = player.moveVelocity<<newline>>""            local bulletSpeed = Vec2.fromAngle(bullet.moveAngle) * bullet.moveSpeed<<newline>>""            local totalSpeed = playerSpeed + bulletSpeed<<newline>>""            bullet.moveSpeed = totalSpeed:length()<<newline>>""            bullet.moveAngle = totalSpeed:getAngle()<<newline>>""            bullet.onDamageArgs.noSlowdown = true<<newline>>""            bullet.penetrateCount = -1<<newline>>""        end<<newline>>""        <<newline>>""        local bulletSpeed =  gun.bulletSpeed * player.bulletSpeedMultiplier:getBuffedValue()<<newline>>""        local totalSpeed = player.moveVelocity + player.aimDir * bulletSpeed<<newline>>""        local speed = totalSpeed:normalize()<<newline>>""        local range = speed * gun.bulletLifeTime<<newline>>""        <<newline>>""        local collision = getCollisionForRay(player.gunPos - totalSpeed * 20.0, totalSpeed * (range + 20.0), 0.0)<<newline>>""        collision = collision - 40.0<<newline>>""        <<newline>>""        data.particleTime = data.particleTime - dt<<newline>>""        <<newline>>""        while data.particleTime < 0.0 do<<newline>>""            data.particleTime = data.particleTime + 0.002<<newline>>""            data.particle:addParticle(player.gunPos, {moveSpeed = (player.aimDir * bulletSpeed ) + player.moveVelocity, lifeTime = collision * 0.6/ range})<<newline>>""        end<<newline>>""        gun.playFiringSound = true<<newline>>""    else<<newline>>""        gun.playFiringSound = false<<newline>>""    end<<newline>>""    <<newline>>""    if data.checkAchievement then<<newline>>""        if hasAchievement( \"ACH_FLAME_THROWER\" ) or player.isDead or missionData.isSurvival ~= true then<<newline>>""            data.checkAchievement = false<<newline>>""            return<<newline>>""        end<<newline>>""        if data.achievementProcess >= 20 then<<newline>>""            addAchievement( \"ACH_FLAME_THROWER\" )<<newline>>""            data.checkAchievement = false<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""function Flamethrower.onBulletHit(gun, bullet, monster)<<newline>>""    local data = gun.data<<newline>>""    if monster ~= nil then<<newline>>""        if monster.data.flamethrowerObject == nil then<<newline>>""            monster.data.flamethrowerObject = addGameObject(\"BurnMonsterObject\")<<newline>>""            monster.data.flamethrowerObject.data.monster = monster<<newline>>""            monster.data.flamethrowerObject.data.damageMin = 2<<newline>>""            monster.data.flamethrowerObject.data.damageVar = 3<<newline>>""        end<<newline>>""        monster.data.flamethrowerObject.data.count = 4<<newline>>""        <<newline>>""        if data.checkAchievement and monster.data.flamethrowerAchievementGun == nil then<<newline>>""            monster.data.flamethrowerAchievementGun = gun<<newline>>""            addCustomOnTick(monster, function (monster)<<newline>>""                local gun = monster.data.flamethrowerAchievementGun<<newline>>""                if monster.data.flamethrowerAchievementSet == true then<<newline>>""                    if monster.data.flamethrowerObject == nil then<<newline>>""                        monster.data.flamethrowerAchievementSet = false<<newline>>""                        gun.data.achievementProcess = gun.data.achievementProcess - 1<<newline>>""                    end<<newline>>""                else<<newline>>""                    if monster.data.flamethrowerObject ~= nil then<<newline>>""                        monster.data.flamethrowerAchievementSet = true<<newline>>""                        gun.data.achievementProcess = gun.data.achievementProcess + 1<<newline>>""                    end<<newline>>""                end<<newline>>""            end)<<newline>>""            <<newline>>""            addCustomOnKill(monster, function (monster)<<newline>>""                local gun = monster.data.flamethrowerAchievementGun<<newline>>""                if monster.data.flamethrowerAchievementSet == true then<<newline>>""                    monster.data.flamethrowerAchievementSet = false<<newline>>""                    gun.data.achievementProcess = gun.data.achievementProcess - 1<<newline>>""                end<<newline>>""            end)<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>"""}, 
{"resources/guns/flaregun/data.json", "{<<newline>>""  \"type\" : \"gun\",<<newline>>""  \"name\": \"Flare Gun\",<<newline>>""  \"icon\" : \"icon.png\",<<newline>>""  \"bulletTexture\" : \"bullet.png\",<<newline>>""  \"bulletSize\" : [5.0, 3.0],<<newline>>""  \"bulletMeshShift\" : [-5.0, 0.0],<<newline>>""  \"bulletRadius\" : 6.0,<<newline>>""  \"bulletSpeed\" : 320.0,<<newline>>""  \"bulletDamage\" : [65, 85],<<newline>>""  <<newline>>""  \"maxAmmo\" : 10,<<newline>>""  \"reloadTime\" : 0.4,<<newline>>""  <<newline>>""  \"firingSound\" : {<<newline>>""    \"path\" : \"flare.ogg\",<<newline>>""    \"volume\" : 3.75<<newline>>""  },<<newline>>""  <<newline>>""  \"scriptFile\" : \"flaregun.lua\",<<newline>>""  \"scriptName\" : \"FlareGun\"<<newline>>""}"}, 
{"resources/guns/flaregun/flaregun.lua", "<<newline>>""function FlareGun.init(gun)<<newline>>""    gun.spreadAngle = 0.0<<newline>>""    gun.crosshairDistance = 350.0<<newline>>""    ShootTimer.initGun(gun, 0.7)<<newline>>""end<<newline>>""<<newline>>""<<newline>>""function FlareGun.onTick(gun)<<newline>>""    if gun.isTriggered and gun:hasAmmo() then<<newline>>""        if ShootTimer.checkGun(gun) then<<newline>>""            gun:consumeAmmo()<<newline>>""            local bullet = gun:addBullet()<<newline>>""            bullet:addTrailParticle(\"FlareTrailParticle\", Vec2.new(0.0, -8.0), 4.0, {})<<newline>>""            bullet.data.randAngle = 0.0<<newline>>""            bullet.data.randShift = 0.0<<newline>>""            bullet.data.totalShift = 0.0<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""function FlareGun.onBulletHit(gun, bullet, monster)<<newline>>""<<newline>>""    addExplosion(bullet.position, 50.0, 100.0, 0, 0, 0.05, false, FlareGun.onExplisionHit )<<newline>>""        <<newline>>""    if monster ~= nil then<<newline>>""        FlareGun.burnMonster( monster )<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""function FlareGun.onBulletTick(gun, bullet)<<newline>>""    local data = bullet.data<<newline>>""    if data.randShift > 1.0 then<<newline>>""        data.randShift = data.randShift - dt<<newline>>""        data.randAngle = data.randAngle + dt * 0.5<<newline>>""    elseif data.randShift < -1.0 then<<newline>>""        data.randShift = data.randShift + dt<<newline>>""        data.randAngle = data.randAngle - dt * 0.5<<newline>>""    else<<newline>>""        data.randShift = math.random() * 0.1 + 1.0<<newline>>""        <<newline>>""        if data.totalShift > 0.002 or (data.totalShift > -0.002 and math.random() < 0.5) then<<newline>>""            data.randShift = -data.randShift<<newline>>""        end<<newline>>""    end<<newline>>""    data.totalShift = data.totalShift + data.randAngle * dt<<newline>>""    local v = Vec2.fromAngle(bullet.moveAngle + math.pi * 0.5) * (1000.0 * data.randAngle * dt)<<newline>>""    bullet.position = bullet.position + v<<newline>>""end<<newline>>""<<newline>>""<<newline>>""function FlareGun.burnMonster(monster)<<newline>>""    if monster.data.flamethrowerObject == nil then<<newline>>""        monster.data.flamethrowerObject = addGameObject(\"BurnMonsterObject\")<<newline>>""        monster.data.flamethrowerObject.data.monster = monster<<newline>>""        monster.data.flamethrowerObject.data.damageMin = 6<<newline>>""        monster.data.flamethrowerObject.data.damageVar = 6<<newline>>""    end<<newline>>""    monster.data.flamethrowerObject.data.count = 9<<newline>>""end<<newline>>""<<newline>>""function FlareGun.onExplisionHit(monster)<<newline>>""    FlareGun.burnMonster(monster)<<newline>>""end<<newline>>"""}, 
{"resources/guns/frost_laser/data.json", "{<<newline>>""  \"type\" : \"gun\",<<newline>>""  \"name\": \"Frost Laser\",<<newline>>""  \"icon\" : \"icon.png\",<<newline>>""  \"bulletTexture\" : \"laser.png\",<<newline>>""  \"bulletSize\" : [15.0, 15.0],<<newline>>""  \"bulletRadius\" : 4.0,<<newline>>""  \"bulletSpeed\" : 350.0,<<newline>>""  \"bulletDamage\" : [12, 16],<<newline>>""  <<newline>>""  \"scriptFile\" : \"frost_laser.lua\",<<newline>>""  \"scriptName\" : \"FrostLaser\",<<newline>>""  <<newline>>""  \"maxAmmo\" : 40,<<newline>>""  \"reloadTime\" : 1.5,<<newline>>""  <<newline>>""  \"showShootAnimation\" : false,<<newline>>""  <<newline>>""  \"firingSoundContinuous\" : true,<<newline>>""  \"firingSound\" : {<<newline>>""    \"path\" : \"laser.ogg\",<<newline>>""    \"volume\" : 0.35<<newline>>""  },<<newline>>""  <<newline>>""  \"isLaser\" : true,<<newline>>""  \"laserTexture\" : \"laser.png\",<<newline>>""  \"laserShader\" : \"laser\",<<newline>>""  <<newline>>""  \"laserThickness\" : 80.0,<<newline>>""  <<newline>>""  \"laserBeginShift\" : 15.0,<<newline>>""  \"laserBeginWidth\" : 40.0,<<newline>>""  <<newline>>""  \"laserEndShift\" : 0.0,<<newline>>""  \"laserEndWidth\" : 40.0<<newline>>""  <<newline>>""}"}, 
{"resources/guns/frost_laser/frost_laser.lua", "FrostLaser.buffId = getGlobalUniqueId()<<newline>>""<<newline>>""function FrostLaser.init(gun)<<newline>>""    gun.spreadAngle = 0.0<<newline>>""    gun.crosshairDistance = 550.0<<newline>>""    gun.data.maxRangeUniform = gun.laser:addUniformFloat(\"maxRange\", 350.0)<<newline>>""    gun.data.timeUniform = gun.laser:addUniformFloat(\"time\", 0.0)<<newline>>""    ShootTimer.initGun(gun, 0.1)<<newline>>""    <<newline>>""    gun.data.checkAchievement = true<<newline>>""    gun.data.achievementProcess = 0<<newline>>""end<<newline>>""<<newline>>""function FrostLaser.checkBuff(monster)<<newline>>""    if monster.moveSpeedMultiplier:hasBuffInfo(FrostLaser.buffId) == false then<<newline>>""        monster.moveSpeedMultiplier:addBuffWithId(FrostLaser.buffId, 1.0)<<newline>>""        local buff = monster.moveSpeedMultiplier:getBuffInfo(FrostLaser.buffId)<<newline>>""        buff:setBuffDuration(1.8)<<newline>>""        buff:setBuffFadeInFadeOut(-1.0, 0.3)<<newline>>""    end<<newline>>""<<newline>>""    if monster.colorMultiplier:hasBuffInfo(FrostLaser.buffId) == false then<<newline>>""        monster.colorMultiplier:addBuffWithId(FrostLaser.buffId, Vec4:new(1.0, 1.0, 1.0, 1.0))<<newline>>""        local colorbuff = monster.colorMultiplier:getBuffInfo(FrostLaser.buffId)<<newline>>""        colorbuff:setBuffDuration(1.8)<<newline>>""        colorbuff:setBuffFadeInFadeOut(-1.0, 0.3)<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""<<newline>>""function FrostLaser.onTick(gun)<<newline>>""    gun.laser:setVisible(false)<<newline>>""    if gun.isTriggered and gun:hasAmmo() then<<newline>>""        gun.laser:setVisible(true)<<newline>>""        local range = 350.0<<newline>>""        local result = getClosestMonsterOnLine(player.gunPos, player.aimDir * range,  0.0, {gun = gun, ignoreFlags = CollisionFlags.NoBulletCollision})<<newline>>""        range = result.distance<<newline>>""<<newline>>""        gun.laser:setLength(range)<<newline>>""        gun.laser:addUniformFloat(\"time\", time)<<newline>>""        if ShootTimer.checkGun(gun) then<<newline>>""            gun:consumeAmmo()<<newline>>""            local monster = result.monster<<newline>>""            if monster ~= nil then<<newline>>""                local args = {doNotStun = true}<<newline>>""                monster:doDamageWithArgs(gun:getRandomDamage(), player.aimDir, args)<<newline>>""                <<newline>>""                <<newline>>""                FrostLaser.checkBuff(monster)<<newline>>""                local buff = monster.moveSpeedMultiplier:getBuffInfo(FrostLaser.buffId)<<newline>>""                local colorbuff = monster.colorMultiplier:getBuffInfo(FrostLaser.buffId)<<newline>>""              <<newline>>""                local amount = buff:getCurrentBuffAmount()<<newline>>""                amount = amount * 0.70<<newline>>""                <<newline>>""                if amount < 0.2 and monster.data.iceBlock == nil and monster.isDead == false then<<newline>>""                    monster.data.iceBlock = addGameObject(\"IceBlock\", { monster = monster, gun = gun })<<newline>>""                end<<newline>>""                <<newline>>""                amount = math.max(amount, 0.2)<<newline>>""                <<newline>>""                buff:setBuffAmount(amount)<<newline>>""                buff:restart()<<newline>>""                <<newline>>""                amount = 1.0 - amount<<newline>>""                colorbuff:setBuffAmount(Vec4:new(1.0 - amount, 1.0 - amount * 0.8, 1.0 - amount * 0.2, 1.0))<<newline>>""                colorbuff:restart()<<newline>>""            end<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""IceBlock = {}<<newline>>""<<newline>>""function IceBlock.init(gameObject, args)<<newline>>""<<newline>>""    gameObject.data.renderable = gameObject:addTexture(FrostLaser.basePath .. \"block.png\", \"~/resources/default\")<<newline>>""    local s =  args.monster.collisionRadius * 1.2 + 15.0<<newline>>""    <<newline>>""    gameObject.data.renderable:setWorldMatrix(Mat3.fromScale(s, s))<<newline>>""    gameObject:setPosition(args.monster.position)<<newline>>""    gameObject:setRotation(math.pi * 2.0 * math.random() )<<newline>>""    <<newline>>""    gameObject.data.monster = args.monster<<newline>>""    gameObject.data.gun = args.gun<<newline>>""    gameObject.data.time = time<<newline>>""    <<newline>>""    gameObject.data.resetCollision = args.monster.hasCollision<<newline>>""    args.monster.hasCollision = false<<newline>>""    <<newline>>""    gameObject.data.colliderSize = s - 10.0<<newline>>""    gameObject.data.collider = gameObject:addCircleCollider( Vec2.new(0.0, 0.0), 0.0, CollisionFlags.NoBulletCollision)<<newline>>""    <<newline>>""    gameObject:setLevel(args.monster:getDrawLevel() + 5)<<newline>>""    <<newline>>""    gameObject.data.rotateSpeed = args.monster.data.maxRotateSpeed<<newline>>""    args.monster.data.maxRotateSpeed = 0.0<<newline>>""    <<newline>>""    gameObject.data.animationSpeed = args.monster.animationSpeed<<newline>>""    args.monster.animationSpeed = 0.0<<newline>>""    <<newline>>""    if args.monster.data.hasIceBlockOnKill == nil then<<newline>>""        args.monster.data.hasIceBlockOnKill = true<<newline>>""        addCustomOnKill(args.monster, function (monster)<<newline>>""            if monster.data.iceBlock ~= nil then<<newline>>""                monster.data.iceBlock.data.monster = nil<<newline>>""            end<<newline>>""        end)<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""function IceBlock.onTick(gameObject)<<newline>>""    local data = gameObject.data<<newline>>""    <<newline>>""    if data.monster ~= nil then<<newline>>""<<newline>>""        FrostLaser.checkBuff(data.monster)<<newline>>""        <<newline>>""        local buff = data.monster.moveSpeedMultiplier:getBuffInfo(FrostLaser.buffId)<<newline>>""        local colorbuff = data.monster.colorMultiplier:getBuffInfo(FrostLaser.buffId)<<newline>>""        <<newline>>""        buff:setBuffAmount(0.0)<<newline>>""        buff:restart()<<newline>>""    <<newline>>""        local amount = 0.8<<newline>>""        colorbuff:setBuffAmount(Vec4:new(1.0 - amount, 1.0 - amount * 0.8, 1.0 - amount * 0.2, 1.0))<<newline>>""        colorbuff:restart()<<newline>>""    end<<newline>>""    <<newline>>""    local t = time - data.time<<newline>>""    if t < 0.15 then<<newline>>""        data.renderable:setColor(Vec4.new(1.0, 1.0, 1.0, t / 0.15))<<newline>>""        relocateCircleCollider(gameObject.data.collider, gameObject:getPosition(), gameObject.data.colliderSize * t / 0.15)<<newline>>""    elseif t > 1.85 then<<newline>>""        data.renderable:setColor(Vec4.new(1.0, 1.0, 1.0, (2.0 - t) / 0.15))<<newline>>""    else<<newline>>""        data.renderable:setColor(Vec4.new(1.0, 1.0, 1.0, 1.0))<<newline>>""        relocateCircleCollider(gameObject.data.collider, gameObject:getPosition(), gameObject.data.colliderSize)<<newline>>""    end<<newline>>""    <<newline>>""    if t > 2.0 then<<newline>>""        gameObject.toBeRemoved = true<<newline>>""        if data.monster ~= nil then<<newline>>""            data.monster.data.iceBlock = nil<<newline>>""             <<newline>>""            local buff = data.monster.moveSpeedMultiplier:getBuffInfo(FrostLaser.buffId)<<newline>>""            local colorbuff = data.monster.colorMultiplier:getBuffInfo(FrostLaser.buffId)<<newline>>""            <<newline>>""            buff:setBuffAmount(1.0)<<newline>>""            buff:restart()<<newline>>""        <<newline>>""            colorbuff:setBuffAmount(Vec4:new(1.0, 1.0, 1.0, 1.0))<<newline>>""            colorbuff:restart()<<newline>>""            <<newline>>""            data.monster:doDamage(math.floor(30+20*math.random()), -data.monster.moveDir) <<newline>>""            <<newline>>""            data.monster.hasCollision = data.resetCollision<<newline>>""    <<newline>>""            data.monster.data.maxRotateSpeed =  data.rotateSpeed<<newline>>""            data.monster.animationSpeed =  data.animationSpeed<<newline>>""            <<newline>>""            local gun = data.gun<<newline>>""            <<newline>>""        <<newline>>""            if gun.data.checkAchievement then<<newline>>""                if hasAchievement( \"ACH_FROST_LASER\" ) or player.isDead or missionData.isSurvival ~= true then<<newline>>""                    data.checkAchievement = false<<newline>>""                elseif data.monster.isDead then<<newline>>""                    gun.data.achievementProcess = gun.data.achievementProcess + 1<<newline>>""                    if gun.data.achievementProcess >= 40 then<<newline>>""                        addAchievement( \"ACH_FROST_LASER\" ) <<newline>>""                    end<<newline>>""                end<<newline>>""           end<<newline>>""         end<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>"""}, 
{"resources/guns/laser/data.json", "{<<newline>>""  \"type\" : \"gun\",<<newline>>""  \"name\": \"Laser\",<<newline>>""  \"icon\" : \"icon.png\",<<newline>>""  \"bulletTexture\" : \"laser.png\",<<newline>>""  \"bulletSize\" : [15.0, 15.0],<<newline>>""  \"bulletRadius\" : 4.0,<<newline>>""  \"bulletSpeed\" : 500.0,<<newline>>""  \"bulletDamage\" : [35, 40],<<newline>>""  <<newline>>""  \"scriptFile\" : \"laser.lua\",<<newline>>""  \"scriptName\" : \"LaserGun\",<<newline>>""  <<newline>>""  \"maxAmmo\" : 40,<<newline>>""  \"reloadTime\" : 1.5,<<newline>>""  <<newline>>""  \"firingSoundContinuous\" : true,<<newline>>""  \"firingSound\" : {<<newline>>""    \"path\" : \"laser.ogg\",<<newline>>""    \"volume\" : 0.55<<newline>>""  },<<newline>>""  <<newline>>""  \"showShootAnimation\" : false,<<newline>>""  <<newline>>""  \"isLaser\" : true,<<newline>>""  \"laserTexture\" : \"laser.png\",<<newline>>""  \"laserShader\" : \"laser\",<<newline>>""  <<newline>>""  \"laserThickness\" : 20.0,<<newline>>""  <<newline>>""  \"laserBeginShift\" : 0.0,<<newline>>""  \"laserBeginWidth\" : 10.0,<<newline>>""  <<newline>>""  \"laserEndShift\" : 0.0,<<newline>>""  \"laserEndWidth\" : 40.0<<newline>>""  <<newline>>""}"}, 
{"resources/guns/laser/laser.lua", "<<newline>>""function LaserGun.init(gun)<<newline>>""    gun.spreadAngle = 0.0<<newline>>""    gun.crosshairDistance = 550.0<<newline>>""    gun.data.maxRangeUniform = gun.laser:addUniformFloat(\"maxRange\", 500.0)<<newline>>""    ShootTimer.initGun(gun, 0.1)<<newline>>""end<<newline>>""<<newline>>""<<newline>>""function LaserGun.onTick(gun)<<newline>>""    gun.laser:setVisible(false)<<newline>>""    if gun.isTriggered and gun:hasAmmo() then<<newline>>""        gun.laser:setVisible(true)<<newline>>""        local range = 500.0<<newline>>""        local result = getClosestMonsterOnLine(player.gunPos, player.aimDir * range, 0.0, {gun = gun, ignoreFlags = CollisionFlags.NoBulletCollision})<<newline>>""        range = result.distance<<newline>>""<<newline>>""        gun.laser:setLength(range)<<newline>>""        <<newline>>""        if ShootTimer.checkGun(gun) then<<newline>>""            gun:consumeAmmo()<<newline>>""            if result.monster ~= nil then<<newline>>""                local args = {doNotStun = true}<<newline>>""                result.monster:doDamageWithArgs(gun:getRandomDamage(), player.aimDir, args)<<newline>>""            end<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>"""}, 
{"resources/guns/laser_machinegun/data.json", "{<<newline>>""  \"type\" : \"gun\",<<newline>>""  \"name\": \"Laser Machine Gun\",<<newline>>""  \"icon\" : \"icon.png\",<<newline>>""  \"bulletTexture\" : \"bullet.png\",<<newline>>""  \"bulletSize\" : [10.0, 10.0],<<newline>>""  \"bulletRadius\" : 4.0,<<newline>>""  \"bulletSpeed\" : 450.0,<<newline>>""  \"bulletDamage\" : [35, 50],<<newline>>""  <<newline>>""  \"maxAmmo\" : 28,<<newline>>""  \"reloadTime\" : 2.5,<<newline>>""  <<newline>>""  \"firingSound\" : {<<newline>>""    \"path\" : \"laser_machinegun.ogg\",<<newline>>""    \"volume\" : 2.55<<newline>>""  },<<newline>>""  <<newline>>""  \"shootParticleColor\" : [0.0, 0.6, 0.8],<<newline>>""  <<newline>>""  \"scriptFile\" : \"laser_machine.lua\",<<newline>>""  \"scriptName\" : \"LaserMachineGun\"<<newline>>""}"}, 
{"resources/guns/laser_machinegun/laser_machine.lua", "<<newline>>""function LaserMachineGun.init(gun)<<newline>>""    gun.crosshairDistance = 350.0<<newline>>""    <<newline>>""    ShootTimer.initGun(gun, 0.17)<<newline>>""    SpreadHelper.initGun(gun)<<newline>>""    gun.data.minSpread = 0.05<<newline>>""    gun.data.maxSpread = 0.15<<newline>>""    gun.data.spreadIncreasePerShoot = 0.01<<newline>>""end<<newline>>""<<newline>>""<<newline>>""function LaserMachineGun.onTick(gun)<<newline>>""    SpreadHelper.onTick(gun)<<newline>>""    if gun.isTriggered and gun:hasAmmo() then<<newline>>""        if ShootTimer.checkGun(gun) then<<newline>>""            gun:consumeAmmo()<<newline>>""            SpreadHelper.onShoot(gun)<<newline>>""            local bullet = gun:addBullet()<<newline>>""            <<newline>>""            bullet.onDamageArgs.slowdownOnly = true<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>"""}, 
{"resources/guns/laser_pistol/data.json", "{<<newline>>""  \"type\" : \"gun\",<<newline>>""  \"name\": \"Laser Pistol\",<<newline>>""  \"icon\" : \"icon.png\",<<newline>>""  \"bulletTexture\" : \"bullet.png\",<<newline>>""  \"bulletSize\" : [15.0, 15.0],<<newline>>""  \"bulletRadius\" : 4.0,<<newline>>""  \"bulletSpeed\" : 350.0,<<newline>>""  \"bulletDamage\" : [55, 80],<<newline>>""  <<newline>>""  \"maxAmmo\" : 12,<<newline>>""  \"reloadTime\" : 2.0,<<newline>>""  <<newline>>""  \"firingSound\" : {<<newline>>""    \"path\" : \"laser_pistol.ogg\",<<newline>>""    \"volume\" : 0.85<<newline>>""  },<<newline>>""  <<newline>>""  \"shootParticleColor\" : [0.8, 0.8, 0.3],<<newline>>""  <<newline>>""  \"scriptFile\" : \"laser_pistol.lua\",<<newline>>""  \"scriptName\" : \"LaserPistol\"<<newline>>""}"}, 
{"resources/guns/laser_pistol/laser_pistol.lua", "<<newline>>""function LaserPistol.init(gun)<<newline>>""    gun.spreadAngle = 0.0<<newline>>""    gun.crosshairDistance = 350.0<<newline>>""    ShootTimer.initGun(gun, 0.40)<<newline>>""    SpreadHelper.initGun(gun)<<newline>>""end<<newline>>""<<newline>>""<<newline>>""function LaserPistol.onTick(gun)<<newline>>""    SpreadHelper.onTick(gun)<<newline>>""    if gun.isTriggered and gun:hasAmmo() then<<newline>>""        if ShootTimer.checkGun(gun) then<<newline>>""            gun:consumeAmmo()<<newline>>""            SpreadHelper.onShoot(gun)<<newline>>""            gun:addBullet()<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>"""}, 
{"resources/guns/machinegun/data.json", "{<<newline>>""  \"type\" : \"gun\",<<newline>>""  \"name\": \"Machine Gun\",<<newline>>""  \"icon\" : \"icon.png\",<<newline>>""  \"bulletTexture\" : \"bullet.png\",<<newline>>""  \"bulletSize\" : [8.0, 8.0],<<newline>>""  \"bulletMeshShift\" : [0.0, 0.0],<<newline>>""  \"bulletRadius\" : 3.0,<<newline>>""  \"bulletSpeed\" : 550.0,<<newline>>""  \"bulletDamage\" : [30, 45],<<newline>>""  <<newline>>""  \"maxAmmo\" : 32,<<newline>>""  \"reloadTime\" : 1.5,<<newline>>""  <<newline>>""  \"firingSound\" : {<<newline>>""    \"path\" : \"assault.ogg\",<<newline>>""    \"volume\" : 0.80<<newline>>""  },<<newline>>""  <<newline>>""  \"scriptFile\" : \"machine.lua\",<<newline>>""  \"scriptName\" : \"MachineGun\"<<newline>>""}"}, 
{"resources/guns/machinegun/machine.lua", "<<newline>>""function MachineGun.init(gun)<<newline>>""    gun.spreadAngle = 0.10<<newline>>""    gun.crosshairDistance = 550.0<<newline>>""    ShootTimer.initGun(gun, 0.15)<<newline>>""end<<newline>>""<<newline>>""<<newline>>""function MachineGun.onTick(gun)<<newline>>""    if gun.isTriggered and gun:hasAmmo() then<<newline>>""        if ShootTimer.checkGun(gun) then<<newline>>""            gun:consumeAmmo()<<newline>>""            local bullet = gun:addBullet()<<newline>>""            bullet.onDamageArgs.customSlowdownAmount = 4.0<<newline>>""            bullet.onDamageArgs.slowdownOnly = true<<newline>>""            <<newline>>""            bullet:addTrailParticle(\"BulletTrailParticle\", Vec2.new(0.0, 14.0), 15.0, { initialScale = 2.0, fadeOutSpeed = 1.2})<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>"""}, 
{"resources/guns/minigun/data.json", "{<<newline>>""  \"type\" : \"gun\",<<newline>>""  \"name\": \"Gatling Gun\",<<newline>>""  \"icon\" : \"icon.png\",<<newline>>""  \"bulletTexture\" : \"bullet.png\",<<newline>>""  \"bulletSize\" : [5.0, 5.0],<<newline>>""  \"bulletMeshShift\" : [0.0, 0.0],<<newline>>""  \"bulletRadius\" : 3.0,<<newline>>""  \"bulletSpeed\" : 550.0,<<newline>>""  \"bulletDamage\" : [20, 30],<<newline>>""  <<newline>>""  \"maxAmmo\" : 400,<<newline>>""  \"reloadTime\" : 3.5,<<newline>>""  <<newline>>""  \"firingSoundContinuous\" : true,<<newline>>""  \"firingSound\" : {<<newline>>""    \"path\" : \"shoot.ogg\",<<newline>>""    \"volume\" : 3.0<<newline>>""  },<<newline>>""  <<newline>>""  \"firingSoundFadein\" : 0.05,<<newline>>""  \"firingSoundFadeout\" : 0.1,<<newline>>""  <<newline>>""  \"scriptFile\" : \"minigun.lua\",<<newline>>""  \"scriptName\" : \"MiniGun\"<<newline>>""}"}, 
{"resources/guns/minigun/minigun.lua", "<<newline>>""MiniGun.buffId = getGlobalUniqueId()<<newline>>""<<newline>>""function MiniGun.init(gun)<<newline>>""    gun.crosshairDistance = 550.0<<newline>>""    ShootTimer.initGun(gun, 0.02)<<newline>>""    <<newline>>""    gun.data.waitTime = 0.0<<newline>>""    gun.data.cooldown = false<<newline>>""    <<newline>>""    gun.data.checkAchievement = true<<newline>>""    gun.data.achievementProcess = 0<<newline>>""    gun.data.achievementKillCounts = {}<<newline>>""    <<newline>>""    gun.data.shootStarted = false<<newline>>""end<<newline>>""<<newline>>""<<newline>>""function MiniGun.onTick(gun)<<newline>>""    local data = gun.data<<newline>>""    local shoot = false<<newline>>""    if gun.isTriggered and gun:hasAmmo() and data.cooldown == false then<<newline>>""        shoot = true<<newline>>""    end<<newline>>""    <<newline>>""    if data.shootStarted then<<newline>>""        if data.waitTime < 0.38 then<<newline>>""            shoot = true<<newline>>""        else<<newline>>""            data.shootStarted = false<<newline>>""        end<<newline>>""    end<<newline>>""    if shoot then<<newline>>""        if data.waitTime == 0.0 then<<newline>>""            playSound({path = MiniGun.basePath .. \"start.ogg\", volume = 0.7})<<newline>>""            data.shootStarted = true<<newline>>""        end<<newline>>""        data.waitTime = data.waitTime + dt<<newline>>""        if data.waitTime > 0.4 then<<newline>>""            if data.waitTime > 2.0 then<<newline>>""                data.waitTime =  2.0<<newline>>""            end<<newline>>""            <<newline>>""            gun.playFiringSound = true<<newline>>""            if ShootTimer.checkGun(gun) then<<newline>>""                gun:consumeAmmo()<<newline>>""                local bullet = gun:addBullet()<<newline>>""                bullet.onDamageArgs.customSlowdownAmount = 4.0<<newline>>""                bullet.onDamageArgs.slowdownOnly = true<<newline>>""                <<newline>>""                bullet:addTrailParticle(\"BulletTrailParticle\", Vec2.new(0.0, 14.0), 15.0, { initialScale = 2.0, fadeOutSpeed = 1.2})<<newline>>""            end<<newline>>""        end<<newline>>""    else<<newline>>""         data.waitTime = data.waitTime - dt * 2.0<<newline>>""         if data.waitTime <= 0.0 then<<newline>>""            data.waitTime = 0.0<<newline>>""            data.cooldown = false<<newline>>""         else <<newline>>""            if data.cooldown == false then<<newline>>""                playSound({path = MiniGun.basePath .. \"end.ogg\", volume = 0.6})<<newline>>""                data.cooldown = true<<newline>>""            end<<newline>>""         end<<newline>>""         <<newline>>""        gun.playFiringSound = false<<newline>>""    end<<newline>>""    <<newline>>""    <<newline>>""    local t = data.waitTime / 0.3<<newline>>""    if t > 1.0 then<<newline>>""        t = 1.0<<newline>>""    end<<newline>>""    gun.spreadAngle = 0.2 * t<<newline>>""    <<newline>>""    <<newline>>""    if player.maxRotateSpeed:hasBuffInfo(MiniGun.buffId) == false then<<newline>>""        player.maxRotateSpeed:addBuffWithId(MiniGun.buffId, 1.0)<<newline>>""    end<<newline>>""<<newline>>""    if player.maxSpeed:hasBuffInfo(MiniGun.buffId) == false then<<newline>>""        player.maxSpeed:addBuffWithId(MiniGun.buffId, 1.0)<<newline>>""    end<<newline>>""    player.maxRotateSpeed:getBuffInfo( MiniGun.buffId ) : setBuffAmount(1.0 - 0.95 * t)<<newline>>""    player.maxSpeed:getBuffInfo( MiniGun.buffId ) : setBuffAmount(1.0 - 0.5 * t)<<newline>>""    <<newline>>""    <<newline>>""    if data.checkAchievement then<<newline>>""    <<newline>>""        if hasAchievement( \"ACH_MINIGUN\" ) or player.isDead or missionData.isSurvival ~= true then<<newline>>""            data.checkAchievement = false<<newline>>""            return<<newline>>""        end<<newline>>""        if data.achievementProcess >= 30 then<<newline>>""            addAchievement( \"ACH_MINIGUN\" )<<newline>>""            data.checkAchievement = false<<newline>>""            return<<newline>>""        end<<newline>>""    <<newline>>""        local t = math.floor(time) - 5<<newline>>""        <<newline>>""        for key,kill in pairs(data.achievementKillCounts) do<<newline>>""            if t >= key then<<newline>>""                data.achievementProcess = data.achievementProcess - kill<<newline>>""                data.achievementKillCounts[ key ] = nil<<newline>>""            end<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""<<newline>>""function MiniGun.onBulletHit(gun, bullet, monster)<<newline>>""    local data = gun.data<<newline>>""    if data.checkAchievement then<<newline>>""        if  monster ~= nil and monster.isDead == true then<<newline>>""            data.achievementProcess = data.achievementProcess + 1<<newline>>""            local t = math.floor(time)<<newline>>""            <<newline>>""            local k = data.achievementKillCounts<<newline>>""            <<newline>>""            if k[t] == nil then<<newline>>""                k[t] = 1<<newline>>""            else<<newline>>""                k[t] =  k[t] + 1<<newline>>""            end<<newline>>""        end<<newline>>""    end<<newline>>"" end<<newline>>""<<newline>>"""}, 
{"resources/guns/pistol/data.json", "{<<newline>>""  \"type\" : \"gun\",<<newline>>""  <<newline>>""  \"name\": \"Pistol\",<<newline>>""  \"icon\" : \"icon.png\",<<newline>>""  <<newline>>""  \"bulletTexture\" : \"bullet.png\",<<newline>>""  \"bulletSize\" : [8.0, 8.0],<<newline>>""  \"bulletMeshShift\" : [0.0, 0.0],<<newline>>""  \"bulletRadius\" : 2.0,<<newline>>""  \"bulletSpeed\" : 850.0,<<newline>>""  \"bulletDamage\" : [50, 90],<<newline>>""  <<newline>>""  \"crosshairDistance\" : 350.0,<<newline>>""  \"maxAmmo\" : 12,<<newline>>""  \"reloadTime\" : 1.2,<<newline>>""  <<newline>>""  \"firingSound\" : \"pistol.ogg\",<<newline>>""  <<newline>>""  \"scriptFile\" : \"pistol.lua\",<<newline>>""  \"scriptName\" : \"Pistol\"<<newline>>""}"}, 
{"resources/guns/pistol/pistol.lua", "<<newline>>""function Pistol.init(gun)<<newline>>""    ShootTimer.initGun(gun, 0.35)<<newline>>""    <<newline>>""    SpreadHelper.initGun(gun)<<newline>>""    gun.data.minSpread = 0.0<<newline>>""    gun.data.maxSpread = 0.10<<newline>>""    gun.data.spreadDecreaseSpeed = 0.25<<newline>>""    gun.data.spreadIncreasePerShoot = 0.02<<newline>>""    <<newline>>""    gun.data.checkAchievement = true<<newline>>""end<<newline>>""<<newline>>""<<newline>>""function Pistol.onTick(gun)<<newline>>""    local data = gun.data<<newline>>""    SpreadHelper.onTick(gun)<<newline>>""    if gun.isTriggered and gun:hasAmmo() then<<newline>>""        if ShootTimer.checkGun(gun) then<<newline>>""            gun:consumeAmmo()<<newline>>""            SpreadHelper.onShoot(gun)<<newline>>""            local bullet = gun:addBullet()<<newline>>""            bullet:addTrailParticle(\"BulletTrailParticle\", Vec2.new(0.0, 14.0), 15.0, {initialScale = 2.0, fadeOutSpeed = 1.2, color = Vec3.new(0.8, 0.8, 0.8)})<<newline>>""        end<<newline>>""    end<<newline>>""    <<newline>>""    if data.checkAchievement then<<newline>>""        if hasAchievement( \"ACH_PISTOL\" ) or player.isDead or missionData.isSurvival ~= true or <<newline>>""                    player.gun ~= gun or player.ultimate ~= nil then<<newline>>""                    <<newline>>""            data.checkAchievement = false<<newline>>""            return<<newline>>""        end<<newline>>""        <<newline>>""        if missionTime > 2 * 60.0 then<<newline>>""            addAchievement(\"ACH_PISTOL\")<<newline>>""            data.checkAchievement = false<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>"""}, 
{"resources/guns/plasmagun/data.json", "{<<newline>>""  \"type\" : \"gun\",<<newline>>""  \"name\": \"Plasma Gun\",<<newline>>""  \"icon\" : \"icon.png\",<<newline>>""  \"bulletTexture\" : \"bullet.png\",<<newline>>""  \"bulletSize\" : [6.0, 6.0],<<newline>>""  \"bulletRadius\" : 5.0,<<newline>>""  \"bulletSpeed\" : 550.0,<<newline>>""  \"bulletDamage\" : [50, 70],<<newline>>""  <<newline>>""  \"maxAmmo\" : 12,<<newline>>""  \"reloadTime\" : 2.5,<<newline>>""  <<newline>>""  \"firingSound\" : {<<newline>>""    \"path\" : \"plasma.ogg\",<<newline>>""    \"volume\" : 0.75<<newline>>""  },<<newline>>""  \"bulletHitSound\" : \"plasma_hit.ogg\",<<newline>>""  <<newline>>""  \"scriptFile\" : \"plasmagun.lua\",<<newline>>""  \"scriptName\" : \"PlasmaGun\",<<newline>>""  <<newline>>""  \"shootParticleColor\" : [0.0, 0.6, 0.8]<<newline>>""}"}, 
{"resources/guns/plasmagun/plasmagun.lua", "<<newline>>""function PlasmaGun.init(gun)<<newline>>""    gun.spreadAngle = 0.0<<newline>>""    gun.crosshairDistance = 400.0<<newline>>""    ShootTimer.initGun(gun, 0.35)<<newline>>""    SpreadHelper.initGun(gun)<<newline>>""    gun.data.maxSpread = 0.10<<newline>>""    gun.data.spreadDecreaseStartTime = 0.0<<newline>>""    gun.data.spreadDecreaseSpeed = 0.05<<newline>>""    <<newline>>""    gun.data.checkAchievement = true<<newline>>""    gun.data.achievementProcess = 0<<newline>>""end<<newline>>""<<newline>>""<<newline>>""function PlasmaGun.onTick(gun)<<newline>>""    SpreadHelper.onTick(gun)<<newline>>""    if gun.isTriggered and gun:hasAmmo() then<<newline>>""        if ShootTimer.checkGun(gun) then<<newline>>""            gun:consumeAmmo()<<newline>>""            SpreadHelper.onShoot(gun)<<newline>>""            local bullet = gun:addBullet()<<newline>>""            bullet:addTrailParticle(\"PlasmaTrailParticle\", Vec2.new(0.0, 0.0), 3.0, {color = Vec3.new(0.0, 0.6, 0.8)})<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""function PlasmaGun.onBulletHit(gun, bullet, monster)<<newline>>""    local data = gun.data<<newline>>""    if monster ~= nil then<<newline>>""        local m = monster<<newline>>""        local oldGameObjectPos = nil<<newline>>""        local count = 0<<newline>>""        <<newline>>""        if monster.isDead then<<newline>>""            count = count + 1<<newline>>""        end<<newline>>""        while m ~= nill do<<newline>>""            m:addIgnoreId(bullet.id)<<newline>>""            local gameObject = addGameObject(\"FadeOutImage\")<<newline>>""            gameObject.data.startTime = time<<newline>>""            gameObject.data.fadeOutStartTime = 0.0<<newline>>""            gameObject.data.fadeInDuration = 0.0<<newline>>""            gameObject.data.fadeOutDuration = 0.3<<newline>>""            gameObject:setLevel(RenderableLevel.monsters + 5)<<newline>>""            gameObject.data.renderable = gameObject:addTexture(PlasmaGun.basePath .. \"bullet.png\", \"~/resources/default\")<<newline>>""            gameObject.data.renderable:setAlignment(RenderableAlignment.world)<<newline>>""            gameObject.data.renderable:setWorldMatrix(Mat3.fromScale(6.0, 6.0))<<newline>>""            if oldGameObjectPos ~= nil then<<newline>>""                gameObject:setPosition(m.position)<<newline>>""                local gameObject2 = addGameObject(\"FadeOutImage\")<<newline>>""                gameObject2.data.startTime = time<<newline>>""                gameObject2.data.fadeOutStartTime = 0.0<<newline>>""                gameObject2.data.fadeInDuration = 0.0<<newline>>""                gameObject2.data.fadeOutDuration = 0.3<<newline>>""                gameObject2:setLevel(RenderableLevel.monsters + 4)<<newline>>""                gameObject2.data.renderable = gameObject2:addTexture(PlasmaGun.basePath .. \"line.png\", \"~/resources/default\")<<newline>>""                <<newline>>""                gameObject2.data.renderable:setAlignment(RenderableAlignment.world)<<newline>>""                gameObject2.data.renderable:setWorldMatrix(Mat3.from(<<newline>>""                (m.position + oldGameObjectPos) * 0.5,<<newline>>""                Vec2:new((m.position - oldGameObjectPos):length() * 0.5 - 3, 3.0),<<newline>>""                 -(m.position - oldGameObjectPos):getAngle()<<newline>>""                ))<<newline>>""                <<newline>>""                <<newline>>""                local args = {doNotStun = true}<<newline>>""                m:doDamageWithArgs(math.floor( ( 10 + 10 * math.random() ) * player.damageMultiplier:getBuffedValue() ), (m.position - oldGameObjectPos):normalized(), args)<<newline>>""            <<newline>>""                if m.isDead then<<newline>>""                    count = count + 1<<newline>>""                end<<newline>>""                if math.random() < 0.5 then<<newline>>""                    oldGameObjectPos = m.position<<newline>>""                end<<newline>>""            else <<newline>>""                gameObject:setPosition(bullet.position)<<newline>>""                oldGameObjectPos = bullet.position<<newline>>""            end<<newline>>""            <<newline>>""            m = getClosestMonsterInRangeWithIgnoreId(bullet.position, 80.0, {bullet.id})<<newline>>""        end<<newline>>""<<newline>>""        if data.checkAchievement then<<newline>>""            if hasAchievement( \"ACH_PLASMA_GUN\" ) or player.isDead or missionData.isSurvival ~= true then<<newline>>""                data.checkAchievement = false<<newline>>""                return<<newline>>""            end<<newline>>""            if count >= 3 then <<newline>>""                data.achievementProcess = data.achievementProcess + 1<<newline>>""                <<newline>>""                if data.achievementProcess >= 20 then<<newline>>""                    addAchievement( \"ACH_PLASMA_GUN\" )<<newline>>""                    data.checkAchievement = false<<newline>>""                end<<newline>>""            end<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>"""}, 
{"resources/guns/pulsegun/data.json", "{<<newline>>""  \"type\" : \"gun\",<<newline>>""  \"name\": \"Pulse Gun\",<<newline>>""  \"icon\" : \"icon.png\",<<newline>>""  \"bulletTexture\" : \"bullet.png\",<<newline>>""  \"bulletSize\" : [20.0, 20.0],<<newline>>""  \"bulletMeshShift\" : [0.0, 0.0],<<newline>>""  \"bulletRadius\" : 15.0,<<newline>>""  \"bulletSpeed\" : 650.0,<<newline>>""  \"bulletDamage\" : [30,40],<<newline>>""  <<newline>>""  \"maxAmmo\" : 16,<<newline>>""  \"reloadTime\" : 2.0,<<newline>>""  <<newline>>""  \"showShootAnimation\" : false,<<newline>>""  <<newline>>""  \"firingSound\" : {<<newline>>""    \"path\" : \"pulse.ogg\",<<newline>>""    \"volume\" : 0.30<<newline>>""  },<<newline>>""  <<newline>>""  \"scriptFile\" : \"pulsegun.lua\",<<newline>>""  \"scriptName\" : \"PulseGun\"<<newline>>""}"}, 
{"resources/guns/pulsegun/pulsegun.lua", "<<newline>>""function PulseGun.init(gun)<<newline>>""    gun.spreadAngle = 0.0<<newline>>""    gun.crosshairDistance = 250.0<<newline>>""    ShootTimer.initGun(gun, 0.15)<<newline>>""end<<newline>>""<<newline>>""<<newline>>""function PulseGun.onTick(gun)<<newline>>""    if gun.isTriggered and gun:hasAmmo() then<<newline>>""        if ShootTimer.checkGun(gun) then<<newline>>""            gun:consumeAmmo()<<newline>>""            local bullet = gun:addBullet()<<newline>>""            bullet.data.t = 0.3<<newline>>""            bullet:setScale(bullet.data.t)<<newline>>""            bullet.penetrateCount = -1<<newline>>""            bullet.data.toKillTime = 1000.0<<newline>>""            bullet:setColor(Vec4.new(1.0, 1.0, 1.0, 0.4))<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""<<newline>>""function PulseGun.onBulletTick(gun, bullet)<<newline>>""    local data = bullet.data<<newline>>""    data.t = data.t + dt * 10.5<<newline>>""    data.t = math.min(data.t, 1.5)<<newline>>""    bullet:setScale(data.t)<<newline>>""    <<newline>>""    data.toKillTime = data.toKillTime - dt<<newline>>""    if data.toKillTime < 0.0 then<<newline>>""        bullet:removeSelf()<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""function PulseGun.onBulletHit(gun, bullet, monster)<<newline>>""    if monster ~= nil then<<newline>>""        monster:addKnockback(bullet.moveDir * 200.0, 0.06)<<newline>>""        if bullet.data.toKillTime > 0.05 then<<newline>>""            bullet.data.toKillTime = 0.05<<newline>>""        end<<newline>>""    end<<newline>>""end"}, 
{"resources/guns/railgun/data.json", "{<<newline>>""  \"type\" : \"gun\",<<newline>>""  \"name\": \"Railgun\",<<newline>>""  \"icon\" : \"icon.png\",<<newline>>""  \"bulletTexture\" : \"bullet.png\",<<newline>>""  \"bulletSize\" : [10.0, 10.0],<<newline>>""  \"bulletMeshShift\" : [0.0, 0.0],<<newline>>""  \"bulletRadius\" : 5.0,<<newline>>""  \"bulletSpeed\" : 950.0,<<newline>>""  \"bulletDamage\" : [65, 105],<<newline>>""  <<newline>>""  \"maxAmmo\" : 12,<<newline>>""  \"reloadTime\" : 3.0,<<newline>>""  <<newline>>""  \"firingSound\" : {<<newline>>""    \"path\" : \"railgun.ogg\",<<newline>>""    \"volume\" : 0.75<<newline>>""  },<<newline>>""  <<newline>>""  \"scriptFile\" : \"railgun.lua\",<<newline>>""  \"scriptName\" : \"Railgun\"<<newline>>""}"}, 
{"resources/guns/railgun/railgun.lua", "<<newline>>""function Railgun.init(gun)<<newline>>""    gun.spreadAngle = 0.0<<newline>>""    gun.crosshairDistance = 350.0<<newline>>""    ShootTimer.initGun(gun, 0.85)<<newline>>""    SpreadHelper.initGun(gun)<<newline>>""    gun.data.maxSpread = 0.05<<newline>>""    gun.data.spreadDecreaseStartTime = 0.35<<newline>>""    gun.data.spreadDecreaseSpeed = 0.40<<newline>>""    gun.data.spreadIncreasePerShoot = 0.03<<newline>>""    <<newline>>""    gun.data.checkAchievement = true<<newline>>""    gun.data.achievementProcess = 0<<newline>>""end<<newline>>""<<newline>>""<<newline>>""function Railgun.onTick(gun)<<newline>>""    SpreadHelper.onTick(gun)<<newline>>""    if gun.isTriggered and gun:hasAmmo() then<<newline>>""        if ShootTimer.checkGun(gun) then<<newline>>""            gun:consumeAmmo()<<newline>>""            SpreadHelper.onShoot(gun)<<newline>>""            local bullet = gun:addBullet()<<newline>>""            bullet.penetrateCount = 4<<newline>>""            <<newline>>""            bullet:addTrailParticle(\"RailGunParticle\", Vec2.new(0.0, 0.0), 7.0, {})<<newline>>""            <<newline>>""            bullet:addTrailParticle(\"BulletTrailParticle\", Vec2.new(0.0, 14.0), 15.0, {initialScale = 1.5, initialAlpha = 0.2, fadeOutSpeed = 0.3, color = Vec3.new(1.0, 1.0, 1.0)})<<newline>>""            <<newline>>""            bullet.data.killCount = 0<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""<<newline>>""<<newline>>""function Railgun.onBulletHit(gun, bullet, monster)<<newline>>""    local data = gun.data<<newline>>""    if data.checkAchievement then<<newline>>""        if hasAchievement( \"ACH_RAIL_GUN\" ) or player.isDead or missionData.isSurvival ~= true then<<newline>>""            data.checkAchievement = false<<newline>>""            return<<newline>>""        end<<newline>>""            <<newline>>""        if  monster ~= nil and monster.isDead == true then<<newline>>""            bullet.data.killCount = bullet.data.killCount + 1<<newline>>""            if bullet.data.killCount == 3 then<<newline>>""                data.achievementProcess = data.achievementProcess + 1<<newline>>""                if data.achievementProcess >= 30 then<<newline>>""                    addAchievement( \"ACH_RAIL_GUN\" ) <<newline>>""                    data.checkAchievement = false<<newline>>""                end<<newline>>""             end<<newline>>""        end<<newline>>""    end<<newline>>"" end<<newline>>"""}, 
{"resources/guns/rainbow_gun/data.json", "{<<newline>>""  \"type\" : \"gun\",<<newline>>""  <<newline>>""  \"name\": \"Rainbow Gun\",<<newline>>""  \"icon\" : \"icon.png\",<<newline>>""  <<newline>>""  \"bulletRadius\" : 16.0,<<newline>>""  \"bulletSpeed\" : 450.0,<<newline>>""  \"bulletDamage\" : [4, 7],<<newline>>""  \"bulletLifeTime\" : 0.90,<<newline>>""  <<newline>>""  \"crosshairDistance\" : 350.0,<<newline>>""  \"maxAmmo\" : 8,<<newline>>""  \"reloadTime\" : 2.5,<<newline>>""  <<newline>>""  \"firingSound\" : {<<newline>>""    \"path\" : \"fire.ogg\",<<newline>>""    \"volume\" : 0.65<<newline>>""  },<<newline>>""  <<newline>>""  \"stripLaserParticle\" : \"RainbowStrip\",<<newline>>""  <<newline>>""  \"scriptFile\" : \"rainbowgun.lua\",<<newline>>""  \"scriptName\" : \"RainbowGun\"<<newline>>""}"}, 
{"resources/guns/rainbow_gun/rainbowgun.lua", "<<newline>>""function RainbowGun.init(gun)<<newline>>""    ShootTimer.initGun(gun, 0.55)<<newline>>""    <<newline>>""    gun.data.shootTime = 0.0<<newline>>""    gun.data.shootSpeed =  Vec2.new(0.0, 0.0)<<newline>>""    <<newline>>""end<<newline>>""<<newline>>""<<newline>>""function RainbowGun.onTick(gun)<<newline>>""    gun.data.shootTime = gun.data.shootTime - dt<<newline>>""    gun.stripLaser:setShooting(gun.data.shootTime > 0.0)<<newline>>""    gun.stripLaser:setSpeed( gun.data.shootSpeed )<<newline>>""    if gun.isTriggered and gun:hasAmmo() then<<newline>>""        if ShootTimer.checkGun(gun) then<<newline>>""            gun.data.shootTime = 0.11<<newline>>""            gun.data.shootSpeed = player.aimDir * gun.bulletSpeed * player.bulletSpeedMultiplier:getBuffedValue()<<newline>>""            gun:consumeAmmo()<<newline>>""            local bullet = gun:addBullet()<<newline>>""            bullet.penetrateCount = -1<<newline>>""            bullet.hasCollision = false<<newline>>""            bullet.hitsMultipleTimes = true<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>"" function RainbowGun.onBulletHit(gun, bullet, monster)<<newline>>""    if monster ~= nil then<<newline>>""        local toMonster = monster.position - bullet.position<<newline>>""        local d = 40 - toMonster:normalize() <<newline>>""        if d < 2.0 then<<newline>>""            d = 2.0<<newline>>""        end<<newline>>""        monster:addKnockback(toMonster * d * 2, 0.1)<<newline>>""    end<<newline>>"" end<<newline>>"""}, 
{"resources/guns/rifle/data.json", "{<<newline>>""  \"type\" : \"gun\",<<newline>>""  \"name\": \"Rifle\",<<newline>>""  \"icon\" : \"icon.png\",<<newline>>""  \"bulletTexture\" : \"bullet.png\",<<newline>>""  \"bulletSize\" : [10.0, 10.0],<<newline>>""  \"bulletMeshShift\" : [0.0, 0.0],<<newline>>""  \"bulletRadius\" : 2.0,<<newline>>""  \"bulletSpeed\" : 950.0,<<newline>>""  \"bulletDamage\" : [110, 140],<<newline>>""  <<newline>>""  \"maxAmmo\" : 8,<<newline>>""  \"reloadTime\" : 2.2,<<newline>>""  <<newline>>""  <<newline>>""  \"firingSound\" : {<<newline>>""    \"path\" : \"rifle.ogg\",<<newline>>""    \"volume\" : 0.85<<newline>>""  },<<newline>>""  <<newline>>""  \"scriptFile\" : \"rifle.lua\",<<newline>>""  \"scriptName\" : \"Rifle\"<<newline>>""}"}, 
{"resources/guns/rifle/rifle.lua", "<<newline>>""function Rifle.init(gun)<<newline>>""    gun.spreadAngle = 0.0<<newline>>""    gun.crosshairDistance = 350.0<<newline>>""    ShootTimer.initGun(gun, 0.75)<<newline>>""    SpreadHelper.initGun(gun)<<newline>>""    gun.data.maxSpread = 0.25<<newline>>""    gun.data.spreadDecreaseStartTime = 0.35<<newline>>""    gun.data.spreadDecreaseSpeed = 0.80<<newline>>""    gun.data.spreadIncreasePerShoot = 0.03<<newline>>""    <<newline>>""    gun.data.checkAchievement = true<<newline>>""    gun.data.achievementProcess = 0<<newline>>""end<<newline>>""<<newline>>""<<newline>>""function Rifle.onTick(gun)<<newline>>""    SpreadHelper.onTick(gun)<<newline>>""    if gun.isTriggered and gun:hasAmmo() then<<newline>>""        if ShootTimer.checkGun(gun) then<<newline>>""            gun:consumeAmmo()<<newline>>""            SpreadHelper.onShoot(gun)<<newline>>""            local bullet = gun:addBullet()<<newline>>""            bullet:addTrailParticle(\"BulletTrailParticle\", Vec2.new(0.0, 14.0), 15.0, {initialScale = 3.0, fadeOutSpeed = 0.8})<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""<<newline>>""function Rifle.onBulletHit(gun, bullet, monster)<<newline>>""    local data = gun.data<<newline>>""    if data.checkAchievement then<<newline>>""        if hasAchievement( \"ACH_RIFLE\" ) or player.isDead or missionData.isSurvival ~= true then<<newline>>""            data.checkAchievement = false<<newline>>""            return<<newline>>""        end<<newline>>""            <<newline>>""        if monster == nil then<<newline>>""            data.achievementProcess = 0<<newline>>""        elseif monster.isDead == true then<<newline>>""            data.achievementProcess = data.achievementProcess + 1<<newline>>""            if data.achievementProcess >= 30 then<<newline>>""                addAchievement( \"ACH_RIFLE\" ) <<newline>>""                data.checkAchievement = false<<newline>>""            end<<newline>>""        end<<newline>>""    end<<newline>>"" end"}, 
{"resources/guns/rocketlauncher/data.json", "{<<newline>>""  \"type\" : \"gun\",<<newline>>""  \"name\": \"Rocket Launcher\",<<newline>>""  \"icon\" : \"icon.png\",<<newline>>""  \"bulletTexture\" : \"bullet.png\",<<newline>>""  \"bulletSize\" : [6.0, 6.0],<<newline>>""  \"bulletRadius\" : 2.0,<<newline>>""  \"bulletSpeed\" : 350.0,<<newline>>""  \"bulletDamage\" : [40, 70],<<newline>>""  <<newline>>""  \"maxAmmo\" : 6,<<newline>>""  \"reloadTime\" : 2.8,<<newline>>""  <<newline>>""  \"firingSound\" : \"rocket.ogg\",<<newline>>""  \"bulletHitSound\" : \"missile_explosion.ogg\",<<newline>>""  <<newline>>""  \"scriptFile\" : \"rocket.lua\",<<newline>>""  \"scriptName\" : \"RocketLauncher\"<<newline>>""}"}, 
{"resources/guns/rocketlauncher/rocket.lua", "<<newline>>""function RocketLauncher.init(gun)<<newline>>""    gun.spreadAngle = 0.0<<newline>>""    gun.crosshairDistance = 350.0<<newline>>""    ShootTimer.initGun(gun, 0.7)<<newline>>""    <<newline>>""    gun.data.checkAchievement = true<<newline>>""    gun.data.achievementProcess = 0<<newline>>""end<<newline>>""<<newline>>""<<newline>>""function RocketLauncher.onTick(gun)<<newline>>""    if gun.isTriggered and gun:hasAmmo() then<<newline>>""        if ShootTimer.checkGun(gun) then<<newline>>""            gun:consumeAmmo()<<newline>>""            local bullet = gun:addBullet()<<newline>>""            bullet.damage = math.floor(150 + math.random() * 40)<<newline>>""            bullet:addTrailParticle(\"RocketSmokeParticle\", Vec2.new(0.0, -8.0), 4.0, {})<<newline>>""            bullet.moveSpeed = 100<<newline>>""            bullet.radius = 6<<newline>>""            bullet.data.moveAngle = bullet.moveAngle<<newline>>""            bullet.data.moveSpeed = bullet.moveSpeed<<newline>>""            bullet.data.lateralSpeedDir = player.moveVelocity - (player.moveDir * player.moveVelocity:dot(player.aimDir))<<newline>>""            bullet.data.lateralSpeed = bullet.data.lateralSpeedDir:safeNormalize() * 0.3<<newline>>""            bullet.lifeTime = 2.5<<newline>>""            bullet.meshRotation = bullet.moveAngle<<newline>>""            bullet.data.killCount = 0<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""function RocketLauncher.onBulletHit(gun, bullet, monster)<<newline>>""<<newline>>""    local minD = math.floor(70 * player.damageMultiplier:getBuffedValue() )<<newline>>""    local maxD = math.floor(130 * player.damageMultiplier:getBuffedValue() )<<newline>>""    <<newline>>""    if gun.data.checkAchievement then<<newline>>""        local killCount = 0<<newline>>""        if  monster ~= nil and monster.isDead then<<newline>>""            killCount = killCount + 1<<newline>>""        end<<newline>>""        addExplosion(bullet.position, 80.0, 180.0, minD, maxD, 0.0, false, function(monster)<<newline>>""            if  monster ~= nil and monster.isDead then<<newline>>""                killCount = killCount + 1<<newline>>""                <<newline>>""                if gun.data.checkAchievement then<<newline>>""                    if hasAchievement( \"ACH_ROCKET_LAUNCHER\" ) or player.isDead or missionData.isSurvival ~= true then<<newline>>""                        gun.data.checkAchievement = false<<newline>>""                        return<<newline>>""                    end<<newline>>""                    if killCount >= 4 then<<newline>>""                        killCount = -100<<newline>>""                        gun.data.achievementProcess = gun.data.achievementProcess + 1<<newline>>""                        <<newline>>""                        if gun.data.achievementProcess  >= 30 then<<newline>>""                            addAchievement( \"ACH_ROCKET_LAUNCHER\" )<<newline>>""                            gun.data.checkAchievement = false<<newline>>""                        end<<newline>>""                    end<<newline>>""                end<<newline>>""                <<newline>>""            end<<newline>>""        end)<<newline>>""    else<<newline>>""        addExplosion(bullet.position, 80.0, 180.0, minD, maxD)<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""function RocketLauncher.onBulletTick(gun, bullet)<<newline>>""    local data = bullet.data<<newline>>""    <<newline>>""    data.moveSpeed = data.moveSpeed + dt * 250<<newline>>""    if data.moveSpeed > 250.0 then<<newline>>""        data.moveSpeed = 250.0<<newline>>""    end<<newline>>""    <<newline>>""    data.lateralSpeed = data.lateralSpeed - dt * 0.5<<newline>>""    <<newline>>""    if data.lateralSpeed < 0.0 then<<newline>>""        data.lateralSpeed = 0.0<<newline>>""    end<<newline>>""    <<newline>>""    local defaultSpeed = Vec2.fromAngle(data.moveAngle) * data.moveSpeed<<newline>>""    <<newline>>""    local finalSpeed = defaultSpeed + data.lateralSpeedDir * data.lateralSpeed<<newline>>""    <<newline>>""    bullet.moveSpeed = finalSpeed:length()<<newline>>""    bullet.moveAngle = finalSpeed:getAngle()<<newline>>""    <<newline>>""end<<newline>>"""}, 
{"resources/guns/shotgun/data.json", "{<<newline>>""  \"type\" : \"gun\",<<newline>>""  \"name\": \"Shotgun\",<<newline>>""  \"icon\" : \"icon.png\",<<newline>>""  \"bulletTexture\" : \"bullet.png\",<<newline>>""  \"bulletSize\" : [6.0, 6.0],<<newline>>""  \"bulletMeshShift\" : [0.0, 0.0],<<newline>>""  \"bulletRadius\" : 2.0,<<newline>>""  \"bulletSpeed\" : 850.0,<<newline>>""  \"bulletDamage\" : [20, 35],<<newline>>""  <<newline>>""  \"bulletLifeTime\" : 0.70,<<newline>>""  <<newline>>""  \"maxAmmo\" : 6,<<newline>>""  \"reloadTime\" : 1.9,<<newline>>""  <<newline>>""  <<newline>>""  \"firingSound\" : {<<newline>>""    \"path\" : \"shotgun.ogg\",<<newline>>""    \"volume\" : 0.85<<newline>>""  },<<newline>>""  <<newline>>""  \"hideSpread\" : true,<<newline>>""  <<newline>>""  \"scriptFile\" : \"shotgun.lua\",<<newline>>""  \"scriptName\" : \"Shotgun\"<<newline>>""}"}, 
{"resources/guns/shotgun/shotgun.lua", "<<newline>>""function Shotgun.init(gun)<<newline>>""    gun.spreadAngle = 0.25<<newline>>""    gun.crosshairDistance = 350.0<<newline>>""    ShootTimer.initGun(gun, 1.05)<<newline>>""    <<newline>>""    gun.data.checkAchievement = true<<newline>>""    gun.data.achievementProcess = 0<<newline>>""end<<newline>>""<<newline>>""<<newline>>""function Shotgun.onTick(gun)<<newline>>""    if gun.isTriggered and gun:hasAmmo() then<<newline>>""        if ShootTimer.checkGun(gun) then<<newline>>""            gun:consumeAmmo()<<newline>>""            local killCount = { c = 0}<<newline>>""            for i = 1, 10 do<<newline>>""                local bullet = gun:addBullet()<<newline>>""                bullet:addTrailParticle(\"BulletTrailParticle\", Vec2.new(0.0, 14.0), 15.0, {initialScale = 2.5, fadeOutSpeed = 1.6})<<newline>>""                bullet.moveSpeed = bullet.moveSpeed * (math.random() * 0.4 + 0.6)<<newline>>""                bullet.data.killCount = killCount<<newline>>""            end<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""<<newline>>""<<newline>>""function Shotgun.onBulletHit(gun, bullet, monster)<<newline>>""    local data = gun.data<<newline>>""    if data.checkAchievement then<<newline>>""        if hasAchievement( \"ACH_SHOTGUN\" ) or player.isDead or missionData.isSurvival ~= true then<<newline>>""            data.checkAchievement = false<<newline>>""            return<<newline>>""        end<<newline>>""            <<newline>>""        if  monster ~= nil and monster.isDead == true then<<newline>>""            bullet.data.killCount.c = bullet.data.killCount.c + 1<<newline>>""            if bullet.data.killCount.c == 3 then<<newline>>""                data.achievementProcess = data.achievementProcess + 1<<newline>>""                if data.achievementProcess >= 20 then<<newline>>""                    addAchievement( \"ACH_SHOTGUN\" ) <<newline>>""                    data.checkAchievement = false<<newline>>""                end<<newline>>""             end<<newline>>""        end<<newline>>""    end<<newline>>"" end<<newline>>""<<newline>>"""}, 
{"resources/guns/shrinkgun/data.json", "{<<newline>>""  \"type\" : \"gun\",<<newline>>""  \"name\": \"Shrink Gun\",<<newline>>""  \"icon\" : \"icon.png\",<<newline>>""  \"bulletTexture\" : \"bullet.png\",<<newline>>""  \"bulletSize\" : [8.0, 8.0],<<newline>>""  \"bulletMeshShift\" : [0.0, 0.0],<<newline>>""  \"bulletRadius\" : 12.0,<<newline>>""  \"bulletSpeed\" : 450.0,<<newline>>""  \"bulletDamage\" : [0, 0],<<newline>>""  <<newline>>""  \"maxAmmo\" : 16,<<newline>>""  \"reloadTime\" : 1.8,<<newline>>""  <<newline>>""  \"showShootAnimation\" : false,<<newline>>""  <<newline>>""  \"firingSound\" : {<<newline>>""    \"path\" : \"shrink_shoot.ogg\",<<newline>>""    \"volume\" : 0.6<<newline>>""  },<<newline>>""  <<newline>>""  \"scriptFile\" : \"shrinkgun.lua\",<<newline>>""  \"scriptName\" : \"ShrinkGun\"<<newline>>""}"}, 
{"resources/guns/shrinkgun/shrinkgun.lua", "<<newline>>""function ShrinkGun.init(gun)<<newline>>""    gun.spreadAngle = 0.0<<newline>>""    gun.crosshairDistance = 700.0<<newline>>""    ShootTimer.initGun(gun, 0.45)<<newline>>""    <<newline>>""    SpreadHelper.initGun(gun)<<newline>>""    gun.data.minSpread = 0.0<<newline>>""    gun.data.maxSpread = 0.1<<newline>>""    gun.data.spreadDecreaseSpeed = 0.25<<newline>>""    gun.data.spreadIncreasePerShoot = 0.025<<newline>>""    <<newline>>""    gun.data.checkAchievement = true<<newline>>""    gun.data.achievementProcess = 0<<newline>>""end<<newline>>""<<newline>>""<<newline>>""function ShrinkGun.onTick(gun)<<newline>>""    SpreadHelper.onTick(gun)<<newline>>""    if gun.isTriggered and gun:hasAmmo() then<<newline>>""        if ShootTimer.checkGun(gun) then<<newline>>""            gun:consumeAmmo()<<newline>>""            SpreadHelper.onShoot(gun)<<newline>>""            local bullet = gun:addBullet()<<newline>>""            bullet:addTrailParticle(\"CriticalParticle\", Vec2.new(0.0, 0.0), 15.0, {})<<newline>>""            <<newline>>""            local r = math.random()<<newline>>""            local g = math.random()<<newline>>""            local b = math.random()<<newline>>""            local ra = math.random()<<newline>>""            if ra < 0.333 then<<newline>>""                r = 1.0<<newline>>""            elseif ra < 0.666 then<<newline>>""                g = 1.0<<newline>>""            else<<newline>>""                b = 1.0<<newline>>""            end<<newline>>""<<newline>>""            bullet:setColor(Vec4:new(r, g, b, 1.0))<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""<<newline>>""<<newline>>""function ShrinkGun.onBulletHit(gun, bullet, monster)<<newline>>""    local data = gun.data<<newline>>""    if monster ~= nil and monster.canGetOneShooted == true then<<newline>>""        monster:setScale(monster.scale * 0.7)<<newline>>""        <<newline>>""        local particleCount = 10<<newline>>""        if monster.scale < 0.4 then<<newline>>""            particleCount = 20<<newline>>""            monster:killSelf()<<newline>>""            playSound({path = ShrinkGun.basePath .. \"shrink_kill.ogg\", volume = 0.6})<<newline>>""        else<<newline>>""        <<newline>>""            playSound({path = ShrinkGun.basePath .. \"shrink_hit.ogg\", volume = 0.3})<<newline>>""        end<<newline>>""        <<newline>>""        if monster.data.shrinkParticle == nil then<<newline>>""            monster.data.shrinkParticle = monster:addParticleSpawner(\"CriticalParticle\", {});<<newline>>""        end<<newline>>""        for i=1,particleCount do<<newline>>""            monster:spawnParticle(monster.data.shrinkParticle, {initialScale = 15.0, moveSpeed = 150.0})<<newline>>""        end<<newline>>""    end<<newline>>""    <<newline>>""    if data.checkAchievement then<<newline>>""        if hasAchievement( \"ACH_SHRINK_GUN\" ) or player.isDead or missionData.isSurvival ~= true then<<newline>>""            data.checkAchievement = false<<newline>>""            return<<newline>>""        end<<newline>>""        if monster ~= nil and monster.data.isBoss == true and monster.isDead == true then<<newline>>""            data.achievementProcess = data.achievementProcess + 1<<newline>>""            if data.achievementProcess >= 10 then<<newline>>""                addAchievement( \"ACH_SHRINK_GUN\" ) <<newline>>""                data.checkAchievement = false<<newline>>""            end<<newline>>""        end<<newline>>""    end<<newline>>""    <<newline>>""end"}, 
{"resources/guns/splitgun/data.json", "{<<newline>>""  \"type\" : \"gun\",<<newline>>""  \"name\": \"Split Gun\",<<newline>>""  \"icon\" : \"icon.png\",<<newline>>""  \"bulletTexture\" : \"bullet.png\",<<newline>>""  \"bulletSize\" : [8.0, 8.0],<<newline>>""  \"bulletMeshShift\" : [0.0, 0.0],<<newline>>""  \"bulletRadius\" : 2.0,<<newline>>""  \"bulletSpeed\" : 550.0,<<newline>>""  \"bulletDamage\" : [30, 50],<<newline>>""  <<newline>>""  \"maxAmmo\" : 8,<<newline>>""  \"reloadTime\" : 1.6,<<newline>>""  <<newline>>""  \"scriptFile\" : \"splitgun.lua\",<<newline>>""  \"scriptName\" : \"SplitGun\"<<newline>>""}"}, 
{"resources/guns/splitgun/splitgun.lua", "<<newline>>""function SplitGun.init(gun)<<newline>>""    gun.spreadAngle = 0.0<<newline>>""    gun.crosshairDistance = 400.0<<newline>>""    ShootTimer.initGun(gun, 0.45)<<newline>>""    <<newline>>""    SpreadHelper.initGun(gun)<<newline>>""    gun.data.minSpread = 0.02<<newline>>""    gun.data.maxSpread = 0.10<<newline>>""    gun.data.spreadDecreaseSpeed = 0.25<<newline>>""    gun.data.spreadIncreasePerShoot = 0.025<<newline>>""    <<newline>>""    gun.data.checkAchievement = true<<newline>>""    gun.data.achievementProcess = 0<<newline>>""end<<newline>>""<<newline>>""<<newline>>""function SplitGun.onTick(gun)<<newline>>""    SpreadHelper.onTick(gun)<<newline>>""    if gun.isTriggered and gun:hasAmmo() then<<newline>>""        if ShootTimer.checkGun(gun) then<<newline>>""            gun:consumeAmmo()<<newline>>""            SpreadHelper.onShoot(gun)<<newline>>""            local bullet = gun:addBullet()<<newline>>""            bullet:addTrailParticle(\"BulletTrailParticle\", Vec2.new(0.0, 14.0), 15.0, {initialScale = 2.0, fadeOutSpeed = 1.2})<<newline>>""            bullet.data.remainingSplit = 2<<newline>>""            playSound({path = SplitGun.basePath .. \"split_gun.ogg\"})<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""<<newline>>""function SplitGun.onReloadEnd(gun)<<newline>>""    if gun.data.checkAchievement then<<newline>>""        gun.data.achievementHitCount = {}<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""function SplitGun.onBulletHit(gun, bullet, monster)<<newline>>""    local data = gun.data<<newline>>""    if monster ~= nil then<<newline>>""        if data.splitID ~= nil then<<newline>>""            monster:addIgnoreId(data.splitID)<<newline>>""        end<<newline>>""        if bullet.data.remainingSplit > 0 then<<newline>>""            local newBullet = gun:addBullet()<<newline>>""            local particle = newBullet:addTrailParticle(\"BulletTrailParticle\", Vec2.new(0.0, 14.0), 15.0, { doNotShare = true })<<newline>>""            particle.args.initialScale = 2.0<<newline>>""            particle.args.fadeOutSpeed = 1.2<<newline>>""            particle.args.startFadeinSpeed = 10000.0<<newline>>""            newBullet.position = bullet.position<<newline>>""            newBullet.moveAngle = bullet.moveAngle - math.pi * 0.1<<newline>>""            newBullet.data.remainingSplit = bullet.data.remainingSplit - 1<<newline>>""            monster:addIgnoreId(newBullet.id)<<newline>>""            newBullet.damage = math.floor( bullet.damage * 0.6 )<<newline>>""            newBullet.data.splitHit = {}<<newline>>""            newBullet.lifeTime = 0.6 - ( 1 - newBullet.data.remainingSplit ) * 0.3<<newline>>""            local prevBullet = newBullet<<newline>>""            <<newline>>""            newBullet = gun:addBullet()<<newline>>""            particle = newBullet:addTrailParticle(\"BulletTrailParticle\", Vec2.new(0.0, 14.0), 15.0, { doNotShare = true })<<newline>>""            particle.args.initialScale = 2.0<<newline>>""            particle.args.fadeOutSpeed = 1.2<<newline>>""            particle.args.startFadeinSpeed = 10000.0<<newline>>""            newBullet.position = bullet.position<<newline>>""            newBullet.moveAngle = bullet.moveAngle + math.pi * 0.1<<newline>>""            newBullet.data.remainingSplit = bullet.data.remainingSplit - 1<<newline>>""            monster:addIgnoreId(newBullet.id)<<newline>>""            newBullet.damage = math.floor( bullet.damage * 0.6 )<<newline>>""            newBullet.data.splitHit = prevBullet.data.splitHit<<newline>>""            newBullet.lifeTime = 0.6 - ( 1 - newBullet.data.remainingSplit ) * 0.3<<newline>>""            <<newline>>""            newBullet.data.splitID = prevBullet.data.id<<newline>>""            prevBullet.data.splitID = newBullet.data.id<<newline>>""            <<newline>>""            playSound({path = SplitGun.basePath .. \"split_gun.ogg\", position = bullet.position, volume = 0.5})<<newline>>""        end<<newline>>""    end<<newline>>""    <<newline>>""    <<newline>>""    if data.checkAchievement then<<newline>>""        if hasAchievement( \"ACH_SPLIT_GUN\" ) or player.isDead or missionData.isSurvival ~= true then<<newline>>""            data.checkAchievement = false<<newline>>""            return<<newline>>""        end<<newline>>""        if monster ~= nil and bullet.data.splitHit ~= nil and monster.isDead then<<newline>>""        <<newline>>""            if  bullet.data.splitHit[0] == nil then<<newline>>""                bullet.data.splitHit[0] = true<<newline>>""            else<<newline>>""                data.achievementProcess = data.achievementProcess + 1<<newline>>""                if data.achievementProcess >= 15 then<<newline>>""                    addAchievement( \"ACH_SPLIT_GUN\" ) <<newline>>""                    data.checkAchievement = false<<newline>>""                end<<newline>>""            end<<newline>>""            bullet.data.splitHit = nil<<newline>>""        end<<newline>>""    end<<newline>>""    <<newline>>""end"}, 
{"resources/guns/uzi/data.json", "{<<newline>>""  \"type\" : \"gun\",<<newline>>""  \"name\": \"Uzi\",<<newline>>""  \"icon\" : \"icon.png\",<<newline>>""  \"bulletTexture\" : \"bullet.png\",<<newline>>""  \"bulletSize\" : [6.0, 6.0],<<newline>>""  \"bulletMeshShift\" : [0.0, 0.0],<<newline>>""  \"bulletRadius\" : 2.0,<<newline>>""  \"bulletSpeed\" : 750.0,<<newline>>""  \"bulletDamage\" : [15, 25],<<newline>>""  <<newline>>""  \"maxAmmo\" : 32,<<newline>>""  \"reloadTime\" : 2.2,<<newline>>""  <<newline>>""  \"maxSoundPlayInterval\" : 0.0,<<newline>>""  <<newline>>""  \"firingSound\" : {<<newline>>""    \"path\" : \"uzi.ogg\",<<newline>>""    \"volume\" : 0.60<<newline>>""  },<<newline>>""  <<newline>>""  \"scriptFile\" : \"uzi.lua\",<<newline>>""  \"scriptName\" : \"Uzi\"<<newline>>""}"}, 
{"resources/guns/uzi/uzi.lua", "<<newline>>""function Uzi.init(gun)<<newline>>""    gun.spreadAngle = 0.15<<newline>>""    gun.crosshairDistance = 550.0<<newline>>""    ShootTimer.initGun(gun, 0.04)<<newline>>""end<<newline>>""<<newline>>""<<newline>>""function Uzi.onTick(gun)<<newline>>""    if gun.isTriggered and gun:hasAmmo() then<<newline>>""        if ShootTimer.checkGun(gun) then<<newline>>""            gun:consumeAmmo()<<newline>>""            local bullet = gun:addBullet()<<newline>>""            bullet.onDamageArgs.customSlowdownAmount = 4.0<<newline>>""            bullet.onDamageArgs.slowdownOnly = true<<newline>>""            bullet.lifeTime = 0.5 + math.random() * 0.1<<newline>>""            <<newline>>""            bullet:addTrailParticle(\"BulletTrailParticle\", Vec2.new(0.0, 10.0), 15.0, { color =  Vec3.new(0.9, 0.8, 0.3), initialScale = 1.5, fadeOutSpeed = 1.8})<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>"""}, 
{"resources/missions/narsie_fight/data.json", "{<<newline>>""  \"type\": \"mission\",<<newline>>""  \"name\": \"Rise of Nar-Sie\",<<newline>>""  \"description\": \" NAR-SIE HAS RISEN<<escapednewline>>""Some cults have managed to tear the reality and summon Nar-Sie, can you beat a god?\",<<newline>>""  <<newline>>""  \"icon\": \"icon.png\",<<newline>>""  <<newline>>""  \"scriptFile\" : \"boss.lua\",<<newline>>""  \"scriptName\" : \"NarSieFight\"<<newline>>""}"}, 
{"resources/missions/narsie_fight/boss.lua", "<<newline>>""function NarSieFight.init()<<newline>>""    local theSeed = os.time()<<newline>>""    math.randomseed( theSeed )<<newline>>""    missionData = {}<<newline>>""    debugInit(missionData)<<newline>>""    missionInit(missionData)<<newline>>""    missionData.perkPerLevel = 4<<newline>>""    missionData.startTime = time<<newline>>""    missionData.firstTick = true<<newline>>""    missionData.levelUpBonusChance = 1.0<<newline>>""    <<newline>>""    local mapSize = getMapSize()<<newline>>""    local colliderCount = math.floor((mapSize.x * mapSize.y) / 300000 + 20 )<<newline>>""    addRandomColliders(colliderCount, 400.0)<<newline>>""end<<newline>>""<<newline>>""function NarSieFight.onTick()<<newline>>""    min = missionTime / 60.0 + missionData.extraMin<<newline>>""<<newline>>""    if player.isDead then<<newline>>""        if isKeyPressed(keys.Space) then<<newline>>""            loadMission(\"NarSieFight\")<<newline>>""        end<<newline>>""        <<newline>>""        return<<newline>>""    end<<newline>>""<<newline>>""    if missionData.firstTick == true then<<newline>>""        local m = addMonster(\"NarSie\")<<newline>>""        missionData.narsie = m<<newline>>""        <<newline>>""        m.position = player.position + Vec2.new(0.0, 200.0)<<newline>>""        <<newline>>""        missionData.health = addGameObject(\"HealthBar\")<<newline>>""        <<newline>>""        missionData.maxHitPoint = m.hitPoint<<newline>>""        missionData.spawnTimer = 0.0<<newline>>""        calcRandomSpawns()<<newline>>""        local spawn = 50<<newline>>""        <<newline>>""        local rateMult = 1.0 + (getMapSize().x - 3000.0) / 3000.0<<newline>>""        spawn = math.floor(rateMult * spawn)<<newline>>""        <<newline>>""        for i = 1, spawn do<<newline>>""            NarSieFight.addMonster()<<newline>>""        end<<newline>>""        <<newline>>""        local guns = {}<<newline>>""        for i= -2,2 do<<newline>>""            while true do<<newline>>""                local g = getRandomGun()<<newline>>""                if guns[g.scriptName] ~= true then<<newline>>""                    guns[g.scriptName]  = true<<newline>>""                    spawnGun(player.position + Vec2.fromAngle(-math.pi * 0.5 + 0.7 * i) * 170.0, g.scriptName)<<newline>>""                    break<<newline>>""                end<<newline>>""            end<<newline>>""        end<<newline>>""    end<<newline>>""    <<newline>>""    if missionData.narsie ~= nil then<<newline>>""        missionData.spawnTimer = missionData.spawnTimer - dt<<newline>>""        <<newline>>""        if missionData.spawnTimer < 0.0 then<<newline>>""            local rateMult = 1.0 + (getMapSize().x - 3000.0) / 5000.0<<newline>>""            missionData.spawnTimer = 1.5 / rateMult<<newline>>""            NarSieFight.addMonster()<<newline>>""        end<<newline>>""        <<newline>>""        HealthBar.updateBar(missionData.health, missionData.narsie.hitPoint / missionData.maxHitPoint)<<newline>>""        missionData.firstTick = false<<newline>>""    end<<newline>>""    gameResetTick()<<newline>>""end<<newline>>""<<newline>>""function NarSieFight.onNarSieKilled(monster)<<newline>>""    missionData.health.toBeRemoved = true<<newline>>""    missionData.health = nil<<newline>>""    missionData.narsie = nil<<newline>>""    <<newline>>""    local count = getMonsterCount()<<newline>>""    for i = 0, count - 1 do<<newline>>""        local monster = getMonsterAtIndex(i)<<newline>>""        monster.experienceMultiplier = 0.0<<newline>>""        monster.scoreMultiplier = 0.0<<newline>>""        monster:doDamage(10000, Vec2.randDir())<<newline>>""    end<<newline>>""    <<newline>>""    showGameReset(\"You're<<escapednewline>>""Winner !\")<<newline>>""end<<newline>>""<<newline>>""<<newline>>""function NarSieFight.addMonster()<<newline>>""    local pos = getRandomPosition( {canBeEdge=true, notNearPlayer=true, notNearMonsters=true, playerRange=800.0})<<newline>>""    local monster = addRandomMonster(nil, true, true)<<newline>>""    <<newline>>""    monster.experienceMultiplier = monster.experienceMultiplier * 2<<newline>>""    monster.data.shootsBullets = false<<newline>>""    monster.position = pos<<newline>>""    monster.moveAngle =  math.random() * math.pi * 2.0<<newline>>""    monster.data.randomMove = true<<newline>>""    monster.data.maxMoveSpeed = monster.data.maxMoveSpeed * 0.5<<newline>>""    monster:setScale(0.7)<<newline>>""    monster.data.playerSeeRange = monster.data.playerSeeRange * 0.3<<newline>>""    monster.colorMultiplier:addBuff(Vec4.new(0.5, 0.5, 0.5, 1.0))<<newline>>""end<<newline>>""function NarSieFight.onPlayerDied()<<newline>>""    showGameReset()<<newline>>""end<<newline>>""<<newline>>""function NarSieFight.onMonsterDied(monster)<<newline>>""end<<newline>>""<<newline>>""function NarSieFight.onDebugTick()<<newline>>""    debugTick(missionData)<<newline>>""end<<newline>>""<<newline>>""<<newline>>""HealthBar = {}<<newline>>""<<newline>>""function HealthBar.init(gameObject)<<newline>>""    gameObject:setLevel(RenderableLevel.GUI + 5)<<newline>>""    <<newline>>""    gameObject.data.barBG = gameObject:addTexture(missionPath .. \"bar_bg.png\", \"~/resources/default\")<<newline>>""    gameObject.data.barBG:setAlignment(RenderableAlignment.bottom)<<newline>>""    gameObject.data.barBG:setWorldMatrix(Mat3.fromScale(286.0, 24.0))<<newline>>""    <<newline>>""    <<newline>>""    gameObject.data.bar = gameObject:addTexture(missionPath .. \"bar.png\", missionPath .. \"bar\")<<newline>>""    gameObject.data.bar:setAlignment(RenderableAlignment.bottom)<<newline>>""    gameObject.data.bar:setWorldMatrix(Mat3.fromScale(286.0, 24.0))<<newline>>""    gameObject.data.bar:setColor(Vec4.fromColor(0x44FFFFFF))<<newline>>""    <<newline>>""    gameObject.data.barFG = gameObject:addTexture(missionPath .. \"bar_fg.png\", \"~/resources/default\")<<newline>>""    gameObject.data.barFG:setAlignment(RenderableAlignment.bottom)<<newline>>""    gameObject.data.barFG:setWorldMatrix(Mat3.fromScale(300.0, 40.0))<<newline>>""    <<newline>>""    gameObject:setPosition(Vec2.new(0, 40))<<newline>>""    <<newline>>""    HealthBar.updateBar(gameObject, 1.0)<<newline>>""    HealthBar.repositionGUI(gameObject)<<newline>>""end<<newline>>""<<newline>>""function HealthBar.repositionGUI(gameObject, size)<<newline>>""    gameObject:setPosition(Vec2.new(0, 60 / getCameraZoom()))<<newline>>""    gameObject:setScale(Vec2.new(0.5 / getCameraZoom(), 0.5 / getCameraZoom()))<<newline>>""end<<newline>>""<<newline>>""<<newline>>""function HealthBar.updateBar(gameObject, scale)<<newline>>""    gameObject.data.bar:setUniformFloat(\"uScale\", scale)<<newline>>""end"}, 
{"resources/missions/narsie_fight/narsie/data.json", "{<<newline>>""  \"type\" : \"monster\",<<newline>>""  \"name\": \"Nar-Sie\",<<newline>>""  \"hitPoint\": 66666,<<newline>>""  \"size\" : [80.0, 80.0],<<newline>>""  \"textureShift\" : [0.0, -10.0],<<newline>>""  \"bulletRadius\" : 40.0,<<newline>>""  \"collisionRadius\" : 40.0,<<newline>>""  \"hasBlood\" : true,<<newline>>""  <<newline>>""  \"experience\" : 0,<<newline>>""  \"score\" : 0,<<newline>>""  <<newline>>""  \"animations\" : <<newline>>""  {<<newline>>""    \"stand\" : <<newline>>""    {<<newline>>""        \"looped\" : true,<<newline>>""        \"frameDuration\" : 0.12,<<newline>>""        \"frames\":<<newline>>""        [<<newline>>""            \"body_base.png\"<<newline>>""        ]<<newline>>""    },<<newline>>""    <<newline>>""    \"inhale\" : <<newline>>""    {<<newline>>""        \"looped\" : false,<<newline>>""        \"frameDuration\" : 0.15,<<newline>>""        \"frames\":<<newline>>""        [<<newline>>""            \"body_0.png\",<<newline>>""            \"body_1.png\",<<newline>>""            \"body_2.png\",<<newline>>""            \"body_3.png\",<<newline>>""            \"body_4.png\",<<newline>>""            \"body_5.png\",<<newline>>""            \"body_6.png\",<<newline>>""            \"body_7.png\"<<newline>>""        ]<<newline>>""    }<<newline>>""  },<<newline>>""  <<newline>>""  \"scriptFile\" : \"narsie.lua\",<<newline>>""  \"scriptName\" : \"NarSie\",<<newline>>""  <<newline>>""  \"hitSounds\" : [<<newline>>""    \"~/resources/sounds/monster_hit/hit_0.ogg\", <<newline>>""    \"~/resources/sounds/monster_hit/hit_1.ogg\", <<newline>>""    \"~/resources/sounds/monster_hit/hit_2.ogg\"<<newline>>""  ],<<newline>>""  <<newline>>""  \"killSounds\" : [<<newline>>""    \"~/resources/sounds/monster_hit/hit_0.ogg\", <<newline>>""    \"~/resources/sounds/monster_hit/hit_1.ogg\", <<newline>>""    \"~/resources/sounds/monster_hit/hit_2.ogg\"<<newline>>""  ]<<newline>>""}"}, 
{"resources/missions/narsie_fight/narsie/narsie.lua", "<<newline>>""function NarSie.init(monster, min)<<newline>>""    data = monster.data<<newline>>""<<newline>>""    monster.moveSpeed = 0.0<<newline>>""    monster.moveAngle = 0.0<<newline>>""    monster.spriteAngle = math.pi * -0.5<<newline>>""    <<newline>>""    monster:playAnimation(\"stand\")<<newline>>""    <<newline>>""    monster:setDrawLevel(RenderableLevel.player + 20)<<newline>>""<<newline>>""    monster.knockbackResistance:addBuff(0.01)<<newline>>""    <<newline>>""    monster.canGetOneShooted = false<<newline>>""    monster.hasCollision = false<<newline>>""    <<newline>>""    data.inhaleTimer = 0.0<<newline>>""    data.currentAttack = nil<<newline>>""    data.currentAttackTimer = 8.0<<newline>>""    <<newline>>""    data.diff = 0.0<<newline>>""    <<newline>>""    NarSie.resetTarget(monster)<<newline>>""    data.attacks = { NarSie.ringBullets, NarSie.arcBullets, NarSie.fireballs, NarSie.spawnSpiders, NarSie.explosions, NarSie.explosionsAroundPlayer }<<newline>>""    <<newline>>""    --data.attacks = { NarSie.fireballs2 }<<newline>>""    --data.currentAttackTimer = 0.0<<newline>>""    <<newline>>""    data.timeToNextHit = 0.0<<newline>>""    data.defaultShootTimer = 2.0<<newline>>""    <<newline>>""    data.startTime = time<<newline>>""    data.firstTick = true<<newline>>""    data.pulling = false<<newline>>""    data.pullTimer = 0.0<<newline>>""    data.damageAmount = 0.0<<newline>>""    monster.removeOnDead = false<<newline>>""    monster:setVisible(false)<<newline>>""    <<newline>>""    addCustomOnHit(monster, NarSie.onCustomHit)<<newline>>""end<<newline>>""<<newline>>""function NarSie.spawnChanceInMission(missionData, min)<<newline>>""    return 0.0<<newline>>""end<<newline>>""<<newline>>""function NarSie.onCustomHit(monster, damage, dir, args)<<newline>>""    local data = monster.data<<newline>>""    data.damageAmount = data.damageAmount + damage<<newline>>""    local maxDamage = 500<<newline>>""    if data.damageAmount > maxDamage then<<newline>>""        damage = damage - (data.damageAmount - maxDamage)<<newline>>""        data.damageAmount = maxDamage<<newline>>""    end<<newline>>""    if data.spawning then<<newline>>""        return 0<<newline>>""    end<<newline>>""    addScore(math.floor(damage / 10))<<newline>>""    return damage<<newline>>""end<<newline>>""<<newline>>""function NarSie.onKilled(monster)<<newline>>""    NarSieFight.onNarSieKilled(monster)<<newline>>""    monster.data.deathTimer = time<<newline>>""    <<newline>>""    playSound({path = missionPath .. \"narsie/laugh.ogg\", position = monster.position, volume = 1.1})<<newline>>""    <<newline>>""    if hasAchievement( \"ACH_NAR_SIE\" ) == false and player.isDead == false then<<newline>>""        addAchievement( \"ACH_NAR_SIE\" ) <<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""function NarSie.onTick(monster)<<newline>>""    data = monster.data<<newline>>""    data.damageAmount = data.damageAmount - dt * 600<<newline>>""    if data.damageAmount < 0.0 then<<newline>>""        data.damageAmount = 0.0<<newline>>""    end<<newline>>""    if data.firstTick == true then<<newline>>""        data.firstTick = false<<newline>>""        <<newline>>""        data.blackHole = addPostProcess(\"resources/post_process/blackhole.ps\")<<newline>>""        data.blackHole:setEnabled(true)<<newline>>""        <<newline>>""        playSound({path = BlackHole.basePath .. \"black_hole.ogg\", position = monster.position, volume = 0.8})<<newline>>""        data.spawning = true<<newline>>""    end<<newline>>""    <<newline>>""    if data.spawning then<<newline>>""        local t = (time - data.startTime) * 1.5<<newline>>""    <<newline>>""        local v = convertToScreenPosition(monster.position)<<newline>>""        data.blackHole:addUniformVec2(\"uRelBlackHolePos\", v)<<newline>>""        <<newline>>""        local size = 0.8<<newline>>""        if t < 1.0 then<<newline>>""            data.blackHole:setShaderWeight(t * size)<<newline>>""        elseif t < 8.0 then<<newline>>""            if data.soundPlayed == nil and t > 1.2 then<<newline>>""                data.soundPlayed = true<<newline>>""                playSound({path = missionPath .. \"narsie/spawn.ogg\", position = monster.position, volume = 1.5})<<newline>>""            end<<newline>>""            data.blackHole:setShaderWeight(size)<<newline>>""        elseif t < 9.0 then<<newline>>""            if monster:isVisible() == false then<<newline>>""                monster:setVisible(true)<<newline>>""            end<<newline>>""            data.blackHole:setShaderWeight((9.0 - t) * size)<<newline>>""            local scale = (t - 8.0) * 2.0 + 0.2<<newline>>""            if scale > 1.0 then<<newline>>""                scale = 1.0<<newline>>""            end<<newline>>""            monster:setScale(scale)<<newline>>""        else<<newline>>""            monster:setScale(1.0)<<newline>>""            data.blackHole:setEnabled(false)<<newline>>""            data.spawning = false<<newline>>""        end<<newline>>""        return<<newline>>""    end<<newline>>""    <<newline>>""    if data.deathTimer ~= nil then<<newline>>""        t = (time - data.deathTimer) * 1.5 <<newline>>""        if data.blackHole:isEnabled() == false then<<newline>>""            data.blackHole:setEnabled(true)<<newline>>""        end<<newline>>""        <<newline>>""        local v = convertToScreenPosition(monster.position)<<newline>>""        data.blackHole:addUniformVec2(\"uRelBlackHolePos\", v)<<newline>>""        <<newline>>""        local size = 0.8<<newline>>""        if t < 1.0 then<<newline>>""            data.blackHole:setShaderWeight(t * size)<<newline>>""        elseif t < 1.2 then<<newline>>""            data.blackHole:setShaderWeight(size)<<newline>>""            monster:setScale(1.02- t)<<newline>>""        elseif t < 2.2 then<<newline>>""            monster:setVisible(false)<<newline>>""            data.blackHole:setShaderWeight((2.2 - t) * size)<<newline>>""        else<<newline>>""            monster.removeOnDead = true<<newline>>""        end<<newline>>""        return<<newline>>""    end<<newline>>""    <<newline>>""    local d = data.target:distanceSquared(monster.position)<<newline>>""    if d < 10000 then<<newline>>""        NarSie.resetTarget(monster)<<newline>>""    else<<newline>>""        local toTarget = data.target - monster.position<<newline>>""        local angle = toTarget:getAngle()<<newline>>""        monster.moveAngle = approachAngle(monster.moveAngle, angle, 3.0 * dt)<<newline>>""    end<<newline>>""    <<newline>>""    <<newline>>""    local diffToPlayer = player.position - monster.position<<newline>>""    local distanceToPlayer = diffToPlayer:length()<<newline>>""    <<newline>>""    <<newline>>""    if data.pulling then<<newline>>""        data.pullTimer = data.pullTimer - dt<<newline>>""        <<newline>>""        local m = data.pullTimer * 0.5<<newline>>""    <<newline>>""        m = m * distanceToPlayer / 400.0<<newline>>""            <<newline>>""        if m > 1.0 then<<newline>>""            m = 1.0<<newline>>""        end<<newline>>""        player:addKnockback(-diffToPlayer:normalized() * 700.0 * m, -1.0)<<newline>>""        <<newline>>""        if data.pullTimer < 0.0 then<<newline>>""            data.pulling = false<<newline>>""        end<<newline>>""    else<<newline>>""        local range = 800.0 - min * 30.0 <<newline>>""        if distanceToPlayer > range then<<newline>>""        <<newline>>""            data.pullTimer = data.pullTimer + dt * clamp((distanceToPlayer - range) / 50.0)<<newline>>""            <<newline>>""            local maxStay = 0.8<<newline>>""            local c = 1.0 - data.pullTimer / maxStay<<newline>>""            local buff = player.colorMultiplier:addBuffWithId(monster.id, Vec4.new(1.0, c, c, 1.0))<<newline>>""            player.colorMultiplier:setBuffDuration(buff, 0.1)<<newline>>""            player.colorMultiplier:setBuffFadeInFadeOut(buff, 0.0, 0.1)<<newline>>""            <<newline>>""            if data.pullTimer > maxStay then<<newline>>""                data.pulling = true<<newline>>""                data.pullTimer = 2.0<<newline>>""            end<<newline>>""        else<<newline>>""            data.pullTimer = 0.0<<newline>>""        end<<newline>>""    <<newline>>""    end<<newline>>""    <<newline>>""    if distanceToPlayer < 90 and data.timeToNextHit < time and player.isDead == false then<<newline>>""        local damage = player:doDamage(math.floor(15 + math.random() * 5), angleToPlayer)<<newline>>""        data.timeToNextHit = time + 1.0<<newline>>""        if damage > 0 then<<newline>>""            playSound({path = \"~/resources/sounds/melee_woosh.ogg\", volume = 0.3})<<newline>>""            if player.data.noSlowdownOnHit == nil then<<newline>>""                player.maxSpeed:addBuffWithId(MonsterMeleeHelper.slowBuffId, 0.5)<<newline>>""                player.maxSpeed:setBuffDuration(MonsterMeleeHelper.slowBuffId, 0.1)<<newline>>""                player.maxSpeed:setBuffFadeInFadeOut(MonsterMeleeHelper.slowBuffId, 0.1, 0.1)<<newline>>""            end<<newline>>""        end<<newline>>""        <<newline>>""        local t = MeleeHitImage.build(monster)<<newline>>""        <<newline>>""        t.data.renderable:setWorldMatrix(Mat3.fromScale(30.0, 30.0))<<newline>>""        t:setPosition(player.position)<<newline>>""        t:setRotation(-math.pi * 0.5 - diffToPlayer:getAngle())<<newline>>""    end<<newline>>""    <<newline>>""        <<newline>>""    data.inhaleTimer = data.inhaleTimer - dt<<newline>>""    <<newline>>""    if data.inhaleTimer < 0.0 then<<newline>>""        data.inhaleTimer = 1.0 + math.random() * 1.0<<newline>>""        monster:playAnimation(\"inhale\")<<newline>>""    end<<newline>>""    <<newline>>""    if data.currentAttack == nil then<<newline>>""        if monster.moveSpeed < 25.0 then<<newline>>""            monster.moveSpeed = monster.moveSpeed + dt * 4.0<<newline>>""            if monster.moveSpeed > 25.0 then<<newline>>""                monster.moveSpeed = 25.0<<newline>>""            end<<newline>>""        end<<newline>>""    <<newline>>""        data.currentAttackTimer = data.currentAttackTimer - dt<<newline>>""        if data.currentAttackTimer < 0.0 then<<newline>>""            data.currentAttack = data.attacks[ math.random( #data.attacks ) ]<<newline>>""            data.currentAttack(monster, true)<<newline>>""            data.currentAttackTimer = 10.0<<newline>>""            data.defaultShootTimer = 2.0<<newline>>""        end<<newline>>""        <<newline>>""        data.defaultShootTimer = data.defaultShootTimer - dt<<newline>>""        <<newline>>""        if data.defaultShootTimer < 0.0 and data.currentAttackTimer > 1.0 then<<newline>>""            data.defaultShootTimer = data.defaultShootTimer + lerp(1.2, 0.6, clamp(min /10.0))<<newline>>""            local b = NarSie.sendFireBall(monster)<<newline>>""            b.moveAngle = b.moveAngle + (math.random() * 0.5 - 0.25) * lerp(1.0, 0.3, clamp(min * 0.15))<<newline>>""            <<newline>>""        end<<newline>>""    else <<newline>>""        if monster.moveSpeed > 0.0 then<<newline>>""            monster.moveSpeed = monster.moveSpeed - dt * 4.0<<newline>>""            if monster.moveSpeed < 0.0 then<<newline>>""                monster.moveSpeed = 0.0<<newline>>""            end<<newline>>""        end<<newline>>""        data.currentAttack(monster, false)<<newline>>""    end<<newline>>""    <<newline>>""end<<newline>>""<<newline>>""function NarSie.resetTarget(monster)<<newline>>""    local t = math.random()<<newline>>""    <<newline>>""    monster.data.target = Vec2.randDir() * 300.0 * math.sqrt(t)<<newline>>""end<<newline>>""<<newline>>""function NarSie.explosionsAroundPlayer(monster, init)<<newline>>""    if init then<<newline>>""        data.expAroundPlayerData = {}<<newline>>""        local expAroundPlayerData = data.expAroundPlayerData<<newline>>""        expAroundPlayerData.timeToShoot = 0.0<<newline>>""        expAroundPlayerData.count = 30 + clamp(min * 3)<<newline>>""        expAroundPlayerData.interval = lerp(0.22, 0.15, clamp(min * 0.1))<<newline>>""    end<<newline>>""    <<newline>>""    local expAroundPlayerData = data.expAroundPlayerData<<newline>>""    <<newline>>""    expAroundPlayerData.timeToShoot = expAroundPlayerData.timeToShoot - dt<<newline>>""    <<newline>>""    if expAroundPlayerData.timeToShoot < 0.0 and expAroundPlayerData.count > 0 then<<newline>>""        expAroundPlayerData.timeToShoot = expAroundPlayerData.timeToShoot + expAroundPlayerData.interval<<newline>>""    <<newline>>""    <<newline>>""        local g = addGameObject(\"ExpAroundPlayerObject\")<<newline>>""        local t = math.random()<<newline>>""        g.data.pos = player.position + Vec2.randDir() * math.sqrt(t) * 200.0<<newline>>""        g.data.maxTime = 1.0<<newline>>""        expAroundPlayerData.count = expAroundPlayerData.count - 1<<newline>>""    end<<newline>>""    <<newline>>""    if expAroundPlayerData.count <= 0 and expAroundPlayerData.timeToShoot < -2.0 then<<newline>>""        data.currentAttack = nil<<newline>>""    end<<newline>>""end <<newline>>""<<newline>>""<<newline>>""ExpAroundPlayerObject = {}<<newline>>""<<newline>>""function ExpAroundPlayerObject.init(gameObject)<<newline>>""    gameObject:setLevel(RenderableLevel.player + 15)<<newline>>""    <<newline>>""    gameObject.data.ring = gameObject:addTexture(missionPath .. \"narsie/ring.png\", \"~/resources/default\")<<newline>>""    gameObject.data.ring:setAlignment(RenderableAlignment.world)<<newline>>""    gameObject.data.ring:setWorldMatrix(Mat3.fromScale(60.0, 60.0))<<newline>>""    gameObject.data.ring:setColor(Vec4.new(1.0, 0.8, 0.0, 0.0))<<newline>>""    gameObject.data.time = 0.0<<newline>>""end<<newline>>""<<newline>>""function ExpAroundPlayerObject.onTick(gameObject)<<newline>>""    local t = gameObject.data.time /  gameObject.data.maxTime<<newline>>""    gameObject.data.time = gameObject.data.time + dt<<newline>>""    local alpha<<newline>>""    if t < 0.1 then<<newline>>""        alpha = t / 1.0<<newline>>""    elseif t > 0.98 then<<newline>>""        alpha = (1.0 - t) / 0.02<<newline>>""    else<<newline>>""        alpha = 1.0<<newline>>""    end<<newline>>""    if t > 1.0 then<<newline>>""        gameObject.toBeRemoved = true<<newline>>""        alpha = 0.0<<newline>>""        t = 1.0<<newline>>""        addExplosion(gameObject.data.pos, 50.0, 80.0, 20, 40, 0.2, true, nil, true)<<newline>>""        <<newline>>""        local d = gameObject.data.pos:distance(player.position)<<newline>>""        d = clamp(1.0 - d / 200.0) * 0.4<<newline>>""        playSound({path = missionPath .. \"~/resources/sounds/explode.ogg\", position = gameObject.data.pos, volume = 0.1 + d })<<newline>>""        <<newline>>""    end<<newline>>""    gameObject.data.ring:setColor(Vec4.new(1.0, 1.0, 0.3, alpha * 0.6))<<newline>>""    gameObject:setPosition(gameObject.data.pos)<<newline>>""    gameObject:setScale(Vec2.new(1.0 - t * 0.8, 1.0 - t * 0.8))<<newline>>""end<<newline>>""<<newline>>""<<newline>>""function NarSie.explosions(monster, init)<<newline>>""    if init then<<newline>>""        data.explosionsData = {}<<newline>>""        local explosionsData = data.explosionsData<<newline>>""        explosionsData.timeToShoot = 0.0<<newline>>""        explosionsData.shootSpeed = lerp(1.0, 1.5, clamp(min * 0.1))<<newline>>""        explosionsData.count = 6<<newline>>""        explosionsData.interval = lerp(0.8, 0.4, clamp(min * 0.1))<<newline>>""        <<newline>>""    end<<newline>>""    <<newline>>""    local explosionsData = data.explosionsData<<newline>>""    <<newline>>""    explosionsData.timeToShoot = explosionsData.timeToShoot - dt<<newline>>""    <<newline>>""    if explosionsData.timeToShoot < 0.0 and explosionsData.count > 0 then<<newline>>""        explosionsData.timeToShoot = explosionsData.timeToShoot + explosionsData.interval<<newline>>""    <<newline>>""        addExplosion(monster.position, 500.0, 150.0 * explosionsData.shootSpeed, 30 - explosionsData.count * 3, 40 - explosionsData.count * 3, 0.0, true, nil, explosionsData.count ~= 6 and explosionsData.count ~= 3 )<<newline>>""        <<newline>>""        playSound({path = missionPath .. \"narsie/explosion07.ogg\", position = monster.position, volume = 1.5})<<newline>>""        explosionsData.count = explosionsData.count - 1<<newline>>""    end<<newline>>""    <<newline>>""    if explosionsData.count <= 0 and explosionsData.timeToShoot < -2.0 then<<newline>>""        data.currentAttack = nil<<newline>>""    end<<newline>>""end <<newline>>""<<newline>>""function NarSie.spawnSpiders(monster, init)<<newline>>""    if init then<<newline>>""        data.timeToShoot = 0.0<<newline>>""        data.shift = 0.0<<newline>>""        data.count = 0<<newline>>""        data.numSpiders = math.floor(7 + min * 1 )<<newline>>""        data.interval = lerp(0.15, 0.10, clamp(min * 0.1))<<newline>>""        data.min = min<<newline>>""        data.angleShift = math.random() * 2.0 * math.pi<<newline>>""    end<<newline>>""    data.timeToShoot = data.timeToShoot - dt<<newline>>""    if data.timeToShoot < 0.0 and data.numSpiders > 0 then<<newline>>""        data.timeToShoot = data.timeToShoot + data.interval<<newline>>""       <<newline>>""        local newMonster = addMonster(\"Spider\")<<newline>>""        Spider.buffStats(newMonster, monster.data.min)<<newline>>""        data = monster.data<<newline>>""        newMonster.position = monster.position<<newline>>""        newMonster:setScale(0.5)<<newline>>""        newMonster.colorMultiplier:addBuff(Vec4.new(0.2, 0.2, 0.2, 1.0))<<newline>>""<<newline>>""        playSound({path = missionPath .. \"narsie/spiderling.ogg\", position = monster.position, volume = 1.0})<<newline>>""        <<newline>>""        newMonster.data.randomMove = false<<newline>>""<<newline>>""        newMonster.experienceMultiplier = 0<<newline>>""        newMonster.scoreMultiplier = 0<<newline>>""        newMonster.moveSpeed = newMonster.moveSpeed * 1.6<<newline>>""        newMonster.hitPoint = 50<<newline>>""        newMonster.data.moveTimer = 60.0<<newline>>""        newMonster.moveAngle = math.pi * data.numSpiders / 8 + data.angleShift<<newline>>""        <<newline>>""        data.numSpiders = data.numSpiders - 1<<newline>>""        <<newline>>""    end<<newline>>""    <<newline>>""    if data.numSpiders <= 0 and data.timeToShoot < -3.0 then<<newline>>""        data.currentAttack = nil<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""function NarSie.fireballs(monster, init)<<newline>>""    if init then<<newline>>""        data.timeToShoot = 0.0<<newline>>""        data.shift = 0.0<<newline>>""        data.count = 0<<newline>>""        data.numBullets = math.floor(3 + min * 0.1 )<<newline>>""        data.interval = lerp(0.8, 0.3, clamp(min * 0.1))<<newline>>""        data.totalCount = lerp(6, 12, clamp(min * 0.1))<<newline>>""        data.iter = 0<<newline>>""        <<newline>>""        data.s = 1.0<<newline>>""        if math.random() < 0.5 then<<newline>>""            data.s = -1.0<<newline>>""        end<<newline>>""    end<<newline>>""    <<newline>>""    data.timeToShoot = data.timeToShoot - dt<<newline>>""    <<newline>>""    if data.timeToShoot < 0.0 then<<newline>>""        <<newline>>""        local half = math.floor(data.numBullets / 2)<<newline>>""        <<newline>>""        local b = NarSie.sendFireBall(monster, data.s)<<newline>>""    <<newline>>""        b.moveAngle = b.moveAngle + (data.iter - half) * math.pi * 0.3 / data.numBullets<<newline>>""        b.damage = math.floor(b.damage / 2)<<newline>>""        <<newline>>""        data.iter = data.iter + 1<<newline>>""        <<newline>>""        if data.iter == data.numBullets then<<newline>>""            data.iter = 0<<newline>>""            data.timeToShoot = data.timeToShoot + data.interval<<newline>>""            data.totalCount = data.totalCount - 1<<newline>>""            <<newline>>""            if math.random() < 0.5 then<<newline>>""                data.s = -data.s<<newline>>""            end<<newline>>""            if data.totalCount <= 0 then<<newline>>""                data.currentAttack = nil<<newline>>""            end<<newline>>""        else<<newline>>""            data.timeToShoot = 0.1<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""<<newline>>""<<newline>>""function NarSie.fireballs2(monster, init)<<newline>>""    if init then<<newline>>""        data.timeToShoot = 0.0<<newline>>""        data.shift = 0.0<<newline>>""        data.interval = lerp(0.2, 0.12, clamp(min * 0.1))<<newline>>""        data.totalCount = lerp(20, 30, clamp(min * 0.1))<<newline>>""    end<<newline>>""    <<newline>>""    data.timeToShoot = data.timeToShoot - dt<<newline>>""    <<newline>>""    if data.timeToShoot < 0.0 then<<newline>>""        if data.totalCount > 0 then<<newline>>""            <<newline>>""            data.timeToShoot = data.timeToShoot + data.interval<<newline>>""            local b = NarSie.sendFireBall(monster)<<newline>>""            b.damage = math.floor(b.damage / 2)<<newline>>""            b.moveAngle = b.moveAngle + (math.random() * 0.5 - 0.25) * lerp(1.0, 0.3, clamp(min * 0.15))<<newline>>""            <<newline>>""            data.totalCount = data.totalCount - 1<<newline>>""        end<<newline>>""    end<<newline>>""    <<newline>>""    <<newline>>""    if data.timeToShoot < -1.0 and data.totalCount <= 0 then<<newline>>""        data.currentAttack = nil<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""<<newline>>""<<newline>>""<<newline>>""function NarSie.sendFireBall(monster, s)<<newline>>""    local bullet = addCustomBullet({monsterBullet = true})<<newline>>""    bullet.damage = math.floor(math.random(20, 30))<<newline>>""    bullet.moveSpeed =  300.0 + min * 30.0<<newline>>""<<newline>>""    playSound({path = missionPath .. \"narsie/fireball.ogg\", position = monster.position, volume = 0.5})<<newline>>""    <<newline>>""    if s == nil then<<newline>>""        s = 1.0<<newline>>""        if math.random() < 0.5 then<<newline>>""            s = -1.0<<newline>>""        end<<newline>>""    end<<newline>>""    bullet.position = monster.position + Vec2.new( s * 50, -30.0)<<newline>>""    <<newline>>""    local d = player.position:distance(bullet.position) / bullet.moveSpeed<<newline>>""   <<newline>>""    local futurePos = player.position + player.moveVelocity * d<<newline>>""    <<newline>>""    bullet.moveAngle = (futurePos - bullet.position):getAngle()<<newline>>""    <<newline>>""    bullet.radius = 6.0<<newline>>""    bullet:addRenderableTextureWithSize(monster.monsterTemplate.basePath .. \"bullet.png\", Vec2.new(4.0, 4.0))<<newline>>""    <<newline>>""    <<newline>>""    -- fix<<newline>>""    -- particle = bullet:addTrailParticle(\"FlameParticle\", Vec2.new(0.0, 0.0), 4.0, {})<<newline>>""    <<newline>>""    particle = bullet:addTrailParticle(\"RocketSmokeParticle\", Vec2.new(0.0, 0.0), 2.0, {})<<newline>>""    particle:addLinearRandom(\"fadeOutSpeed\", 1.0, 1.4)<<newline>>""    <<newline>>""    bullet.lifeTime = 9.0<<newline>>""    <<newline>>""    return bullet<<newline>>""end<<newline>>""<<newline>>""function NarSie.addBullet(monster, angle, moveSpeed)<<newline>>""    local bullet = addCustomBullet({monsterBullet = true})<<newline>>""    bullet.damage = math.floor(math.random(20, 30))<<newline>>""    bullet.moveSpeed = data.moveSpeed<<newline>>""    bullet.moveAngle = angle<<newline>>""    bullet.position = monster.position + Vec2.fromAngle(bullet.moveAngle) * 40.0<<newline>>""    bullet.radius = 2.0<<newline>>""    bullet:addRenderableTextureWithSize(\"~/resources/monsters/bullet.png\", Vec2.new(18.0, 18.0))<<newline>>""    bullet.lifeTime = 9.0<<newline>>""    <<newline>>""<<newline>>""    return bullet<<newline>>""end<<newline>>""<<newline>>""function NarSie.ringBullets(monster, init)<<newline>>""    if init then<<newline>>""        data.timeToShoot = 0.0<<newline>>""        data.shift = 0.0<<newline>>""        data.numBullets = math.floor(10 + min * 1 )<<newline>>""        data.interval = lerp(0.6, 0.3, clamp(min * 0.1))<<newline>>""        data.totalCount = lerp(10, 20, clamp(min * 0.1))<<newline>>""        data.moveSpeed = 100.0 + min * 2.0<<newline>>""    end<<newline>>""    <<newline>>""    data.timeToShoot = data.timeToShoot - dt<<newline>>""    <<newline>>""    if data.timeToShoot < 0.0 then<<newline>>""        data.timeToShoot = data.timeToShoot + data.interval<<newline>>""        <<newline>>""        local count = data.numBullets<<newline>>""        for i = 0, count - 1 do<<newline>>""            local bullet = NarSie.addBullet(monster, data.shift + i * math.pi * 2.0 / count, data.moveSpeed)<<newline>>""        end<<newline>>""        <<newline>>""        playSound({path = missionPath .. \"narsie/bullet.ogg\", position = monster.position, volume = 0.8})<<newline>>""        <<newline>>""        data.shift = data.shift + 0.4 * math.pi * 2.0 / count<<newline>>""        data.totalCount = data.totalCount - 1<<newline>>""        if data.totalCount <= 0 then<<newline>>""            data.currentAttack = nil<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""function NarSie.arcBullets(monster, init)<<newline>>""    if init then<<newline>>""        data.timeToShoot = 0.0<<newline>>""        data.count = 0<<newline>>""        data.numBullets = math.floor(15 + min * 2 )<<newline>>""        data.interval = lerp(0.6, 0.4, clamp(min * 0.1))<<newline>>""        data.totalCount = lerp(6, 12, clamp(min * 0.1))<<newline>>""        data.moveSpeed = 100.0 + min * 2.0<<newline>>""        data.iter = 0<<newline>>""        data.shift = (math.random() - 0.5) * math.pi  + (player.position - monster.position):getAngle()<<newline>>""        data.bulletSoundCount = 0<<newline>>""    end<<newline>>""    <<newline>>""    data.timeToShoot = data.timeToShoot - dt<<newline>>""    <<newline>>""    if data.timeToShoot < 0.0 then<<newline>>""        local b = NarSie.addBullet(monster, data.shift + (data.iter - data.numBullets / 2.0) * math.pi * 0.033, data.moveSpeed)<<newline>>""        if data.bulletSoundCount == 0 then<<newline>>""            playSound({path = missionPath .. \"narsie/bullet2.ogg\", position = monster.position, volume = 0.8})<<newline>>""            data.bulletSoundCount = 2<<newline>>""        end<<newline>>""        data.bulletSoundCount = data.bulletSoundCount - 1<<newline>>""        <<newline>>""        b.damage = math.floor(b.damage / 2)<<newline>>""        b.moveSpeed = b.moveSpeed * 1.3<<newline>>""        data.iter = data.iter + 1<<newline>>""        <<newline>>""        if data.iter >= data.numBullets then<<newline>>""            data.iter = 0<<newline>>""            data.timeToShoot = data.timeToShoot + data.interval<<newline>>""            data.totalCount = data.totalCount - 1<<newline>>""            <<newline>>""            data.shift = (math.random() - 0.5) * math.pi  + (player.position - monster.position):getAngle()<<newline>>""            if data.totalCount <= 0 then<<newline>>""                data.currentAttack = nil<<newline>>""            end<<newline>>""        else<<newline>>""            data.timeToShoot = 0.03<<newline>>""        end<<newline>>""        <<newline>>""    end<<newline>>""end<<newline>>""<<newline>>"""}, 
{"resources/missions/survival/data.json", "{<<newline>>""  \"type\": \"mission\",<<newline>>""  \"name\": \"Survival\",<<newline>>""  <<newline>>""  \"scriptFile\" : \"survival.lua\",<<newline>>""  \"scriptName\" : \"Survival\"<<newline>>""}"}, 
{"resources/missions/survival/survival.lua", "<<newline>>""function Survival.init()<<newline>>""    local theSeed = os.time()<<newline>>""    math.randomseed( theSeed )<<newline>>""    missionData = {}<<newline>>""    debugInit(missionData)<<newline>>""    missionInit(missionData)<<newline>>""    missionData.lastSpawnTime = 0.0<<newline>>""    missionData.lastBossSpawn = -500<<newline>>""    missionData.perkPerLevel = 3<<newline>>""    missionData.firstKill = true<<newline>>""    missionData.firstTick = true<<newline>>""    missionData.isSurvival = true<<newline>>""    missionData.spawnWeaponOnFirstKill = true<<newline>>""    missionData.timeToCalcSpawn = -0.1<<newline>>""    if DEBUG then<<newline>>""        missionData.maxMonster = 50<<newline>>""    else<<newline>>""        missionData.maxMonster = 650<<newline>>""    end<<newline>>""    missionData.curMaxMonster = missionData.maxMonster<<newline>>""    <<newline>>""    local mapSize = getMapSize()<<newline>>""    local colliderCount = math.floor((mapSize.x * mapSize.y) / 300000 + 10 )<<newline>>""    addRandomColliders(colliderCount, 300)<<newline>>""end<<newline>>""<<newline>>""function Survival.onTick()<<newline>>""    min = missionTime / 60.0 + missionData.extraMin<<newline>>""    <<newline>>""    local monsterTypeCount = getAllMonsterTypeCount()<<newline>>""    <<newline>>""    if missionData.firstTick then<<newline>>""        for i = 0, monsterTypeCount - 1 do<<newline>>""            local monsterType = getMonsterTypeAt(i)<<newline>>""            if monsterType.scriptTable.onMissionLoad ~= nil then<<newline>>""                monsterType.scriptTable.onMissionLoad(missionData)<<newline>>""            end<<newline>>""        end<<newline>>""    end<<newline>>""    <<newline>>""    missionData.timeToCalcSpawn = missionData.timeToCalcSpawn - dt<<newline>>""    <<newline>>""    if missionData.timeToCalcSpawn < 0.0 then<<newline>>""        missionData.timeToCalcSpawn = math.random() * 0.5 + 0.5<<newline>>""        calcRandomSpawns()<<newline>>""    end<<newline>>""    if missionData.firstTick then<<newline>>""        local spawn<<newline>>""        if DEBUG then<<newline>>""            spawn = 10<<newline>>""        else<<newline>>""            spawn = 80<<newline>>""        end<<newline>>""        <<newline>>""        local rateMult = 1.0 + (getMapSize().x - 3000.0) / 3000.0<<newline>>""        spawn = math.floor(rateMult * spawn)<<newline>>""        for i = 1, spawn do<<newline>>""            local monster = addRandomMonster()<<newline>>""            local pos = getRandomPosition( {canBeEdge=true, notOnScreen=true, notNearPlayer=true, notNearMonsters=true, playerRange=400.0})<<newline>>""            if monster.scriptTable.getRandomSpawnPos then<<newline>>""                pos = monster.scriptTable.getRandomSpawnPos()<<newline>>""            end<<newline>>""            monster.position = pos<<newline>>""            monster.moveAngle =  math.random() * math.pi * 2.0<<newline>>""            <<newline>>""            if monster.data.time ~= nil then<<newline>>""                data.time = data.time - math.random() * 20<<newline>>""            end<<newline>>""        end<<newline>>""    end<<newline>>""    <<newline>>""    <<newline>>""    missionData.curMaxMonster = math.floor(lerp(55, missionData.maxMonster, clamp(min * 0.05)))<<newline>>""    local rateMult = 1.0 + (getMapSize().x - 3000.0) / 5000.0<<newline>>""    local rate =  (0.9 - clamp(min * 0.2) * 0.4)  / rateMult<<newline>>""    if missionTime - missionData.lastSpawnTime > rate and canSpawnMonster() and player.isDead == false then<<newline>>""        missionData.lastSpawnTime = missionTime<<newline>>""        local monster = addRandomMonster()<<newline>>""        local pos = getRandomPosition({canBeEdge=true, notNearPlayer=true, notNearMonsters=true, notOnScreen=true})<<newline>>""        if monster.scriptTable.getRandomSpawnPos then<<newline>>""                pos = monster.scriptTable.getRandomSpawnPos()<<newline>>""        end<<newline>>""        monster.position = pos<<newline>>""        monster.moveAngle =  math.random() * math.pi * 2.0<<newline>>""        <<newline>>""        local buffId = monster.colorMultiplier:addBuff(Vec4.new(1.0, 1.0, 1.0, 0.0))<<newline>>""        monster.colorMultiplier:setBuffDuration(buffId, 0.3)<<newline>>""        monster.colorMultiplier:setBuffFadeInFadeOut(buffId, 0.0, 0.3)<<newline>>""    end<<newline>>""    <<newline>>""    missionData.firstTick = false<<newline>>""    gameResetTick()<<newline>>""end<<newline>>""<<newline>>""<<newline>>""function Survival.onPlayerDied()<<newline>>""    showGameReset()<<newline>>""end<<newline>>""<<newline>>""function Survival.onMonsterDied(monster)<<newline>>""    if missionData.firstKill then<<newline>>""        missionData.firstKill = false<<newline>>""    end<<newline>>""<<newline>>""    if missionData.spawnWeaponOnFirstKill == true then<<newline>>""        spawnRandomGun(monster.position)<<newline>>""        missionData.spawnWeaponOnFirstKill = false<<newline>>""    end<<newline>>""    <<newline>>""    if monster.data.ignoreForCount == true then<<newline>>""        monster.data.ignoreForCount = false<<newline>>""        missionData.ignoreMonsterCount = missionData.ignoreMonsterCount - 1 <<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""function Survival.onDebugTick()<<newline>>""<<newline>>""    debugTick(missionData)<<newline>>""    <<newline>>""    if hasCheats() then<<newline>>""        if isKeyReleased(keys.Delete) then    <<newline>>""            local count = getMonsterCount()<<newline>>""            <<newline>>""            for i = 0, count - 1 do<<newline>>""                local monster = getMonsterAtIndex(i)<<newline>>""                monster.experienceMultiplier = 0.0<<newline>>""                monster.scoreMultiplier = 0.0<<newline>>""                monster:doDamage(10000, Vec2.randDir())<<newline>>""            end<<newline>>""        end<<newline>>""        <<newline>>""        if isKeyReleased(keys.Insert) then<<newline>>""            local t = missionData.maxMonster * 0.2<<newline>>""            t = math.min(missionData.maxMonster - getMonsterCount(), t)<<newline>>""            if t > 1 then<<newline>>""                for i = 1, t - 10 do<<newline>>""                    local pos = getRandomPosition( {canBeEdge=true, notNearPlayer=true, notNearMonsters=true, playerRange=400.0})<<newline>>""                    local monster = addRandomMonster()<<newline>>""                    if monster.scriptTable.getRandomSpawnPos then<<newline>>""                            pos = monster.scriptTable.getRandomSpawnPos()<<newline>>""                    end<<newline>>""                    monster.position = pos<<newline>>""                    monster.moveAngle =  math.random() * math.pi * 2.0<<newline>>""                end<<newline>>""            end<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>"""}, 
{"resources/missions/tutorial/data.json", "{<<newline>>""  \"type\": \"mission\",<<newline>>""  \"name\": \"Tutorial\",<<newline>>""  <<newline>>""  \"icon\": \"icon.png\",<<newline>>""  <<newline>>""  \"scriptFile\" : \"tutorial.lua\",<<newline>>""  \"scriptName\" : \"Tutorial\"<<newline>>""}"}, 
{"resources/missions/tutorial/tutorial.lua", "<<newline>>""function Tutorial.init()<<newline>>""    local theSeed = os.time()<<newline>>""    math.randomseed( theSeed )<<newline>>""    missionData = {}<<newline>>""    missionData.state = 0<<newline>>""    missionData.t = 0<<newline>>""    missionData.objective = 0<<newline>>""    <<newline>>""    missionData.congratsTime = 1.6<<newline>>""    missionData.dontSpawnBonus = true<<newline>>""    <<newline>>""    missionData.extraMin = 0.0<<newline>>""    <<newline>>""    missionData.monsterC = 90<<newline>>""    missionData.xpPerMonster = math.floor(player.experienceForNextLevel / missionData.monsterC)<<newline>>""    <<newline>>""    missionData.perkPerLevel = 4<<newline>>""end<<newline>>""<<newline>>""function Tutorial.swapText()<<newline>>""    if missionData.text == missionData.text1 then<<newline>>""        missionData.text = missionData.text2<<newline>>""    else<<newline>>""        missionData.text = missionData.text1<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""function Tutorial.getDummy()<<newline>>""    local monster = addMonster(\"Alien\")<<newline>>""    monster.data.maxMoveSpeed = 0.0<<newline>>""    monster.animationSpeed = 0.0<<newline>>""    monster.moveSpeed = 0.0<<newline>>""    monster.data.maxRotateSpeed = 0.0<<newline>>""    monster.data.canHit = false<<newline>>""    monster.position = player.position + Vec2.new(100.0, 100.0)<<newline>>""    <<newline>>""    monster.experienceMultiplier = 0.0<<newline>>""    monster.dropChance = 0.0<<newline>>""    monster:setScale(1.0)<<newline>>""    monster.colorMultiplier:clear()<<newline>>""        <<newline>>""    local buff = monster.colorMultiplier:addBuff(Vec4.fromColor(0x00FFFFFF))<<newline>>""    monster.colorMultiplier:setBuffDuration(buff, 0.3)<<newline>>""    monster.colorMultiplier:setBuffFadeInFadeOut(buff, 0.0, 0.3)<<newline>>""<<newline>>""    missionData.objective = missionData.objective + 1<<newline>>""    return monster<<newline>>""end<<newline>>""<<newline>>""function Tutorial.onTick()<<newline>>""<<newline>>""    if missionData.state == 0 then<<newline>>""        <<newline>>""        missionData.textObject = addGameObject(\"\")<<newline>>""        <<newline>>""        missionData.textObject:setLevel(RenderableLevel.GUI + 500)<<newline>>""        missionData.textObject:setPosition(Vec2.new(0, 120))<<newline>>""        <<newline>>""        missionData.textBG = missionData.textObject:addTexture(missionPath .. \"textbg.png\", \"~/resources/default\")<<newline>>""        missionData.textBG:setAlignment(RenderableAlignment.bottom)<<newline>>""        missionData.textBG:setWorldMatrix(Mat3.fromScale(385.0, 95.0))<<newline>>""<<newline>>""        missionData.text1 = missionData.textObject:addText(\"Welcome to Bloodworks!<<escapednewline>>""This tutorial will teach you the basics of the game\", \"resources/fontData.txt\")<<newline>>""        missionData.text1:setAlignment(RenderableAlignment.bottom)<<newline>>""        missionData.text1:setTextAlignment(TextAlignment.center)<<newline>>""        missionData.text1:setVerticalTextAlignment(VerticalTextAlignment.mid)<<newline>>""        missionData.text1:setTextSize(20.0)<<newline>>""        missionData.text1:setWorldMatrix(Mat3.fromPosition(0.0, 10.0))<<newline>>""        missionData.text1:setColor(Vec4.new(1.0, 1.0, 1.0, 0.0))<<newline>>""        missionData.t1a = 0.0<<newline>>""        <<newline>>""        missionData.text2 = missionData.textObject:addText(\"\", \"resources/fontData.txt\")<<newline>>""        missionData.text2:setAlignment(RenderableAlignment.bottom)<<newline>>""        missionData.text2:setTextAlignment(TextAlignment.center)<<newline>>""        missionData.text2:setVerticalTextAlignment(VerticalTextAlignment.mid)<<newline>>""        missionData.text2:setTextSize(20.0)<<newline>>""        missionData.text2:setWorldMatrix(Mat3.fromPosition(0.0, 10.0))<<newline>>""        missionData.t2a = 0.0<<newline>>""        <<newline>>""        missionData.text = missionData.text1<<newline>>""        missionData.state = 10<<newline>>""    <<newline>>""    elseif missionData.state ==  10 then<<newline>>""    <<newline>>""        if missionTime > 3.0 then<<newline>>""            Tutorial.swapText()<<newline>>""            missionData.text:setText(\"Use WASD to move around<<escapednewline>>""Collect all gifts to continue!\")<<newline>>""            <<newline>>""            missionData.gifts = {}<<newline>>""            local pos = player.position<<newline>>""            for i = 0, 6 do<<newline>>""                local gameObject = addGameObject(\"\")<<newline>>""                <<newline>>""                gameObject:setLevel(RenderableLevel.player - 5)<<newline>>""                gameObject:setPosition(pos + Vec2.fromAngle( i * math.pi * 2.0 / 7) * 150.0 )<<newline>>""                gameObject:setScale( Vec2.new(0.0, 0.0) )<<newline>>""                gameObject.data.rotation = math.pi * 2.0 * math.random()<<newline>>""                gameObject.data.rotationShift = math.pi * 2.0 * math.random()<<newline>>""                gameObject.data.s = 0.0<<newline>>""                local t = gameObject:addTexture(missionPath .. \"gift_box.png\", \"~/resources/default\")<<newline>>""                t:setWorldMatrix(Mat3.fromScale(18.0, 18.0))<<newline>>""                <<newline>>""                gameObject.data.particle = gameObject:addParticle(\"CriticalParticle\", {})<<newline>>""                <<newline>>""                missionData.gifts[i] = gameObject<<newline>>""            end<<newline>>""            <<newline>>""            missionData.state = 20<<newline>>""        end<<newline>>""        <<newline>>""    elseif missionData.state ==  20 then<<newline>>""        local hasGift = false<<newline>>""        <<newline>>""        for i = 0, 6 do<<newline>>""            local gameObject = missionData.gifts[i] <<newline>>""            if gameObject ~= nil then<<newline>>""                hasGift = true<<newline>>""            <<newline>>""                gameObject.data.s = clamp(gameObject.data.s)<<newline>>""                gameObject:setScale( Vec2.new(gameObject.data.s, gameObject.data.s) )<<newline>>""       <<newline>>""                gameObject:setRotation(gameObject.data.rotation + math.sin(gameObject.data.rotationShift + time * 2.0 ) * math.pi * 0.2 )<<newline>>""                <<newline>>""                if gameObject.data.picked ~= nil then<<newline>>""                    gameObject.data.s = gameObject.data.s - dt * 8.0<<newline>>""                    <<newline>>""                    if gameObject.data.s < 0.0 then<<newline>>""                        gameObject.toBeRemoved = true<<newline>>""                        missionData.gifts[i]  = nil<<newline>>""                    end<<newline>>""                else<<newline>>""                    if dt > 0.0 then<<newline>>""                        gameObject.data.particle:addParticle(gameObject:getPosition() + Vec2.fromAngle(math.random() * math.pi * 2.0) * math.random() * 20.0, {})<<newline>>""                    end<<newline>>""                    <<newline>>""                    gameObject.data.s = gameObject.data.s + dt * 4.0<<newline>>""                    <<newline>>""                    if player.position:distance(gameObject:getPosition()) < 25.0 then<<newline>>""                        gameObject.data.picked = true<<newline>>""                        playSound({path = missionPath .. \"gifttake.ogg\", volume = 0.5})<<newline>>""                    end<<newline>>""                end<<newline>>""            end<<newline>>""        end<<newline>>""    <<newline>>""        if hasGift == false then<<newline>>""            Tutorial.swapText()<<newline>>""            missionData.text:setText(\"Congrats!\")<<newline>>""            missionData.state = 30<<newline>>""            missionData.t = missionTime<<newline>>""        end<<newline>>""    elseif missionData.state ==  30 then<<newline>>""        if missionTime - missionData.t > missionData.congratsTime then<<newline>>""            Tutorial.swapText()<<newline>>""            missionData.text:setText(\"Use mouse to aim and left mouse button to shoot.<<escapednewline>>""Kill all enemies to continue\")<<newline>>""            <<newline>>""            clearBloods()<<newline>>""            for i = 0, 8 do<<newline>>""                local monster = Tutorial.getDummy()<<newline>>""                <<newline>>""                monster.position = player.position + Vec2.fromAngle( i * math.pi * 2.0 / 9) * 150.0 <<newline>>""                monster.moveAngle = (player.position - monster.position):getAngle()<<newline>>""            end<<newline>>""            <<newline>>""            missionData.state = 40<<newline>>""        end<<newline>>""        <<newline>>""    elseif missionData.state == 40 then<<newline>>""        if missionData.reload == nil and player.gun:isReloading() then<<newline>>""            missionData.reload = true<<newline>>""            Tutorial.swapText()<<newline>>""            missionData.text:setText(\"Your weapon will automatically start reloading when<<escapednewline>>""it is out of ammo and there is no reload limit.<<escapednewline>>""You can also reload manually by pressing R.\")<<newline>>""        end<<newline>>""    <<newline>>""        if missionData.objective == 0 then<<newline>>""            Tutorial.swapText()<<newline>>""            missionData.text:setText(\"Congrats!\")<<newline>>""            missionData.state = 50<<newline>>""            missionData.t = missionTime<<newline>>""        end<<newline>>""    elseif missionData.state == 50 then<<newline>>""        if missionTime - missionData.t > missionData.congratsTime then<<newline>>""            Tutorial.swapText()<<newline>>""            missionData.text:setText(\"Monsters will randomly drop weapons when they die.<<escapednewline>>""Go near weapon to equip it.\")<<newline>>""            missionData.state = 60<<newline>>""        end<<newline>>""    elseif missionData.state == 60 then<<newline>>""        if player.gun.scriptName == \"PlasmaGun\" then<<newline>>""            Tutorial.swapText()<<newline>>""            missionData.text:setText(\"'Plasma Gun' will work better against group of enemies.<<escapednewline>>""Kill all enemies to continue.\")<<newline>>""            missionData.state = 70<<newline>>""            <<newline>>""            clearBloods()<<newline>>""            for i = 0, 6 do<<newline>>""                for j = 0, 3 do<<newline>>""                    local monster = Tutorial.getDummy()<<newline>>""                    monster:setScale(0.7)<<newline>>""                    monster.position = player.position + Vec2.fromAngle( i * math.pi * 2.0 / 7) * 160  + Vec2.fromAngle(math.random() * math.pi * 2.0) * math.sqrt( math.random() ) * 50.0<<newline>>""                    monster.moveAngle = math.random() * math.pi * 2.0<<newline>>""                    monster.hitPoint = 20<<newline>>""                end<<newline>>""            end<<newline>>""        end<<newline>>""        <<newline>>""        <<newline>>""    elseif missionData.state == 70 then<<newline>>""        if missionData.objective == 0 then<<newline>>""            Tutorial.swapText()<<newline>>""            missionData.text:setText(\"Congrats!\")<<newline>>""            missionData.state = 80<<newline>>""            missionData.t = missionTime<<newline>>""        end<<newline>>""    elseif missionData.state == 80 then<<newline>>""        if missionTime - missionData.t > missionData.congratsTime then<<newline>>""            Tutorial.swapText()<<newline>>""            missionData.text:setText(\"You can equip ultimate weapons. These weapons have<<escapednewline>>""limited ammo, long cooldowns between each shot.<<escapednewline>>""Pick up the ultimate.\")<<newline>>""            missionData.state = 90<<newline>>""        end<<newline>>""    elseif missionData.state == 90 then<<newline>>""        if player.ultimate ~= nil then<<newline>>""            Tutorial.swapText()<<newline>>""            missionData.text:setText(\"Aim at enemies and<<escapednewline>>""use right mouse button to activate your ultimate.\")<<newline>>""            missionData.state = 100<<newline>>""            clearBloods()<<newline>>""            for i = 0, 50 do<<newline>>""                    local monster = Tutorial.getDummy()<<newline>>""                    monster:setScale(0.7)<<newline>>""                    monster.position = player.position + Vec2.fromAngle( player.aimDir:getAngle() + math.pi + ( math.pi * 0.35 * (math.random() - 0.5) ) ) * (120 + math.random() * 200)<<newline>>""                    monster.moveAngle = math.random() * math.pi * 2.0<<newline>>""            end<<newline>>""        end<<newline>>""    elseif missionData.state == 100 then<<newline>>""        if missionData.objective == 0 then<<newline>>""            Tutorial.swapText()<<newline>>""            missionData.text:setText(\"Congrats!\")<<newline>>""            missionData.state = 110<<newline>>""            missionData.t = missionTime<<newline>>""        end<<newline>>""    elseif missionData.state == 110 then<<newline>>""        if missionTime - missionData.t > missionData.congratsTime then<<newline>>""            Tutorial.swapText()<<newline>>""            missionData.text:setText(\"Sometimes a boss monster will appear on the map.<<escapednewline>>""There are different types of bosses.<<escapednewline>>""This particular boss has large amount of HP.\")<<newline>>""            missionData.state = 115<<newline>>""            missionData.t = missionTime<<newline>>""        end<<newline>>""    elseif missionData.state == 115 then<<newline>>""        if missionTime - missionData.t > missionData.congratsTime then<<newline>>""<<newline>>""            local monster = addMonster(\"Alien\")<<newline>>""            monster.data.canHit = false<<newline>>""            monster.position = player.position - player.aimDir * 400.0<<newline>>""            monster.moveAngle = (player.position - monster.position):getAngle()<<newline>>""                <<newline>>""            makeBossDefault(monster, 1)<<newline>>""            monster.data.randomMove = false<<newline>>""            local buff = monster.colorMultiplier:addBuff(Vec4.fromColor(0x00FFFFFF))<<newline>>""            monster.colorMultiplier:setBuffDuration(buff, 0.3)<<newline>>""            monster.colorMultiplier:setBuffFadeInFadeOut(buff, 0.0, 0.3)<<newline>>""<<newline>>""            monster.experienceMultiplier = 0.0<<newline>>""            <<newline>>""            missionData.objective = missionData.objective + 1<<newline>>""            <<newline>>""            missionData.state = 120<<newline>>""        end<<newline>>""    elseif missionData.state == 120 then<<newline>>""        if missionData.objective == 0 then<<newline>>""            Tutorial.swapText()<<newline>>""            missionData.text:setText(\"Congrats!\")<<newline>>""            missionData.state = 130<<newline>>""            missionData.t = missionTime<<newline>>""        end<<newline>>""    elseif missionData.state == 130 then<<newline>>""        if missionTime - missionData.t > missionData.congratsTime then<<newline>>""            Tutorial.swapText()<<newline>>""            missionData.text:setText(\"It looks like you almost gained<<escapednewline>>""enough experience to level up!<<escapednewline>>""Kill this last monster to level up.\")<<newline>>""            missionData.state = 140<<newline>>""            <<newline>>""            local monster = Tutorial.getDummy()<<newline>>""            monster.position = player.position - player.aimDir * 200.0<<newline>>""            monster.moveAngle = (player.position - monster.position):getAngle()<<newline>>""            <<newline>>""        end<<newline>>""    elseif missionData.state == 140 then<<newline>>""        if missionData.objective == 0 then<<newline>>""            Tutorial.swapText()<<newline>>""            missionData.text:setText(\"After leveling up, you can take a perk.<<escapednewline>>""Perks will give permanent bonuses to your character.<<escapednewline>>""Pick a perk to continue.\")<<newline>>""            missionData.state = 150<<newline>>""        end<<newline>>""    elseif missionData.state == 150 then<<newline>>""        if numActivePerks() == 1 then<<newline>>""            Tutorial.swapText()<<newline>>""            missionData.text:setText(\"Congrats!\")<<newline>>""            missionData.state = 160<<newline>>""            missionData.t = missionTime<<newline>>""        end<<newline>>""    elseif missionData.state == 160 then<<newline>>""        if missionTime - missionData.t > missionData.congratsTime then<<newline>>""            Tutorial.swapText()<<newline>>""            missionData.text:setText(\"Kill all enemies to finish the tutorial!\")<<newline>>""            missionData.state = 170<<newline>>""            missionData.t = missionTime<<newline>>""        end<<newline>>""    elseif missionData.state == 170 then<<newline>>""        if missionTime - missionData.t > missionData.congratsTime then<<newline>>""        <<newline>>""            missionData.t = missionTime<<newline>>""            for i = 0, 29 do<<newline>>""                local monster = addMonster(\"Alien\")<<newline>>""                monster.data.canHit = true<<newline>>""                <<newline>>""                monster.position = player.position + Vec2.fromAngle( math.pi * 2.0 * math.random() ) * (250 + math.random() * 300)<<newline>>""                monster.moveAngle = math.random() * math.pi * 2.0<<newline>>""                    <<newline>>""                monster.experienceMultiplier = 0.0<<newline>>""                <<newline>>""                missionData.objective = missionData.objective + 1<<newline>>""            <<newline>>""                monster.data.maxMoveSpeed = monster.data.maxMoveSpeed * 0.6<<newline>>""                monster.data.moveSpeed = 0.0<<newline>>""                monster.hitPoint = 40 <<newline>>""<<newline>>""                monster.data.minDamage  = 3<<newline>>""                monster.data.maxDamage  = 5<<newline>>""                monster.data.hitInterval  = 3.0<<newline>>""                <<newline>>""                monster.data.randomMove = true<<newline>>""                monster.data.targetShift = Vec2.new(0.0, 0.0)<<newline>>""            <<newline>>""                <<newline>>""                local buff = monster.colorMultiplier:addBuff(Vec4.fromColor(0x00FFFFFF))<<newline>>""                monster.colorMultiplier:setBuffDuration(buff, 0.3)<<newline>>""                monster.colorMultiplier:setBuffFadeInFadeOut(buff, 0.0, 0.3)<<newline>>""                <<newline>>""            end<<newline>>""            missionData.dontSpawnBonus = nil<<newline>>""            <<newline>>""            missionData.state = 180<<newline>>""        end<<newline>>""        <<newline>>""    elseif missionData.state == 180 then<<newline>>""        missionData.text:setText(\"<<escapednewline>>""Kill all enemies to finish the tutorial!<<escapednewline>>""Remaining : \" .. getMonsterCount() )<<newline>>""        if missionTime - missionData.t > 10.0 then<<newline>>""            local count = getMonsterCount()<<newline>>""            <<newline>>""            for i = 0, count - 1 do<<newline>>""                local monster = getMonsterAtIndex(i)<<newline>>""                <<newline>>""                if missionTime - missionData.t > 10.0 + i / 4.0 then<<newline>>""                    monster.data.randomMove = false<<newline>>""                end<<newline>>""            end<<newline>>""        end<<newline>>""        <<newline>>""        <<newline>>""        if missionData.objective == 0 then<<newline>>""            showGameReset(\"Congrats!\")<<newline>>""            missionData.state = 190<<newline>>""            missionData.textObject.toBeRemoved = true<<newline>>""            missionData.ended = true<<newline>>""        end<<newline>>""    end<<newline>>""    <<newline>>""    <<newline>>""    if missionData.ended ~= true then<<newline>>""        if missionData.text == missionData.text1 then<<newline>>""            missionData.t1a = missionData.t1a + nonsloweddt * 8.0<<newline>>""            missionData.t2a = missionData.t2a - nonsloweddt * 8.0<<newline>>""        else<<newline>>""            missionData.t1a = missionData.t1a - nonsloweddt * 8.0<<newline>>""            missionData.t2a = missionData.t2a + nonsloweddt * 8.0<<newline>>""        end<<newline>>""        <<newline>>""        missionData.t1a = clamp(missionData.t1a)<<newline>>""        missionData.t2a = clamp(missionData.t2a)<<newline>>""<<newline>>""        missionData.text1:setColor(Vec4.new(1.0, 1.0, 1.0, missionData.t1a))<<newline>>""        missionData.text2:setColor(Vec4.new(1.0, 1.0, 1.0, missionData.t2a))<<newline>>""    end<<newline>>""    <<newline>>""    if isKeyReleased(keys.Delete) and false then    <<newline>>""        local count = getMonsterCount()<<newline>>""        <<newline>>""        for i = 0, count - 1 do<<newline>>""            local monster = getMonsterAtIndex(i)<<newline>>""            monster.experienceMultiplier = 0.0<<newline>>""            monster:doDamage(10000, Vec2.randDir())<<newline>>""        end<<newline>>""    end<<newline>>""    <<newline>>""    gameResetTick()<<newline>>""end<<newline>>""<<newline>>""<<newline>>""function Tutorial.onMonsterDied(monster)<<newline>>""    missionData.objective = missionData.objective - 1<<newline>>""    if missionData.state ==  40 and missionData.objective == 0 then<<newline>>""        spawnGun(monster.position, \"PlasmaGun\")<<newline>>""    end<<newline>>""    <<newline>>""    if missionData.state ==  70 and missionData.objective == 13 then<<newline>>""    <<newline>>""        Tutorial.swapText()<<newline>>""        missionData.text:setText(\"Bonuses/weapons are also randomly spawns at map.<<escapednewline>>""Pick up the bonus and kill the rest of the enemies.\")<<newline>>""        <<newline>>""        local v = Vec2.new(0.0, 0.0)<<newline>>""        <<newline>>""        for i = 0, getMonsterCount() - 1 do<<newline>>""            v = v + getMonsterAtIndex(i).position<<newline>>""        end<<newline>>""        <<newline>>""        v = v / getMonsterCount()<<newline>>""        spawnBonus( (player.position * 0.2 + v  * 0.8) , \"Explosion\")<<newline>>""    end<<newline>>""    <<newline>>""    if missionData.state ==  70 and missionData.objective == 0 then<<newline>>""        spawnGun(monster.position, \"RocketBarrage\") <<newline>>""    end<<newline>>""    <<newline>>""    if missionData.p == nil then<<newline>>""        missionData.p  = 1<<newline>>""    else<<newline>>""        missionData.p  = missionData.p  + 1<<newline>>""    end<<newline>>""    if missionData.state == 140 then<<newline>>""        player:gainExperience(player.experienceForNextLevel - player.experience + 1)<<newline>>""    else <<newline>>""        player:gainExperience(missionData.xpPerMonster)<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""function Tutorial.onPlayerDied()<<newline>>""    showGameReset()<<newline>>""end<<newline>>""<<newline>>""function Tutorial.getPerksForLevelUp()<<newline>>""    return {\"CriticalBullets\", \"PiercingBullets\", \"LessSpread\", \"ExplosionOnReload\"}<<newline>>""end"}, 
{"resources/monsters/alien/data.json", "{<<newline>>""  \"type\" : \"monster\",<<newline>>""  \"name\": \"Alien\",<<newline>>""  \"hitPoint\": 100,<<newline>>""  \"size\" : [24.0, 34.0],<<newline>>""  \"textureShift\" : [0.0, -16.0],<<newline>>""  \"bulletRadius\" : 16.0,<<newline>>""  \"collisionRadius\" : 12.0,<<newline>>""  \"hasBlood\" : true,<<newline>>""  <<newline>>""  \"experience\" : 20,<<newline>>""  \"score\" : 50,<<newline>>""  <<newline>>""  \"animations\" : <<newline>>""  {<<newline>>""    \"stand\" : <<newline>>""    {<<newline>>""        \"baseFolder\" : \"art\",<<newline>>""        \"looped\" : true,<<newline>>""        \"frameDuration\" : 0.5,<<newline>>""        \"frames\":<<newline>>""        [<<newline>>""            \"0.png\"<<newline>>""        ]<<newline>>""    },<<newline>>""    <<newline>>""    \"walk\" : <<newline>>""    {<<newline>>""        \"baseFolder\" : \"art\",<<newline>>""        \"looped\" : true,<<newline>>""        \"frameDuration\" : 0.1,<<newline>>""        \"frames\":<<newline>>""        [<<newline>>""            \"0.png\",<<newline>>""            \"1.png\",<<newline>>""            \"2.png\",<<newline>>""            \"3.png\",<<newline>>""            \"0.png\",<<newline>>""            \"4.png\",<<newline>>""            \"5.png\",<<newline>>""            \"6.png\"<<newline>>""        ]<<newline>>""    },<<newline>>""    <<newline>>""    \"attack\" : <<newline>>""    {<<newline>>""        \"baseFolder\" : \"art\",<<newline>>""        \"frameDuration\" : 0.1,<<newline>>""        \"frames\":<<newline>>""        [<<newline>>""            \"7.png\",<<newline>>""            \"8.png\",<<newline>>""            \"9.png\",<<newline>>""            \"10.png\",<<newline>>""            \"11.png\"<<newline>>""        ]<<newline>>""    }<<newline>>""  },<<newline>>""  <<newline>>""  \"scriptFile\" : \"alien.lua\",<<newline>>""  \"scriptName\" : \"Alien\",<<newline>>""  <<newline>>""  \"bodyParts\" : [<<newline>>""    \"art/head.png\",<<newline>>""    [\"art/arm1.png\", 8.0, -30],<<newline>>""    [\"art/arm2.png\", 8.0, 30],<<newline>>""    [\"art/part1.png\", -4, -24],<<newline>>""    [\"art/part2.png\", -3, 21],<<newline>>""    [\"art/part3.png\", -13.0, 6.0],<<newline>>""    [\"art/part4.png\", 23.0, -29.0],<<newline>>""    [\"art/part5.png\", 18.0, 26.0]<<newline>>""  ],<<newline>>""  <<newline>>""  \"bodyPartBits\" : [<<newline>>""    \"art/bit0.png\", <<newline>>""    \"art/bit1.png\", <<newline>>""    \"art/bit2.png\", <<newline>>""    \"art/bit3.png\", <<newline>>""    \"art/bit4.png\", <<newline>>""    \"art/bit5.png\", <<newline>>""    \"art/bit6.png\", <<newline>>""    \"art/bit7.png\", <<newline>>""    \"art/bit8.png\" <<newline>>""  ],<<newline>>""  <<newline>>""  \"hitSounds\" : [<<newline>>""    \"~/resources/sounds/monster_hit/hit_0.ogg\", <<newline>>""    \"~/resources/sounds/monster_hit/hit_1.ogg\", <<newline>>""    \"~/resources/sounds/monster_hit/hit_2.ogg\"<<newline>>""  ],<<newline>>""  <<newline>>""  \"killSounds\" : [<<newline>>""    \"~/resources/sounds/monster_hit/die_0.ogg\", <<newline>>""    \"~/resources/sounds/monster_hit/die_1.ogg\", <<newline>>""    \"~/resources/sounds/monster_hit/die_2.ogg\", <<newline>>""    \"~/resources/sounds/monster_hit/die_3.ogg\", <<newline>>""    \"~/resources/sounds/monster_hit/die_4.ogg\", <<newline>>""    \"~/resources/sounds/monster_hit/die_5.ogg\",<<newline>>""    \"~/resources/sounds/monster_hit/hit_0.ogg\", <<newline>>""    \"~/resources/sounds/monster_hit/hit_1.ogg\", <<newline>>""    \"~/resources/sounds/monster_hit/hit_2.ogg\"<<newline>>""  ]<<newline>>""  <<newline>>""}"}, 
{"resources/monsters/alien/alien.lua", "<<newline>>""function Alien.init(monster)<<newline>>""    data = monster.data<<newline>>""    monster:setScale(math.random() * 0.3 + 0.6)<<newline>>""<<newline>>""    local diff = player.position - monster.position<<newline>>""    <<newline>>""    monster.moveSpeed = 0<<newline>>""    monster.moveAngle =  0<<newline>>""    data.moving = true<<newline>>""    data.lastHitTime = 0.0<<newline>>""    <<newline>>""    monster:playAnimation(\"walk\", math.random())<<newline>>""    <<newline>>""    data.maxMoveSpeed = 110.0 * (math.random() * 0.2 + 0.9)<<newline>>""    data.maxRotateSpeed = 0.02<<newline>>""    data.playerSeeRange =  150.0<<newline>>""    <<newline>>""    <<newline>>""    StunController.init(monster)<<newline>>""    MonsterGroupHelper.init(monster)<<newline>>""    MonsterMeleeHelper.init(monster)<<newline>>""    data.minDamage = 10<<newline>>""    data.maxDamage = 16<<newline>>""    <<newline>>""    data.targetShift = Vec2.randDir() * (math.random() * 400.0 - 200.0)<<newline>>""    <<newline>>""    data.tickWaitTime = 0.0<<newline>>""    data.time = time + math.random() * 10.0<<newline>>""    BulletShooter.init(monster)<<newline>>""end<<newline>>""<<newline>>""function Alien.spawnChanceInMission(missionData, min)<<newline>>""    return 1.0<<newline>>""end<<newline>>""<<newline>>""function Alien.buffStats(monster, min)<<newline>>""    StunController.buffStats(monster, min)<<newline>>""    MonsterMeleeHelper.buffStats(monster, min)<<newline>>""    BulletShooter.buffStats(monster, min)<<newline>>""    <<newline>>""    if monster.data.randomMove ~= false then<<newline>>""        monster.data.randomMove = (math.random() > (0.15 + clamp(min * 0.2) * 0.15))<<newline>>""    end<<newline>>""    monster.data.playerSeeRange = monster.data.playerSeeRange * (1.0 +  clamp(min * 0.1) * 2.0)<<newline>>""    monster.data.maxMoveSpeed =  monster.data.maxMoveSpeed * (1.0 + clamp(min  / 10) * 0.30)<<newline>>""    monster.data.maxRotateSpeed =  monster.data.maxRotateSpeed * (1.0 + clamp(min * 0.05) * 1.0)<<newline>>""end<<newline>>""<<newline>>""function Alien.makeBoss(monster, min)<<newline>>""    makeBossDefault(monster)<<newline>>""end<<newline>>""<<newline>>""function Alien.onHit(monster, damage, dir, args)<<newline>>""    StunController.onHit(monster, damage, dir, args)<<newline>>""end<<newline>>""<<newline>>""function Alien.onTick(monster)<<newline>>""    data = monster.data<<newline>>""    if data.randomMove and time - data.time > 60.0 then<<newline>>""        data.randomMove = false<<newline>>""    end<<newline>>""    diffToPlayer = player.position - monster.position <<newline>>""    distanceToPlayer = diffToPlayer:length()<<newline>>""    angleToPlayer = diffToPlayer:getAngle()<<newline>>""<<newline>>""    data.tickWaitTime = data.tickWaitTime - dt<<newline>>""    if data.tickWaitTime < 0.0 then<<newline>>""        data.tickWaitTime = 0.2 + math.random() * 0.2 + lerp(0.0, 1.2, clamp((distanceToPlayer - 100) / 1500))<<newline>>""        <<newline>>""        local t = clamp(distanceToPlayer / 150.0 - 0.3)<<newline>>""        local playerPosShift = player.position + data.targetShift * t<<newline>>""        local posToMove = playerPosShift<<newline>>""        <<newline>>""        if data.randomMove or player.isDead then<<newline>>""            posToMove = data.randomPos<<newline>>""            if posToMove == nil or posToMove:distanceSquared(monster.position) < 60 * 60 then<<newline>>""                posToMove = getRandomMapPosition()<<newline>>""                data.randomPos = posToMove<<newline>>""            end<<newline>>""            <<newline>>""            if distanceToPlayer < data.playerSeeRange and player.isDead == false  then<<newline>>""                local c = (distanceToPlayer - data.playerSeeRange * 0.5) / data.playerSeeRange * 0.5<<newline>>""                if c < 0.0 then<<newline>>""                    c = 0.0<<newline>>""                end<<newline>>""                posToMove = posToMove * c + playerPosShift * (1.0 - c)<<newline>>""            end<<newline>>""        end<<newline>>""        <<newline>>""        data.posToMove = posToMove<<newline>>""        local oldPosToMove = posToMove<<newline>>""        posToMove = monster:getPathPos(posToMove)<<newline>>""        <<newline>>""        --data.p = posToMove<<newline>>""        diffToMovePos = posToMove - monster.position<<newline>>""        distanceToMovePos = diffToMovePos:length()<<newline>>""        angleToMovePos = diffToMovePos:getAngle()<<newline>>""        if oldPosToMove:distanceSquared(posToMove) > 1.0 then<<newline>>""            data.moveAngle = angleToMovePos<<newline>>""        else<<newline>>""            data.moveAngle = MonsterGroupHelper.fixAngle(monster, angleToMovePos)<<newline>>""        end<<newline>>""        <<newline>>""    end<<newline>>""<<newline>>""    BulletShooter.onTick(monster)<<newline>>""    MonsterMeleeHelper.onTick(monster)<<newline>>""    monster.moveAngle = approachAngle(monster.moveAngle, data.moveAngle, data.maxRotateSpeed * timeScale)<<newline>>""    <<newline>>""    if data.moving then<<newline>>""        monster.moveSpeed = data.maxMoveSpeed * StunController.getSlowAmount(monster);<<newline>>""    else<<newline>>""        monster.moveSpeed = 0.0;<<newline>>""    end<<newline>>""    <<newline>>""    --addLine(monster.position, data.p)<<newline>>""end<<newline>>"""}, 
{"resources/monsters/egg/data.json", "{<<newline>>""  \"type\" : \"monster\",<<newline>>""  \"name\": \"Egg\",<<newline>>""  \"hitPoint\": 300,<<newline>>""  \"size\" : [50.0, 42.5],<<newline>>""  \"textureShift\" : [0.0, 5.0],<<newline>>""  \"bulletRadius\" : 28.0,<<newline>>""  \"collisionRadius\" : 22.0,<<newline>>""  \"hasBlood\" : true,<<newline>>""  <<newline>>""  \"experience\" : 50,<<newline>>""  \"score\" : 100,<<newline>>""  <<newline>>""  \"animations\" : <<newline>>""  {<<newline>>""    \"stand\" : <<newline>>""    {<<newline>>""        \"baseFolder\" : \"art\",<<newline>>""        \"looped\" : true,<<newline>>""        \"frameDuration\" : 0.12,<<newline>>""        \"frames\":<<newline>>""        [<<newline>>""            [\"0.png\", 0.8],<<newline>>""            \"1.png\",<<newline>>""            \"2.png\",<<newline>>""            \"3.png\",<<newline>>""            \"4.png\",<<newline>>""            \"5.png\",<<newline>>""            [\"6.png\", 0.4],<<newline>>""            \"5.png\",<<newline>>""            \"4.png\",<<newline>>""            \"3.png\",<<newline>>""            \"2.png\",<<newline>>""            \"1.png\"<<newline>>""        ]<<newline>>""    }<<newline>>""  },<<newline>>""  <<newline>>""  \"scriptFile\" : \"egg.lua\",<<newline>>""  \"scriptName\" : \"Egg\",<<newline>>""  <<newline>>""  \"bitSpeed\" : 0.4,<<newline>>""  <<newline>>""  \"bodyParts\" : [<<newline>>""    [\"art/part0.png\", 118, -118],<<newline>>""    [\"art/part1.png\", -14.55, -275.6],<<newline>>""    [\"art/part2.png\", 334.7, 43.65],<<newline>>""    [\"art/part3.png\", 186.1, -219],<<newline>>""    [\"art/part4.png\", -25.55, -215.6],<<newline>>""    [\"art/part5.png\", -130, 220],<<newline>>""    [\"art/part6.png\", -16, 56],<<newline>>""    [\"art/part7.png\", -222, -32],<<newline>>""    [\"art/part8.png\", 130, 234],<<newline>>""    [\"art/part9.png\", 186, 116]<<newline>>""  ],<<newline>>""  <<newline>>""  \"bodyPartBits\" : [<<newline>>""    \"art/bit0.png\", <<newline>>""    \"art/bit1.png\", <<newline>>""    \"art/bit2.png\", <<newline>>""    \"art/bit3.png\"<<newline>>""  ],<<newline>>""  <<newline>>""  \"hitSounds\" : [<<newline>>""    \"~/resources/sounds/monster_hit/hit_0.ogg\", <<newline>>""    \"~/resources/sounds/monster_hit/hit_1.ogg\", <<newline>>""    \"~/resources/sounds/monster_hit/hit_2.ogg\"<<newline>>""  ],<<newline>>""  <<newline>>""  \"killSounds\" : [<<newline>>""    \"~/resources/sounds/monster_hit/hit_0.ogg\", <<newline>>""    \"~/resources/sounds/monster_hit/hit_1.ogg\", <<newline>>""    \"~/resources/sounds/monster_hit/hit_2.ogg\"<<newline>>""  ]<<newline>>""}"}, 
{"resources/monsters/egg/egg.lua", "<<newline>>""function Egg.init(monster, min)<<newline>>""    data = monster.data<<newline>>""    monster:setScale(math.random() * 0.2 + 0.8)<<newline>>""<<newline>>""    monster.moveSpeed = 0<<newline>>""    monster.moveAngle =  math.random() * math.pi * 2.0<<newline>>""    <<newline>>""    monster:playAnimation(\"stand\", math.random())<<newline>>""    <<newline>>""    monster:modifyDrawLevel(2)<<newline>>""    monster.colorMultiplier:addBuff(Vec4.new(0.6, 0.6, 0.6, 1.0))<<newline>>""    <<newline>>""    data.spawnInterval = 3.0 + math.random() * 0.5<<newline>>""    data.spawnTime = data.spawnInterval * (3.0 + math.random())<<newline>>""    <<newline>>""    data.cannotBecomeBoss = true<<newline>>""    data.cannotShootBullets = true<<newline>>""    <<newline>>""    data.monsterType = \"Alien\"<<newline>>""    if math.random() < 0.07 then<<newline>>""        data.monsterType = \"Spider\"<<newline>>""    end<<newline>>""    monster.knockbackResistance:addBuff(0.1)<<newline>>""    <<newline>>""    if missionData.eggCount == nil then<<newline>>""        missionData.eggCount = 0<<newline>>""    end<<newline>>""    missionData.eggCount = missionData.eggCount + 1<<newline>>""    calcRandomSpawns()<<newline>>""end<<newline>>""<<newline>>""function Egg.spawnChanceInMission(missionData, min)<<newline>>""    if missionData.isSurvival ~= true  then<<newline>>""        return 0.0<<newline>>""    end<<newline>>""    if missionData.eggCount ~= nil and missionData.eggCount > 1 + math.min(min, 4.0) then<<newline>>""        return 0.0<<newline>>""    end<<newline>>""    return 0.03 + clamp(min * 0.3) * 0.04<<newline>>""end<<newline>>""<<newline>>""function Egg.buffStats(monster, min)<<newline>>""    monster.data.spawnInterval = monster.data.spawnInterval - clamp(min/10)<<newline>>""end<<newline>>""<<newline>>""function Egg.onKilled(monster)<<newline>>""    missionData.eggCount = missionData.eggCount - 1<<newline>>""    <<newline>>""end<<newline>>""<<newline>>""function Egg.onTick(monster)<<newline>>""    data = monster.data<<newline>>""    <<newline>>""    data.spawnTime = data.spawnTime - dt<<newline>>""    <<newline>>""    if data.spawnTime < 0.0 then<<newline>>""        data.spawnTime = data.spawnTime + data.spawnInterval<<newline>>""        <<newline>>""        if canSpawnIgnoredMonster() then<<newline>>""            local m = addRandomMonster(data.monsterType, true, true, 1.0)<<newline>>""            m:setScale(m.scale * 0.8)<<newline>>""            m.position = monster.position<<newline>>""            ignoreMonsterForCount(m)<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""<<newline>>""function Egg.getRandomSpawnPos()<<newline>>""    return getRandomPosition( {canBeEdge=false, notNearPlayer=true, notNearMonsters=true, playerRange=800.0})<<newline>>""end"}, 
{"resources/monsters/spider/data.json", "{<<newline>>""  \"type\" : \"monster\",<<newline>>""  \"name\": \"Spider\",<<newline>>""  \"hitPoint\": 100,<<newline>>""  \"size\" : [30.0, 30.0],<<newline>>""  \"textureShift\" : [0.0, 0.0],<<newline>>""  \"bulletRadius\" : 19.0,<<newline>>""  \"collisionRadius\" : 12.0,<<newline>>""  \"hasBlood\" : true,<<newline>>""  <<newline>>""  \"experience\" : 20,<<newline>>""  \"score\" : 50,<<newline>>""  <<newline>>""  \"animations\" : <<newline>>""  {<<newline>>""    \"stand\" : <<newline>>""    {<<newline>>""        \"baseFolder\" : \"art\",<<newline>>""        \"looped\" : true,<<newline>>""        \"frameDuration\" : 0.5,<<newline>>""        \"frames\":<<newline>>""        [<<newline>>""            \"s0.png\"<<newline>>""        ]<<newline>>""    },<<newline>>""    <<newline>>""    \"walk\" : <<newline>>""    {<<newline>>""        \"baseFolder\" : \"art\",<<newline>>""        \"looped\" : true,<<newline>>""        \"frameDuration\" : 0.1,<<newline>>""        \"frames\":<<newline>>""        [<<newline>>""            \"s0.png\",<<newline>>""            \"s1.png\",<<newline>>""            \"s2.png\",<<newline>>""            \"s1.png\"<<newline>>""        ]<<newline>>""    },<<newline>>""    <<newline>>""    \"attack\" : <<newline>>""    {<<newline>>""        \"baseFolder\" : \"art\",<<newline>>""        \"frameDuration\" : 0.1,<<newline>>""        \"frames\":<<newline>>""        [<<newline>>""            \"s0.png\",<<newline>>""            \"a0.png\",<<newline>>""            \"a1.png\",<<newline>>""            \"a2.png\",<<newline>>""            \"a3.png\",<<newline>>""            \"a1.png\"<<newline>>""        ]<<newline>>""    }<<newline>>""  },<<newline>>""  <<newline>>""  \"scriptFile\" : \"spider.lua\",<<newline>>""  \"scriptName\" : \"Spider\",<<newline>>""  <<newline>>""  \"bodyParts\" : [<<newline>>""    [\"art/part0.png\", 17.0, 0.0],<<newline>>""    [\"art/part1.png\", 5.0, 19.5],<<newline>>""    [\"art/part2.png\", 5.0, -16.5],<<newline>>""    [\"art/part3.png\", -13.0, -18.0],<<newline>>""    [\"art/part4.png\", -12.5, 4.5],<<newline>>""    [\"art/part5.png\", -4.5, 0.0],<<newline>>""    [\"art/part6.png\", -4.0, 17.5]<<newline>>""  ],<<newline>>""  <<newline>>""  \"bodyPartBits\" : [<<newline>>""    \"art/bit0.png\", <<newline>>""    \"art/bit1.png\", <<newline>>""    \"art/bit2.png\", <<newline>>""    \"art/bit3.png\", <<newline>>""    \"art/bit4.png\", <<newline>>""    \"art/bit5.png\", <<newline>>""    \"art/bit6.png\", <<newline>>""    \"art/bit7.png\", <<newline>>""    \"art/bit8.png\"<<newline>>""  ],<<newline>>""  <<newline>>""  \"hitSounds\" : [<<newline>>""    \"~/resources/sounds/monster_hit/hit_0.ogg\", <<newline>>""    \"~/resources/sounds/monster_hit/hit_1.ogg\", <<newline>>""    \"~/resources/sounds/monster_hit/hit_2.ogg\"<<newline>>""  ], <<newline>>""  <<newline>>""  \"killSounds\" : [<<newline>>""    \"~/resources/sounds/monster_hit/hit_0.ogg\", <<newline>>""    \"~/resources/sounds/monster_hit/hit_1.ogg\", <<newline>>""    \"~/resources/sounds/monster_hit/hit_2.ogg\"<<newline>>""  ]<<newline>>""  <<newline>>""  <<newline>>""}"}, 
{"resources/monsters/spider/spider.lua", "<<newline>>""function Spider.init(monster)<<newline>>""    data = monster.data<<newline>>""    monster:setScale(math.random() * 0.4 + 0.5)<<newline>>""<<newline>>""    local diff = player.position - monster.position<<newline>>""    <<newline>>""    monster.moveSpeed = 0<<newline>>""    monster.moveAngle = math.random() * math.pi * 2.0<<newline>>""    <<newline>>""    monster.pathCheckDistance = 300.0<<newline>>""    <<newline>>""    data.targetAngle = monster.moveAngle - 0.4 + math.random() * 0.8<<newline>>""    data.moving = true<<newline>>""    data.lastHitTime = 0.0<<newline>>""    <<newline>>""    monster.data.moveTimer = -0.5 + math.random() * 2.5<<newline>>""    if monster.data.moveTimer > 0.0 then<<newline>>""        monster:playAnimation(\"walk\", math.random())<<newline>>""    else<<newline>>""        monster:playAnimation(\"stand\", math.random())<<newline>>""    <<newline>>""    end<<newline>>""    <<newline>>""    StunController.init(monster)<<newline>>""    <<newline>>""    MonsterGroupHelper.init(monster)<<newline>>""    data.playerIgnoreDistance = 30.0<<newline>>""    <<newline>>""    MonsterMeleeHelper.init(monster)<<newline>>""    data.hitWaitTime = 0.1<<newline>>""    data.hitInterval = 0.9<<newline>>""    data.minDamage = 8<<newline>>""    data.maxDamage = 14<<newline>>""    <<newline>>""    data.maxMoveSpeed = 200.0 * (math.random() * 0.1 + 1.0)<<newline>>""    data.maxRotateSpeed = 0.04<<newline>>""    data.playerSeeRange = 250.0<<newline>>""    <<newline>>""    data.tickWaitTime = 0.0<<newline>>""    <<newline>>""    data.randomShiftAngle = 0.0<<newline>>""    <<newline>>""    data.tickWaitTime = 0.0<<newline>>""    <<newline>>""    BulletShooter.init(monster)<<newline>>""end<<newline>>""<<newline>>""function Spider.spawnChanceInMission(missionData, min)<<newline>>""    return 0.15 + clamp(min * 0.3) * 0.10<<newline>>""end<<newline>>"" <<newline>>""function Spider.buffStats(monster, min)<<newline>>""    StunController.buffStats(monster, min)<<newline>>""    MonsterMeleeHelper.buffStats(monster, min)<<newline>>""    BulletShooter.buffStats(monster, min)<<newline>>""    <<newline>>""    monster.data.randomMove = (math.random() > (0.15 + clamp(min * 0.2) * 0.15))<<newline>>""    monster.data.playerSeeRange = monster.data.playerSeeRange * (1.0 +  clamp(min * 0.1) * 2.0)<<newline>>""    monster.data.maxMoveSpeed =  monster.data.maxMoveSpeed * (1.0 + clamp(min  / 10) * 0.20)<<newline>>""    monster.data.maxRotateSpeed =  monster.data.maxRotateSpeed * (1.0 + clamp(min * 0.05) * 1.0)<<newline>>""end<<newline>>""<<newline>>""function Spider.makeBoss(monster, min)<<newline>>""    makeBossDefault(monster)<<newline>>""end<<newline>>""<<newline>>""function Spider.onHit(monster, damage, dir, args)<<newline>>""    StunController.onHit(monster, damage, dir, args)<<newline>>""end<<newline>>""<<newline>>""function Spider.onTick(monster)<<newline>>""    data = monster.data<<newline>>""    <<newline>>""    data.tickWaitTime = data.tickWaitTime - dt<<newline>>""    <<newline>>""    diffToPlayer = player.position - monster.position<<newline>>""    distanceToPlayer = diffToPlayer:length()<<newline>>""    angleToPlayer = diffToPlayer:getAngle()<<newline>>""    <<newline>>""    if data.tickWaitTime < 0.0 then<<newline>>""        data.tickWaitTime = 0.2 + math.random() * 0.2 + lerp(0.0, 1.2, clamp((distanceToPlayer - 100) / 1500))<<newline>>""        local posToMove = player.position<<newline>>""        <<newline>>""        if data.randomMove or player.isDead then<<newline>>""            posToMove = data.randomPos<<newline>>""            if posToMove == nil or posToMove:distanceSquared(monster.position) < 60 * 60 then<<newline>>""                posToMove = getRandomMapPosition()<<newline>>""                data.randomPos = posToMove<<newline>>""            end<<newline>>""                <<newline>>""            if distanceToPlayer < data.playerSeeRange and player.isDead == false then<<newline>>""                local c = (distanceToPlayer - data.playerSeeRange * 0.8) / data.playerSeeRange * 0.2<<newline>>""                if c < 0.0 then<<newline>>""                    c = 0.0<<newline>>""                end<<newline>>""                posToMove = posToMove * c + player.position * (1.0 - c)<<newline>>""            end<<newline>>""        end<<newline>>""        <<newline>>""        <<newline>>""        posToMove = monster:getPathPos(posToMove)<<newline>>""        <<newline>>""        diffToMovePos = posToMove - monster.position<<newline>>""        distanceToMovePos = diffToMovePos:length()<<newline>>""        angleToMovePos = diffToMovePos:getAngle()<<newline>>""        <<newline>>""        data.targetAngleToMovePos = angleToMovePos<<newline>>""        data.posToMove = posToMove<<newline>>""    end<<newline>>""<<newline>>""    MonsterMeleeHelper.onTick(monster)<<newline>>""    BulletShooter.onTick(monster)<<newline>>""    <<newline>>""    if data.moveTimer > 0.0 then<<newline>>""        local moveNewAngle = MonsterGroupHelper.fixAngle(monster, data.targetAngleToMovePos)<<newline>>""        local cPlayer = clamp((distanceToPlayer - 100.0) / 100.0)<<newline>>""        monster.moveAngle = approachAngle(monster.moveAngle, moveNewAngle, (data.maxRotateSpeed * (1.1 - cPlayer) ) * timeScale)<<newline>>""        data.moveTimer = data.moveTimer - dt<<newline>>""        if data.moveTimer <= 0.0 then<<newline>>""            monster:playAnimation(\"stand\", math.random())<<newline>>""        end<<newline>>""        <<newline>>""        if data.moving then<<newline>>""            monster.moveSpeed = data.maxMoveSpeed * StunController.getSlowAmount(monster);<<newline>>""        else<<newline>>""            monster.moveSpeed = 0.0;<<newline>>""        end<<newline>>""    else<<newline>>""        monster.moveSpeed = 0.0<<newline>>""        data.moveTimer = data.moveTimer - dt<<newline>>""        if data.moveTimer <= -1.0 then<<newline>>""            monster:playAnimation(\"walk\", math.random())<<newline>>""            monster.data.moveTimer = 0.5 + math.random() * 2.5<<newline>>""            data.randomPos = getRandomMapPosition()<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>"""}, 
{"resources/particles/bulletTrail/data.json", "{<<newline>>""  \"type\" : \"particle\",<<newline>>""  \"maxLifeTime\" : 3.0,<<newline>>""  \"isStrip\" : true,<<newline>>""  <<newline>>""  \"vertexShader\" : \"shader.vs\",<<newline>>""  \"pixelShader\" : \"shader.ps\",<<newline>>""  <<newline>>""  \"textures\" : \"particle.png\",<<newline>>""  <<newline>>""  \"scriptFile\" : \"script.lua\",<<newline>>""  \"scriptName\" : \"BulletTrailParticle\"<<newline>>""}"}, 
{"resources/particles/critical/data.json", "{<<newline>>""  \"type\" : \"particle\",<<newline>>""  \"maxLifeTime\" : 3.0,<<newline>>""  <<newline>>""  \"vertexShader\" : \"shader.vs\",<<newline>>""  \"pixelShader\" : \"shader.ps\",<<newline>>""  <<newline>>""  \"textures\" : \"critical.png\",<<newline>>""  <<newline>>""  \"scriptFile\" : \"script.lua\",<<newline>>""  \"scriptName\" : \"CriticalParticle\"<<newline>>""}"}, 
{"resources/particles/explosionFire/data.json", "{<<newline>>""    \"type\" : \"particle\",<<newline>>""    \"maxLifeTime\" : 5.0,<<newline>>""    <<newline>>""    \"vertexShader\" : \"shader.vs\",<<newline>>""    \"pixelShader\" : \"shader.ps\",<<newline>>""    <<newline>>""    \"textures\" : [\"fire2.png\"],<<newline>>""    <<newline>>""    \"scriptFile\" : \"script.lua\",<<newline>>""    \"scriptName\" : \"ExplosionFireParticle\",<<newline>>""    <<newline>>""    \"needsLuaRandoms\" : false,<<newline>>""    <<newline>>""    \"uniformRandoms\" : [<<newline>>""        {<<newline>>""            \"name\" : \"moveSpeed\",<<newline>>""            \"type\" : \"angular\",<<newline>>""            \"min\"  : 20,<<newline>>""            \"max\"  : 150.0<<newline>>""        },<<newline>>""        {<<newline>>""            \"name\" : \"uvStart\",<<newline>>""            \"type\" : \"vector\"<<newline>>""        },<<newline>>""        {<<newline>>""            \"name\" : \"uvSize\",<<newline>>""            \"type\" : \"vector\",<<newline>>""            \"min\"  : [0.45, 0.45],<<newline>>""            \"max\"  : [0.55, 0.55]<<newline>>""        },<<newline>>""        {<<newline>>""            \"name\" : \"color\",<<newline>>""            \"type\" : \"linear\"<<newline>>""        },<<newline>>""        {<<newline>>""            \"name\" : \"uvShift\",<<newline>>""            \"type\" : \"angular\",<<newline>>""            \"min\"  : 0.1,<<newline>>""            \"max\"  : 0.15<<newline>>""        }<<newline>>""    ]<<newline>>""<<newline>>""}"}, 
{"resources/particles/flame/data.json", "{<<newline>>""    \"type\" : \"particle\",<<newline>>""    \"maxLifeTime\" : 3.0,<<newline>>""    <<newline>>""    \"vertexShader\" : \"shader.vs\",<<newline>>""    \"pixelShader\" : \"shader.ps\",<<newline>>""    <<newline>>""    \"textures\" : \"flame.png\",<<newline>>""    <<newline>>""    \"scriptFile\" : \"script.lua\",<<newline>>""    \"scriptName\" : \"FlameParticle\"<<newline>>""}"}, 
{"resources/particles/flareTrail/data.json", "{<<newline>>""  \"type\" : \"particle\",<<newline>>""  \"maxLifeTime\" : 3.0,<<newline>>""  <<newline>>""  \"vertexShader\" : \"shader.vs\",<<newline>>""  \"pixelShader\" : \"shader.ps\",<<newline>>""  <<newline>>""  \"textures\" : \"particle.png\",<<newline>>""  <<newline>>""  \"scriptFile\" : \"script.lua\",<<newline>>""  \"scriptName\" : \"FlareTrailParticle\"<<newline>>""}"}, 
{"resources/particles/plasmaTrail/data.json", "{<<newline>>""  \"type\" : \"particle\",<<newline>>""  \"maxLifeTime\" : 3.0,<<newline>>""  <<newline>>""  \"vertexShader\" : \"shader.vs\",<<newline>>""  \"pixelShader\" : \"shader.ps\",<<newline>>""  <<newline>>""  \"textures\" : \"particle.png\",<<newline>>""  <<newline>>""  \"scriptFile\" : \"script.lua\",<<newline>>""  \"scriptName\" : \"PlasmaTrailParticle\"<<newline>>""}"}, 
{"resources/particles/railgunTrail/data.json", "{<<newline>>""  \"type\" : \"particle\",<<newline>>""  \"maxLifeTime\" : 3.0,<<newline>>""  <<newline>>""  \"vertexShader\" : \"shader.vs\",<<newline>>""  \"pixelShader\" : \"shader.ps\",<<newline>>""  <<newline>>""  \"textures\" : \"particle.png\",<<newline>>""  <<newline>>""  \"scriptFile\" : \"script.lua\",<<newline>>""  \"scriptName\" : \"RailGunParticle\"<<newline>>""}"}, 
{"resources/particles/rainbowstrip/data.json", "{<<newline>>""  \"type\" : \"particle\",<<newline>>""  \"maxLifeTime\" : 1.0,<<newline>>""  \"isStripLaser\" : true,<<newline>>""  <<newline>>""  \"vertexShader\" : \"shader.vs\",<<newline>>""  \"pixelShader\" : \"shader.ps\",<<newline>>""  <<newline>>""  \"scriptFile\" : \"script.lua\",<<newline>>""  \"scriptName\" : \"RainbowStrip\"<<newline>>""}"}, 
{"resources/particles/rocketSmoke/data.json", "{<<newline>>""    \"type\" : \"particle\",<<newline>>""    \"maxLifeTime\" : 3.0,<<newline>>""    <<newline>>""    \"vertexShader\" : \"shader.vs\",<<newline>>""    \"pixelShader\" : \"shader.ps\",<<newline>>""    <<newline>>""    \"textures\" : \"particle.png\",<<newline>>""    <<newline>>""    \"scriptFile\" : \"script.lua\",<<newline>>""    \"scriptName\" : \"RocketSmokeParticle\",<<newline>>""    <<newline>>""    \"needsLuaRandoms\" : false,<<newline>>""    <<newline>>""    \"uniformRandoms\" : [<<newline>>""        {<<newline>>""            \"name\" : \"moveSpeed\",<<newline>>""            \"type\" : \"angular\",<<newline>>""            \"min\"  : 2.0,<<newline>>""            \"max\"  : 10.0<<newline>>""        },<<newline>>""        {<<newline>>""            \"name\" : \"color\",<<newline>>""            \"type\" : \"linear\",<<newline>>""            \"min\"  : 0.2,<<newline>>""            \"max\"  : 0.5<<newline>>""        },<<newline>>""        {<<newline>>""            \"name\" : \"initialScale\",<<newline>>""            \"type\" : \"linear\",<<newline>>""            \"min\"  : 4.0,<<newline>>""            \"max\"  : 6.0<<newline>>""        },<<newline>>""        {<<newline>>""            \"name\" : \"scaleSpeed\",<<newline>>""            \"type\" : \"linear\",<<newline>>""            \"min\"  : 6.0,<<newline>>""            \"max\"  : 12.0<<newline>>""        },<<newline>>""        {<<newline>>""            \"name\" : \"initialAlpha\",<<newline>>""            \"type\" : \"linear\",<<newline>>""            \"min\"  : 0.5,<<newline>>""            \"max\"  : 1.0<<newline>>""        },<<newline>>""        {<<newline>>""            \"name\" : \"fadeOutSpeed\",<<newline>>""            \"type\" : \"linear\",<<newline>>""            \"min\"  : 0.4,<<newline>>""            \"max\"  : 0.8<<newline>>""        }<<newline>>""    ]<<newline>>""}"}, 
{"resources/particles/rocketSmokeBig/data.json", "{<<newline>>""    \"type\" : \"particle\",<<newline>>""    \"maxLifeTime\" : 1.0,<<newline>>""    <<newline>>""    \"vertexShader\" : \"shader.vs\",<<newline>>""    \"pixelShader\" : \"shader.ps\",<<newline>>""    <<newline>>""    \"textures\" : \"particle.png\",<<newline>>""    <<newline>>""    \"scriptFile\" : \"script.lua\",<<newline>>""    \"scriptName\" : \"RocketSmokeParticleBig\",<<newline>>""    <<newline>>""    \"needsLuaRandoms\" : false,<<newline>>""    <<newline>>""    \"uniformRandoms\" : [<<newline>>""        {<<newline>>""            \"name\" : \"moveSpeed\",<<newline>>""            \"type\" : \"angular\",<<newline>>""            \"min\"  : 2.0,<<newline>>""            \"max\"  : 10.0<<newline>>""        },<<newline>>""        {<<newline>>""            \"name\" : \"color\",<<newline>>""            \"type\" : \"linear\",<<newline>>""            \"min\"  : 0.2,<<newline>>""            \"max\"  : 0.5<<newline>>""        },<<newline>>""        {<<newline>>""            \"name\" : \"fadeOutSpeed\",<<newline>>""            \"type\" : \"linear\",<<newline>>""            \"min\"  : 1.0,<<newline>>""            \"max\"  : 1.4<<newline>>""        },<<newline>>""        {<<newline>>""            \"name\" : \"initialScale\",<<newline>>""            \"type\" : \"linear\",<<newline>>""            \"min\"  : 8.0,<<newline>>""            \"max\"  : 10.0<<newline>>""        },<<newline>>""        {<<newline>>""            \"name\" : \"scaleSpeed\",<<newline>>""            \"type\" : \"linear\",<<newline>>""            \"min\"  : 12.0,<<newline>>""            \"max\"  : 14.0<<newline>>""        },<<newline>>""        {<<newline>>""            \"name\" : \"initialAlpha\",<<newline>>""            \"type\" : \"linear\",<<newline>>""            \"min\"  : 0.5,<<newline>>""            \"max\"  : 1.0<<newline>>""        }<<newline>>""    ]<<newline>>""}<<newline>>"""}, 
{"resources/particles/striptest/data.json", "{<<newline>>""  \"type\" : \"particle\",<<newline>>""  \"maxLifeTime\" : 10.0,<<newline>>""  \"isStripLaser\" : true,<<newline>>""  <<newline>>""  \"vertexShader\" : \"shader.vs\",<<newline>>""  \"pixelShader\" : \"shader.ps\",<<newline>>""  <<newline>>""  \"scriptFile\" : \"script.lua\",<<newline>>""  \"scriptName\" : \"StripTestParticle\"<<newline>>""}"}, 
{"resources/perks/critical/data.json", "{<<newline>>""  \"type\" : \"perk\",<<newline>>""  \"name\": \"Critical Bullets\",<<newline>>""  \"description\": \"Your bullets randomly become critical bullets and deal more damage. Plus they are shiny!\",<<newline>>""  \"iconFile\" : \"\",<<newline>>""  \"scriptFile\" : \"critical.lua\",<<newline>>""  \"scriptName\" : \"CriticalBullets\"<<newline>>""}"}, 
{"resources/perks/critical/critical.lua", "<<newline>>""function CriticalBullets.init()<<newline>>""end<<newline>>""<<newline>>""function CriticalBullets.onAddGunBullet(gun, bullet)<<newline>>""    if math.random() < 0.2 and bullet.data.cannotBeBuffed ~= true then<<newline>>""        bullet.damage = bullet.damage * 4<<newline>>""        bullet.radius = bullet.radius * 2<<newline>>""        bullet:addTrailParticle(\"CriticalParticle\", Vec2.new(0.0, 0.0), 30.0, {})<<newline>>""        bullet.meshScale = bullet.meshScale * 1.5<<newline>>""        bullet:updateDrawable()<<newline>>""    end<<newline>>""end<<newline>>"""}, 
{"resources/perks/dodger/data.json", "{<<newline>>""  \"type\" : \"perk\",<<newline>>""  \"name\": \"Dodger\",<<newline>>""  \"description\": \"You have a chance to dodge damage.\",<<newline>>""  \"iconFile\" : \"\",<<newline>>""  \"scriptFile\" : \"dodger.lua\",<<newline>>""  \"scriptName\" : \"Dodger\"<<newline>>""}"}, 
{"resources/perks/dodger/dodger.lua", "<<newline>>""function Dodger.init()<<newline>>""<<newline>>""end<<newline>>""<<newline>>""function Dodger.onPlayerDamaged(damage, dir, params)<<newline>>""    if damage <= 0 then<<newline>>""        return damage<<newline>>""    end<<newline>>""    if params.doNotDodge ~= true and math.random() < 0.1 then<<newline>>""        return -1<<newline>>""    end<<newline>>""    return damage<<newline>>""end<<newline>>"""}, 
{"resources/perks/double_shoot/data.json", "{<<newline>>""  \"type\" : \"perk\",<<newline>>""  \"name\": \"Double Tap\",<<newline>>""  \"description\": \"You sometimes shoot two bullets in succession.\",<<newline>>""  \"iconFile\" : \"\",<<newline>>""  \"scriptFile\" : \"double_shoot.lua\",<<newline>>""  \"scriptName\" : \"DoubleShoot\"<<newline>>""}"}, 
{"resources/perks/double_shoot/double_shoot.lua", "<<newline>>""function DoubleShoot.init()<<newline>>""end<<newline>>""<<newline>>""function DoubleShoot.onAddGunBullet(gun, bullet)<<newline>>""    if gun.data.timeToNextShoot ~= nil and player.data.lastDoubleShoot + 0.5 < time and math.random() < 0.25 and bullet.data.cannotBeBuffed ~= true and time > player.data.lastDoubleShootCheck then<<newline>>""        gun.data.timeToNextShoot = math.min(time + 0.15, gun.data.timeToNextShoot)<<newline>>""        player.data.lastDoubleShoot = time<<newline>>""    end<<newline>>""    player.data.lastDoubleShootCheck = time<<newline>>""end<<newline>>""<<newline>>""function DoubleShoot.reset()<<newline>>""    player.data.lastDoubleShoot = time<<newline>>""    player.data.lastDoubleShootCheck = time<<newline>>""end<<newline>>"""}, 
{"resources/perks/experience/data.json", "{<<newline>>""  \"type\" : \"perk\",<<newline>>""  \"name\": \"Experience Boost\",<<newline>>""  \"description\": \"You gain a big percentage of experience for your next level.\",<<newline>>""  \"iconFile\" : \"\",<<newline>>""  \"scriptFile\" : \"experience.lua\",<<newline>>""  \"scriptName\" : \"ExperiencePerk\",<<newline>>""  \"maxLevel\" : -1<<newline>>""}"}, 
{"resources/perks/experience/experience.lua", "<<newline>>""function ExperiencePerk.init(level)<<newline>>""    player:gainExperience(math.floor((player.experienceForNextLevel - player.experience) * 0.8))<<newline>>""end<<newline>>"""}, 
{"resources/perks/experience_boost/data.json", "{<<newline>>""  \"type\" : \"perk\",<<newline>>""  \"name\": \"Experience Boost\",<<newline>>""  \"description\": \"Monsters give you more experience.\",<<newline>>""  \"iconFile\" : \"\",<<newline>>""  \"scriptFile\" : \"experience_boost.lua\",<<newline>>""  \"scriptName\" : \"ExperienceBoostPerk\"<<newline>>""}"}, 
{"resources/perks/experience_boost/experience_boost.lua", "<<newline>>""function ExperienceBoostPerk.init()<<newline>>""    player.monsterExperienceMultiplier:addBuff(1.5)<<newline>>""end<<newline>>"""}, 
{"resources/perks/explosion_on_reload/data.json", "{<<newline>>""  \"type\" : \"perk\",<<newline>>""  \"name\": \"Explosion on Reload\",<<newline>>""  \"description\": \"You create a small explosion when your clip becomes empty.\",<<newline>>""  \"iconFile\" : \"\",<<newline>>""  \"scriptFile\" : \"explosion_on_reload.lua\",<<newline>>""  \"scriptName\" : \"ExplosionOnReload\"<<newline>>""}"}, 
{"resources/perks/explosion_on_reload/explosion_on_reload.lua", "<<newline>>""<<newline>>""<<newline>>""function ExplosionOnReload.init()<<newline>>""end<<newline>>""<<newline>>""function ExplosionOnReload.onReload(gun)<<newline>>""    if gun:hasAmmo() == false then<<newline>>""        addExplosion(player.position, 100.0, 200.0, 80, 140)<<newline>>""        playSound({path = \"~/resources/sounds/explode.ogg\", volume = 0.5})<<newline>>""    end<<newline>>""end<<newline>>"""}, 
{"resources/perks/extra_bullets/data.json", "{<<newline>>""  \"type\" : \"perk\",<<newline>>""  \"name\": \"Extra Clip Size\",<<newline>>""  \"description\": \"Your guns have more ammo.\",<<newline>>""  \"iconFile\" : \"\",<<newline>>""  \"scriptFile\" : \"extra_bullets.lua\",<<newline>>""  \"scriptName\" : \"ExtraBullets\"<<newline>>""}"}, 
{"resources/perks/extra_bullets/extra_bullets.lua", "<<newline>>""function ExtraBullets.init(level)<<newline>>""    player.clipCountMultiplier:addBuff(1.2)<<newline>>""end<<newline>>""<<newline>>"""}, 
{"resources/perks/extra_perk/data.json", "{<<newline>>""  \"type\" : \"perk\",<<newline>>""  \"name\": \"More Perks on Level Up\",<<newline>>""  \"description\": \"You have a bigger list of perks to select when you level up.\",<<newline>>""  \"iconFile\" : \"\",<<newline>>""  \"scriptFile\" : \"extra_perk.lua\",<<newline>>""  \"scriptName\" : \"ExtraPerk\",<<newline>>""  \"maxLevel\" : 2,<<newline>>""  \"hideLevelText\" : true<<newline>>""}"}, 
{"resources/perks/extra_perk/extra_perk.lua", "<<newline>>""function ExtraPerk.init(level)<<newline>>""    missionData.perkPerLevel = missionData.perkPerLevel + 1<<newline>>""end<<newline>>""<<newline>>"""}, 
{"resources/perks/faster_bullets/data.json", "{<<newline>>""  \"type\" : \"perk\",<<newline>>""  \"name\": \"Faster Bullets\",<<newline>>""  \"description\": \"Your bullets are faster.\",<<newline>>""  \"iconFile\" : \"\",<<newline>>""  \"scriptFile\" : \"faster_bullets.lua\",<<newline>>""  \"scriptName\" : \"FasterBullets\"<<newline>>""}"}, 
{"resources/perks/faster_bullets/faster_bullets.lua", "<<newline>>""function FasterBullets.init()<<newline>>""    player.bulletSpeedMultiplier:addBuff(1.35)<<newline>>""end<<newline>>"""}, 
{"resources/perks/faster_movement/data.json", "{<<newline>>""  \"type\" : \"perk\",<<newline>>""  \"name\": \"Long Distance Runner\",<<newline>>""  \"description\": \"Your move slightly faster.\",<<newline>>""  \"iconFile\" : \"\",<<newline>>""  \"scriptFile\" : \"faster_movement.lua\",<<newline>>""  \"scriptName\" : \"FasterMovement\"<<newline>>""}"}, 
{"resources/perks/faster_movement/faster_movement.lua", "<<newline>>""function FasterMovement.init()<<newline>>""    player.maxSpeed:addBuff(1.25)<<newline>>""end<<newline>>"""}, 
{"resources/perks/faster_reload/data.json", "{<<newline>>""  \"type\" : \"perk\",<<newline>>""  \"name\": \"Faster Reload\",<<newline>>""  \"description\": \"You reload your gun at a faster rate.\",<<newline>>""  \"iconFile\" : \"\",<<newline>>""  \"scriptFile\" : \"faster_reload.lua\",<<newline>>""  \"scriptName\" : \"FasterReload\",<<newline>>""  \"maxLevel\" : 3<<newline>>""}"}, 
{"resources/perks/faster_reload/faster_reload.lua", "<<newline>>""function FasterReload.init(level)<<newline>>""    local amount = 1.0 + level * 0.1<<newline>>""    if level == 1 then<<newline>>""        FasterReload.id = player.reloadSpeedMultiplier:addBuff(amount)<<newline>>""    else<<newline>>""        player.reloadSpeedMultiplier:setBuffAmount(FasterReload.id, amount)<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>"""}, 
{"resources/perks/faster_reload_stationary/data.json", "{<<newline>>""  \"type\" : \"perk\",<<newline>>""  \"name\": \"Stationary Reload\",<<newline>>""  \"description\": \"Your reloading speed increases while you are not moving.\",<<newline>>""  \"iconFile\" : \"\",<<newline>>""  \"scriptFile\" : \"faster_reload_stationary.lua\",<<newline>>""  \"scriptName\" : \"FasterReloadStationary\"<<newline>>""}"}, 
{"resources/perks/faster_reload_stationary/faster_reload_stationary.lua", "<<newline>>""FasterReloadStationary.id = getGlobalUniqueId()<<newline>>""<<newline>>""function FasterReloadStationary.init()<<newline>>""    FasterReloadStationary.isFast = false<<newline>>""end<<newline>>""<<newline>>""<<newline>>""function FasterReloadStationary.onTick()<<newline>>""    local speed = player.moveSpeed<<newline>>""    if speed < 0.1 then<<newline>>""        if FasterReloadStationary.isFast == false then<<newline>>""            FasterReloadStationary.isFast = true<<newline>>""            player.reloadSpeedMultiplier:addBuffWithId(id, 4.0)<<newline>>""            player.reloadSpeedMultiplier:setBuffFadeInFadeOut(0.1, -1.0)<<newline>>""        end<<newline>>""    else<<newline>>""        if FasterReloadStationary.isFast then<<newline>>""            FasterReloadStationary.isFast = false<<newline>>""            player.reloadSpeedMultiplier:addBuffWithId(id, 1.0)<<newline>>""        end<<newline>>""    end<<newline>>""end"}, 
{"resources/perks/faster_shoot/data.json", "{<<newline>>""  \"type\" : \"perk\",<<newline>>""  \"name\": \"Increased Rate of Fire\",<<newline>>""  \"description\": \"Your have an increased rate of fire.\",<<newline>>""  \"iconFile\" : \"\",<<newline>>""  \"scriptFile\" : \"faster_shoot.lua\",<<newline>>""  \"scriptName\" : \"FasterShoot\"<<newline>>""}"}, 
{"resources/perks/faster_shoot/faster_shoot.lua", "<<newline>>""function FasterShoot.init()<<newline>>""    player.shootSpeedMultiplier:addBuff(0.8)<<newline>>""end<<newline>>"""}, 
{"resources/perks/heal_up/data.json", "{<<newline>>""  \"type\" : \"perk\",<<newline>>""  \"name\": \"Heal Up\",<<newline>>""  \"description\": \"You fully heal yourself.\",<<newline>>""  \"iconFile\" : \"\",<<newline>>""  \"scriptFile\" : \"heal_up.lua\",<<newline>>""  \"scriptName\" : \"HealUp\",<<newline>>""  \"maxLevel\" : -1<<newline>>""}"}, 
{"resources/perks/heal_up/heal_up.lua", "<<newline>>""function HealUp.init()<<newline>>""    player.data.healingUp = true<<newline>>""    player.data.lastHeal = time - 5.0<<newline>>""end<<newline>>""<<newline>>""<<newline>>""function HealUp.onTick()<<newline>>""    if player.data.healingUp and player.data.lastHeal - 0.1 < time then<<newline>>""        player.data.lastHeal = time<<newline>>""        if player.hitPoints < player.maxHitPoints then<<newline>>""            player:doHeal(3)<<newline>>""        else <<newline>>""            player.data.healingUp = false<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>"""}, 
{"resources/perks/iron_skin/data.json", "{<<newline>>""  \"type\" : \"perk\",<<newline>>""  \"name\": \"Iron Skin\",<<newline>>""  \"description\": \"Your skin reduces the damage you take.\",<<newline>>""  \"iconFile\" : \"\",<<newline>>""  \"scriptFile\" : \"iron_skin.lua\",<<newline>>""  \"scriptName\" : \"IronSkin\",<<newline>>""  \"maxLevel\" : 3<<newline>>""}"}, 
{"resources/perks/iron_skin/iron_skin.lua", "<<newline>>""function IronSkin.init(level)<<newline>>""    IronSkin.level = 6 + (level - 1) * 3<<newline>>""end<<newline>>""<<newline>>""function IronSkin.onPlayerDamaged(damage, dir, params)<<newline>>""    if damage <= 0 then<<newline>>""        return damage<<newline>>""    end<<newline>>""    if params.doNotReduce ~= true and damage > 0 then<<newline>>""        return damage - IronSkin.level<<newline>>""    end<<newline>>""    return damage<<newline>>""end<<newline>>"""}, 
{"resources/perks/less_spread/data.json", "{<<newline>>""  \"type\" : \"perk\",<<newline>>""  \"name\": \"Less Spread\",<<newline>>""  \"description\": \"Your guns have less spread.\",<<newline>>""  \"iconFile\" : \"\",<<newline>>""  \"scriptFile\" : \"less_spread.lua\",<<newline>>""  \"scriptName\" : \"LessSpread\"<<newline>>""}"}, 
{"resources/perks/less_spread/less_spread.lua", "<<newline>>""function LessSpread.init(level)<<newline>>""    player.gunSpreadMultiplier:addBuff(0.6)<<newline>>""end<<newline>>""<<newline>>"""}, 
{"resources/perks/longer_bonuses/data.json", "{<<newline>>""  \"type\" : \"perk\",<<newline>>""  \"name\": \"Longer bonuses\",<<newline>>""  \"description\": \"Your bonuses last longer.\",<<newline>>""  \"iconFile\" : \"\",<<newline>>""  \"scriptFile\" : \"longer_bonuses.lua\",<<newline>>""  \"scriptName\" : \"LongerBonuses\"<<newline>>""}"}, 
{"resources/perks/longer_bonuses/longer_bonuses.lua", "<<newline>>""function LongerBonuses.init()<<newline>>""    player.data.bonusDurationMultiplier = player.data.bonusDurationMultiplier * 1.3<<newline>>""end<<newline>>""<<newline>>""function LongerBonuses.reset()<<newline>>""    player.data.bonusDurationMultiplier = 1.0<<newline>>""end<<newline>>"""}, 
{"resources/perks/no_slowdown_on_hit/data.json", "{<<newline>>""  \"type\" : \"perk\",<<newline>>""  \"name\": \"No Slowdown On Hit\",<<newline>>""  \"description\": \"Monsters no longer slow you down when they hit.\",<<newline>>""  \"iconFile\" : \"\",<<newline>>""  \"scriptFile\" : \"no_slowdown_on_hit.lua\",<<newline>>""  \"scriptName\" : \"NoSlowdownOnHit\"<<newline>>""}"}, 
{"resources/perks/no_slowdown_on_hit/no_slowdown_on_hit.lua", "<<newline>>""function NoSlowdownOnHit.init()<<newline>>""    player.data.noSlowdownOnHit = true<<newline>>""end<<newline>>"""}, 
{"resources/perks/nuke_on_death/data.json", "{<<newline>>""  \"type\" : \"perk\",<<newline>>""  \"name\": \"Final Revenge\",<<newline>>""  \"description\": \"You get your revenge on death.\",<<newline>>""  \"iconFile\" : \"\",<<newline>>""  \"scriptFile\" : \"nuke_on_death.lua\",<<newline>>""  \"scriptName\" : \"NukeOnDeath\"<<newline>>""}"}, 
{"resources/perks/nuke_on_death/nuke_on_death.lua", "<<newline>>""function NukeOnDeath.init()<<newline>>""end<<newline>>""<<newline>>""function NukeOnDeath.onPlayerDied()<<newline>>""    local object = addGameObject(\"NukeOnDeathObject\")<<newline>>""    addExplosion(player.position, 700.0, 400.0, 550, 850)<<newline>>""    playSound({path = \"~/resources/sounds/explode.ogg\"})<<newline>>""    object.data.lastHomingTime = time<<newline>>""    object.data.homingCount = 0<<newline>>""    object.data.nukeSpawning = true<<newline>>""    object.data.position = player.position<<newline>>""end<<newline>>""<<newline>>""NukeOnDeathObject = {}<<newline>>""<<newline>>""function NukeOnDeathObject.onTick(gameObject)<<newline>>""    local data = gameObject.data<<newline>>""    if data.nukeSpawning then<<newline>>""        if data.homingCount < 8 and data.lastHomingTime + 0.05 < time then<<newline>>""            data.lastHomingTime = time<<newline>>""            local bullet = HomingOrb.spawn(nil, data.position + Vec2.randDir() * (math.random() * 5.0 + 5.0))<<newline>>""            if bullet ~= nil then<<newline>>""                bullet.damage = bullet.damage * 5<<newline>>""                bullet.moveSpeed = bullet.moveSpeed * (math.random() * 1.0 + 1.0)<<newline>>""                bullet.lifeTime = 1.0<<newline>>""            end<<newline>>""            data.homingCount = data.homingCount + 1<<newline>>""        end<<newline>>""    end    <<newline>>""end<<newline>>"""}, 
{"resources/perks/piercing_bullets/data.json", "{<<newline>>""  \"type\" : \"perk\",<<newline>>""  \"name\": \"Piercing Bullets\",<<newline>>""  \"description\": \"Some of your bullets gain ability to pierce enemies.\",<<newline>>""  \"iconFile\" : \"\",<<newline>>""  \"scriptFile\" : \"piercing.lua\",<<newline>>""  \"scriptName\" : \"PiercingBullets\"<<newline>>""}"}, 
{"resources/perks/piercing_bullets/piercing.lua", "<<newline>>""function PiercingBullets.init()<<newline>>""end<<newline>>""<<newline>>""function PiercingBullets.onAddGunBullet(gun, bullet)<<newline>>""    if math.random() < 0.2 and bullet.penetrateCount < 5 and bullet.penetrateCount >= 0 and bullet.data.cannotBeBuffed ~= true then<<newline>>""        bullet.penetrateCount = 5<<newline>>""        bullet:addTrailParticle(\"RailGunParticle\", Vec2.new(0.0, 0.0), 7.0, {})<<newline>>""    end<<newline>>""end<<newline>>"""}, 
{"resources/perks/random_weapon/data.json", "{<<newline>>""  \"type\" : \"perk\",<<newline>>""  \"name\": \"Random Weapon\",<<newline>>""  \"description\": \"Get a random weapon.\",<<newline>>""  \"iconFile\" : \"\",<<newline>>""  \"scriptFile\" : \"random_weapon.lua\",<<newline>>""  \"scriptName\" : \"RandomWeapon\",<<newline>>""  \"maxLevel\" : -1<<newline>>""}"}, 
{"resources/perks/random_weapon/random_weapon.lua", "<<newline>>""function RandomWeapon.init(index)<<newline>>""    while true do<<newline>>""        local gun = getGunAtIndex(math.floor(math.random() * getGunCount()))<<newline>>""        if player.gun == nil or player.gun.name ~= gun.name then<<newline>>""            if gun.ultimate == false then<<newline>>""                player:setGun(gun)<<newline>>""                break<<newline>>""            end<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>"""}, 
{"resources/perks/regen/data.json", "{<<newline>>""  \"type\" : \"perk\",<<newline>>""  \"name\": \"Regeneration\",<<newline>>""  \"description\": \"You slowly regenerate your missing health.\",<<newline>>""  \"iconFile\" : \"\",<<newline>>""  \"scriptFile\" : \"regen.lua\",<<newline>>""  \"scriptName\" : \"Regen\",<<newline>>""  \"maxLevel\" : 3<<newline>>""}"}, 
{"resources/perks/regen/regen.lua", "<<newline>>""function Regen.init(level)<<newline>>""    player.data.regenTimer = 1.75 - (level - 1) * 0.25<<newline>>""    player.data.lastRegenTick = time<<newline>>""end<<newline>>""<<newline>>""<<newline>>""function Regen.onTick()<<newline>>""    if player.data.lastRegenTick + player.data.regenTimer < time then<<newline>>""        player.data.lastRegenTick = time<<newline>>""        player:doHeal(1)        <<newline>>""    end<<newline>>""end<<newline>>"""}, 
{"resources/perks/scavenger/data.json", "{<<newline>>""  \"type\" : \"perk\",<<newline>>""  \"name\": \"Scavenger\",<<newline>>""  \"description\": \"Getting bonuses or guns also recovers your health a little.\",<<newline>>""  \"iconFile\" : \"\",<<newline>>""  \"scriptFile\" : \"scavenger.lua\",<<newline>>""  \"scriptName\" : \"Scavenger\"<<newline>>""}"}, 
{"resources/perks/scavenger/scavenger.lua", "<<newline>>""function Scavenger.init(level)<<newline>>""end<<newline>>""<<newline>>""<<newline>>""function Scavenger.onPlayerPickedGun(gun)<<newline>>""    player:doHeal(5)<<newline>>""end<<newline>>""<<newline>>""function Scavenger.onPlayerPickedBonus(bonus, pos)<<newline>>""    player:doHeal(5)<<newline>>""end<<newline>>""<<newline>>"""}, 
{"resources/perks/sprint/data.json", "{<<newline>>""  \"type\" : \"perk\",<<newline>>""  \"name\": \"Sprint on Damage\",<<newline>>""  \"description\": \"You make a short sprint when you get damaged.\",<<newline>>""  \"iconFile\" : \"\",<<newline>>""  \"scriptFile\" : \"sprint.lua\",<<newline>>""  \"scriptName\" : \"Sprint\"<<newline>>""}"}, 
{"resources/perks/sprint/sprint.lua", "<<newline>>""Sprint.buffId = getGlobalUniqueId()<<newline>>""<<newline>>""function Sprint.init()<<newline>>""    player.data.sprintOldHp = player.hitPoints<<newline>>""    player.data.sprinting = false<<newline>>""end<<newline>>""<<newline>>""<<newline>>""function Sprint.onTick()<<newline>>""    if player.data.sprintOldHp > player.hitPoints then<<newline>>""        local id = player.maxSpeed:addBuffWithId(Sprint.buffId, 2.0)<<newline>>""        player.maxSpeed:getBuffInfo(id):setBuffDuration(0.7)<<newline>>""        player.maxSpeed:getBuffInfo(id):setBuffFadeInFadeOut(0.0, 0.35)<<newline>>""    end<<newline>>""<<newline>>""    player.data.sprintOldHp = player.hitPoints<<newline>>""end<<newline>>"""}, 
{"resources/player/assault/data.json", "<<newline>>""{<<newline>>""    \"type\" : \"player\",<<newline>>""    <<newline>>""    \"name\" : \"assault\",<<newline>>""<<newline>>""    \"body\": \"body.png\",<<newline>>""    <<newline>>""    \"hitpoint\" : 100,<<newline>>""    <<newline>>""    \"scale\": 1.0,<<newline>>""    <<newline>>""    \"bulletRadius\": 10.0,<<newline>>""    \"collisionRadius\": 15.0,<<newline>>""    <<newline>>""    \"acceleration\": 800.0,<<newline>>""    \"decceleration\": 1000.0,<<newline>>""    <<newline>>""    \"minRotationSpeed\": 3.0,<<newline>>""    \"maxRotationSpeed\": 10.0,<<newline>>""    <<newline>>""    \"maxSpeed\" : 170.0,<<newline>>""    \"maxRotateSpeed\" : 6.0,<<newline>>""    <<newline>>""    \"bodyScale\" : [0.21, 0.21],<<newline>>""    \"bodyShift\" : [0.0, 0.12],<<newline>>""    <<newline>>""    \"gunFireAnim\": \"shoot\",<<newline>>""    <<newline>>""    \"gunFireScale\" : [7.0, 7.0],<<newline>>""    \"gunFireShift\" : [7.5, 34.0],<<newline>>""    <<newline>>""    \"bulletStartShift\" : [7.5, 28.0],<<newline>>""    <<newline>>""    \"legSpeed\" : 2.0,<<newline>>""    <<newline>>""    \"legMinScale\" : 0.2,<<newline>>""    \"legMaxScale\" : 1.05,<<newline>>""    <<newline>>""    \"legMaxRotate\" : 0.4,<<newline>>""    <<newline>>""    \"leftLegFront\": \"left_front.png\",<<newline>>""    \"rightLegFront\": \"right_front.png\",<<newline>>""    <<newline>>""    \"leftLegback\": \"left_back.png\",<<newline>>""    \"rightLegback\": \"right_back.png\"<<newline>>""    <<newline>>""}"}, 
{"resources/player/gun_fire/data.json", "<<newline>>""{<<newline>>""    \"type\" : \"animation\",<<newline>>""    \"name\" : \"shoot\",<<newline>>""<<newline>>""    \"frameDuration\" : 0.1,<<newline>>""    <<newline>>""    \"frames\":<<newline>>""    [<<newline>>""        [\"f0.png\", 0.05],<<newline>>""        \"f1.png\",<<newline>>""        [\"f2.png\", 0.05]<<newline>>""    ]<<newline>>""}"}, 
{"resources/ultimates/banana_bomb/banana_anim.json", "{<<newline>>""  \"type\" : \"animation_template\",<<newline>>""  \"name\": \"BananaAnimation\",<<newline>>""  \"size\" : [12.5, 8.0],<<newline>>""  <<newline>>""  \"animations\" : <<newline>>""  {<<newline>>""    \"stand\" : <<newline>>""    {<<newline>>""        \"looped\" : true,<<newline>>""        \"frameDuration\" : 0.5,<<newline>>""        \"frames\":<<newline>>""        [<<newline>>""            \"b0.png\"<<newline>>""        ]<<newline>>""    },<<newline>>""    <<newline>>""    \"rotate\" : <<newline>>""    {<<newline>>""        \"looped\" : true,<<newline>>""        \"frameDuration\" : 0.1,<<newline>>""        \"frames\":<<newline>>""        [<<newline>>""            \"b0.png\",<<newline>>""            \"b1.png\",<<newline>>""            \"b2.png\",<<newline>>""            \"b3.png\",<<newline>>""            \"b4.png\",<<newline>>""            \"b3.png\",<<newline>>""            \"b2.png\",<<newline>>""            \"b1.png\"<<newline>>""        ]<<newline>>""    }<<newline>>""  }<<newline>>""}"}, 
{"resources/ultimates/banana_bomb/data.json", "{<<newline>>""  \"type\" : \"gun\",<<newline>>""  \"name\": \"Banana Bomb\",<<newline>>""  \"icon\" : \"icon.png\",<<newline>>""  <<newline>>""  \"scriptFile\" : \"banana_bomb.lua\",<<newline>>""  \"scriptName\" : \"BananaBomb\",<<newline>>""  <<newline>>""  \"maxAmmo\" : 5,<<newline>>""  \"reloadTime\" : 15,<<newline>>""  <<newline>>""  \"ultimate\" : true,<<newline>>""  <<newline>>""  \"showShootAnimation\" : false<<newline>>""}"}, 
{"resources/ultimates/banana_bomb/banana_bomb.lua", "<<newline>>""function BananaBomb.init(gun)<<newline>>""    gun.crosshairDistance = 550.0<<newline>>""    gun.data.shooting = -1.0<<newline>>""end<<newline>>""<<newline>>""function BananaBomb.onTick(gun)<<newline>>""    local data = gun.data<<newline>>""    if gun.isTriggered and gun:hasAmmo() and data.shooting < 0.0 then<<newline>>""        gun:consumeAmmo()<<newline>>""        data.shooting = 0.5<<newline>>""        <<newline>>""        local gameObject = addGameObject(\"BananaBombObject\", { i = 0, dir = player.aimDir } )<<newline>>""        gameObject.data.throwDuration = gameObject.data.throwDuration * 0.8<<newline>>""        gameObject:setPosition(player.position)<<newline>>""        playSound({path = BananaBomb.basePath .. \"swish.ogg\"})<<newline>>""        <<newline>>""    end<<newline>>""    <<newline>>""    if data.shooting >= 0.0 then<<newline>>""        data.shooting = data.shooting - dt<<newline>>""        <<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""function BananaBomb.spawnChance(gun)<<newline>>""    return ultimateSpawnChance()<<newline>>""end<<newline>>""<<newline>>""BananaBombObject = {}<<newline>>""<<newline>>""<<newline>>""function BananaBombObject.init(gameObject, args)<<newline>>""    local renderable = gameObject:addAnimation(\"BananaAnimation\")<<newline>>""    renderable:playAnimation(\"rotate\", math.random() * 0.8)<<newline>>""    gameObject.data.renderable = renderable<<newline>>""    <<newline>>""    gameObject.data.startTime = time<<newline>>""    gameObject.data.i = args.i<<newline>>""    gameObject.data.throwDuration = math.random() * 0.8 + 0.8<<newline>>""    if args.dir ~= nil then<<newline>>""        gameObject.data.speed = args.dir<<newline>>""        gameObject.data.throwDuration = gameObject.data.throwDuration * 0.6<<newline>>""    else<<newline>>""        gameObject.data.speed = Vec2.fromAngle(math.random() * math.pi * 2.0)<<newline>>""    end<<newline>>""    gameObject.data.speed = gameObject.data.speed * (math.random() * 60.0 + 100.0 - args.i * 15)<<newline>>""    gameObject:setRotation(math.random() * math.pi * 2.0)<<newline>>""    BananaBombObject.onTick(gameObject)<<newline>>""end<<newline>>""<<newline>>""function BananaBombObject.onTick(gameObject)<<newline>>""    local data = gameObject.data<<newline>>""    local t = time - data.startTime<<newline>>""    local tnormal = t / data.throwDuration<<newline>>""    <<newline>>""    if tnormal > 1.0 then<<newline>>""        gameObject.toBeRemoved = true<<newline>>""        <<newline>>""        addExplosion(gameObject:getPosition(), 80.0, 100.0, 70, 150, 0.0, false, nil, true)<<newline>>""        if BananaBombObject.lastExplosionSound == nil or time - BananaBombObject.lastExplosionSound > 0.1 then<<newline>>""            playSound({path = \"~/resources/sounds/explode.ogg\"})<<newline>>""            BananaBombObject.lastExplosionSound = time<<newline>>""        end<<newline>>""        <<newline>>""        if data.i < 3 then<<newline>>""            local r = math.random(2) + 3 - data.i<<newline>>""            for i = 1,r do <<newline>>""                local child = addGameObject(\"BananaBombObject\", { i = data.i + 1 } )<<newline>>""                child:setPosition(gameObject:getPosition())<<newline>>""            end<<newline>>""        end<<newline>>""    end<<newline>>""    <<newline>>""    local m = data.i / 3.0<<newline>>""    <<newline>>""    gameObject:setRotation(gameObject:getRotation() + dt * 5.0)<<newline>>""    gameObject:setPosition(gameObject:getPosition() + data.speed * dt * (1.0 - m * 0.5))<<newline>>""    <<newline>>""    local s = (0.6 + math.abs(math.sin(tnormal * math.pi)) * 0.4)<<newline>>""    gameObject:setScale(Vec2:new(s, s))<<newline>>""    <<newline>>""    s = 0.6 + tnormal * 0.3<<newline>>""    data.renderable:setColor(Vec4:new(s, s, s, 1.0))<<newline>>""end<<newline>>"""}, 
{"resources/ultimates/big_laser/data.json", "{<<newline>>""  \"type\" : \"gun\",<<newline>>""  \"name\": \"Gluon Gun\",<<newline>>""  \"icon\" : \"icon.png\",<<newline>>""  \"bulletTexture\" : \"laser.png\",<<newline>>""  \"bulletSize\" : [15.0, 15.0],<<newline>>""  \"bulletRadius\" : 4.0,<<newline>>""  \"bulletSpeed\" : 350.0,<<newline>>""  \"bulletDamage\" : [30, 45],<<newline>>""  <<newline>>""  \"scriptFile\" : \"big_laser.lua\",<<newline>>""  \"scriptName\" : \"BigLaser\",<<newline>>""  <<newline>>""  \"maxAmmo\" : 5,<<newline>>""  \"reloadTime\" : 15,<<newline>>""  <<newline>>""  \"firingSoundContinuous\" : true,<<newline>>""  \"firingSound\" : {<<newline>>""    \"path\" : \"laser.ogg\",<<newline>>""    \"volume\" : 0.65,<<newline>>""    \"speed\" : 0.9<<newline>>""  },<<newline>>""  \"firingSoundFadein\" : 0.3,<<newline>>""<<newline>>""  \"ultimate\" : true,<<newline>>""  <<newline>>""  \"isLaser\" : true,<<newline>>""  \"laserTexture\" : \"laser.png\",<<newline>>""  \"laserShader\" : \"laser\",<<newline>>""  <<newline>>""  \"bulletLevelModifier\" : 3,<<newline>>""  <<newline>>""  \"laserThickness\" : 480.0,<<newline>>""  <<newline>>""  \"laserBeginShift\" : 10.0,<<newline>>""  \"laserBeginWidth\" : 40.0,<<newline>>""  <<newline>>""  \"laserEndShift\" : 0.0,<<newline>>""  \"laserEndWidth\" : 100.0,<<newline>>""  \"showShootAnimation\" : false<<newline>>""}"}, 
{"resources/ultimates/big_laser/big_laser.lua", "<<newline>>""function BigLaser.init(gun)<<newline>>""    gun.spreadAngle = 0.0<<newline>>""    gun.crosshairDistance = 550.0<<newline>>""    gun.data.maxRangeUniform = gun.laser:addUniformFloat(\"maxRange\", 450.0)<<newline>>""    gun.data.timeUniform = gun.laser:addUniformFloat(\"time\", 0.0)<<newline>>""    ShootTimer.initGun(gun, 0.05)<<newline>>""    gun.data.shooting = -1.0<<newline>>""end<<newline>>""<<newline>>""function BigLaser.onTick(gun)<<newline>>""    gun.laser:setVisible(false)<<newline>>""    local data = gun.data<<newline>>""    <<newline>>""    if data.shooting <= 0.0 then<<newline>>""        if gun.isTriggered and gun:hasAmmo() then<<newline>>""            gun:consumeAmmo()<<newline>>""            data.shooting = 2.5<<newline>>""            <<newline>>""            local buff = player.maxRotateSpeed:addBuff(0.1)<<newline>>""            player.maxRotateSpeed:setBuffDuration(buff, data.shooting + 0.3)<<newline>>""            player.maxRotateSpeed:setBuffFadeInFadeOut(buff, 0.05, 0.3)<<newline>>""        end<<newline>>""    else<<newline>>""        player.canFireNextFrame = false<<newline>>""        data.shooting = data.shooting - dt<<newline>>""        gun.laser:setVisible(true)<<newline>>""        local range = 430.0<<newline>>""        local collision = getCollisionForRay(player.gunPos + player.aimDir * 25.0, player.aimDir * (range - 25.0), 5, CollisionFlags.NoBulletCollision)<<newline>>""        if collision >= 0.0 then<<newline>>""            range = collision + 20<<newline>>""        end<<newline>>""        gun.laser:setLength(range)<<newline>>""        gun.laser:addUniformFloat(\"time\", time)<<newline>>""        if ShootTimer.checkGun(gun) then<<newline>>""            runForEachMonsterOnLine(player.gunPos, player.aimDir * (range), 15, {}, function(monster)<<newline>>""                local args = {doNotStun = true}<<newline>>""                monster:doDamageWithArgs(gun:getRandomDamage(), player.aimDir, args)<<newline>>""            end)<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""function BigLaser.spawnChance(gun)<<newline>>""    return ultimateSpawnChance()<<newline>>""end"}, 
{"resources/ultimates/black_hole/data.json", "{<<newline>>""  \"type\" : \"gun\",<<newline>>""  \"name\": \"Black Hole\",<<newline>>""  \"icon\" : \"icon.png\",<<newline>>""  <<newline>>""  \"scriptFile\" : \"black_hole.lua\",<<newline>>""  \"scriptName\" : \"BlackHole\",<<newline>>""  <<newline>>""  \"maxAmmo\" : 5,<<newline>>""  \"reloadTime\" : 15,<<newline>>""  <<newline>>""  \"ultimate\" : true,<<newline>>""  <<newline>>""  \"showShootAnimation\" : false<<newline>>""}"}, 
{"resources/ultimates/black_hole/black_hole.lua", "BlackHole.buffId = getGlobalUniqueId()<<newline>>""<<newline>>""function BlackHole.init(gun)<<newline>>""    gun.data.shooting = -1.0<<newline>>""    gun.data.started = false<<newline>>""    <<newline>>""    gun.data.checkAchievement = true<<newline>>""    gun.data.achievementProcess = 0<<newline>>""end<<newline>>""<<newline>>""function BlackHole.onTick(gun)<<newline>>""    local data = gun.data<<newline>>""    local duration = 6.0 * player.data.bonusDurationMultiplier<<newline>>""    <<newline>>""    if data.started == false then<<newline>>""        if gun.isTriggered and gun:hasAmmo() then<<newline>>""            gun:consumeAmmo()<<newline>>""            if gun.data.postprocess == nil then<<newline>>""                gun.data.postprocess = addPostProcess(\"resources/post_process/blackhole.ps\")<<newline>>""            end<<newline>>""            data.shooting = 0.0<<newline>>""            data.started = true<<newline>>""            data.postprocess:setEnabled(true)<<newline>>""            data.ppos = player.position + player.aimDir * (player.crosshairDistance + 50.0)    <<newline>>""            data.bodyIndex = addCircleCollider(data.ppos, 1.0)<<newline>>""            setColliderFlags(data.bodyIndex, CollisionFlags.NoMonsterCollision + CollisionFlags.NoBulletCollision)<<newline>>""            <<newline>>""            data.bulletBodyIndex = addCircleCollider(data.ppos, 1.0)<<newline>>""            setColliderFlags(data.bulletBodyIndex, CollisionFlags.NoMonsterCollision + CollisionFlags.NoPlayerCollision)<<newline>>""            playSound({path = BlackHole.basePath .. \"black_hole.ogg\", position = data.ppos, volume = 1.2})<<newline>>""            gun.data.achievementProcess = 0<<newline>>""        end<<newline>>""    else<<newline>>""        data.shooting = data.shooting + dt<<newline>>""        if data.shooting > duration then<<newline>>""            data.started = false<<newline>>""            data.postprocess:setEnabled(false)<<newline>>""            removeCollider(data.bodyIndex)<<newline>>""            removeCollider(data.bulletBodyIndex)<<newline>>""        else<<newline>>""            local t = 1.0<<newline>>""            if data.shooting < 1.0  then<<newline>>""                t = data.shooting<<newline>>""            elseif data.shooting > duration - 1.0 then<<newline>>""                t = duration - data.shooting<<newline>>""            end<<newline>>""        <<newline>>""            data.postprocess:setShaderWeight(t)<<newline>>""            local v = convertToScreenPosition(data.ppos)<<newline>>""            gun.data.postprocess:addUniformVec2(\"uRelBlackHolePos\", v)<<newline>>""            <<newline>>""            local killRange = 30 * t<<newline>>""            local moveRange = killRange + 130 * (0.1 + t * 0.9)<<newline>>""            <<newline>>""            local playerRadius = 40.0<<newline>>""            if moveRange > playerRadius then<<newline>>""                relocateCircleCollider(data.bodyIndex, data.ppos, moveRange - playerRadius)<<newline>>""            end<<newline>>""            local bulletRadius = 70.0<<newline>>""            if moveRange > bulletRadius then<<newline>>""                relocateCircleCollider(data.bulletBodyIndex, data.ppos, moveRange - bulletRadius)<<newline>>""            end<<newline>>""            <<newline>>""            local killCount = 0<<newline>>""            runForEachMonsterInRadius( data.ppos, moveRange + 30.0, {}, function(monster)<<newline>>""                local d = monster.position:distance(data.ppos) - monster.bulletRadius<<newline>>""                if d < killRange and monster.canGetOneShooted then<<newline>>""                    monster:killSelf()<<newline>>""                    killCount = killCount + 1<<newline>>""                elseif d < moveRange then<<newline>>""                    local m = (moveRange - d) * t / (moveRange - killRange)<<newline>>""                    local a = (monster.position - data.ppos):getAngle()<<newline>>""                    local toHole = -Vec2.fromAngle(a)<<newline>>""                    local toSide = -toHole:sideVec()<<newline>>""                    monster:addKnockback(toSide * m * 800.0 + toHole * m * 300.0, -1.0)<<newline>>""                end<<newline>>""            end)<<newline>>""        <<newline>>""            if data.checkAchievement then<<newline>>""                if hasAchievement( \"ACH_BLACK_HOLE\" ) or player.isDead or missionData.isSurvival ~= true then<<newline>>""                    data.checkAchievement = false<<newline>>""                end<<newline>>""                data.achievementProcess = data.achievementProcess + killCount<<newline>>""                <<newline>>""                if data.achievementProcess >= 30 then<<newline>>""                    addAchievement( \"ACH_BLACK_HOLE\" )<<newline>>""                    data.checkAchievement = false<<newline>>""                end<<newline>>""            end<<newline>>""            <<newline>>""            moveRange = moveRange + 30<<newline>>""            local d = player.position:distance(data.ppos)<<newline>>""            if d < moveRange then<<newline>>""                local m = (moveRange - d) * t / (moveRange - killRange)<<newline>>""                local a = (player.position - data.ppos):getAngle()<<newline>>""                local toHole = -Vec2.fromAngle(a)<<newline>>""                local toSide = -toHole:sideVec()<<newline>>""                player:addKnockback(toSide * m * 800.0 + toHole * m * 200.0, -1.0)<<newline>>""            end<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""function BlackHole.spawnChance(gun)<<newline>>""    return ultimateSpawnChance()<<newline>>""end<<newline>>"""}, 
{"resources/ultimates/phoenix_dive/data.json", "{<<newline>>""  \"type\" : \"gun\",<<newline>>""  \"name\": \"Phoenix Dive\",<<newline>>""  \"icon\" : \"icon.png\",<<newline>>""  <<newline>>""  \"scriptFile\" : \"phoenix_dive.lua\",<<newline>>""  \"scriptName\" : \"PhoenixDive\",<<newline>>""  <<newline>>""  \"maxAmmo\" : 5,<<newline>>""  \"reloadTime\" : 15,<<newline>>""  <<newline>>""  \"ultimate\" : true,<<newline>>""  <<newline>>""  \"showShootAnimation\" : false<<newline>>""}"}, 
{"resources/ultimates/phoenix_dive/phoenix_dive.lua", "PhoenixDive.buffId = getGlobalUniqueId()<<newline>>""<<newline>>""function PhoenixDive.init(gun)<<newline>>""    gun.data.shooting = -1.0<<newline>>""    gun.data.gameObject = addGameObject(\"FlamethrowerObject\")<<newline>>""    gun.data.gameObject:setLevel(RenderableLevel.player + 2)<<newline>>""    gun.data.particle = gun.data.gameObject:addParticle(\"FlameParticle\", {})<<newline>>""    gun.data.started = false<<newline>>""    <<newline>>""    gun.data.checkAchievement = true<<newline>>""    gun.data.achievementProcess = 0<<newline>>""    gun.data.invulTime = -0.1<<newline>>""end<<newline>>""<<newline>>""function PhoenixDive.onTick(gun)<<newline>>""    local data = gun.data<<newline>>""    <<newline>>""    if data.started == false then<<newline>>""        if gun.isTriggered and gun:hasAmmo() then<<newline>>""            gun:consumeAmmo()<<newline>>""            data.shooting = 0.6<<newline>>""            <<newline>>""            local buff = player.maxSpeed:addBuff(0.0)<<newline>>""            player.maxSpeed:setBuffDuration(buff, data.shooting)<<newline>>""            buff = player.maxRotateSpeed:addBuff(0.0)<<newline>>""            player.maxRotateSpeed:setBuffDuration(buff, data.shooting)<<newline>>""            buff = player.colorMultiplier:addBuff(Vec4.fromColor(0xFFFF8888))<<newline>>""            player.colorMultiplier:setBuffDuration(buff, data.shooting)<<newline>>""            player.colorMultiplier:setBuffFadeInFadeOut(buff, 0.1, 0.1)<<newline>>""            data.moveAngle = player.aimAngle<<newline>>""            <<newline>>""            data.particleTime = 0.0<<newline>>""            data.hitTime = 0.0<<newline>>""            data.started = true<<newline>>""            playSound({path = PhoenixDive.basePath ..\"dive.ogg\", volume = 0.9})<<newline>>""            player:addKnockback(Vec2.fromAngle(data.moveAngle) * 500.0, data.shooting)<<newline>>""            data.achievementProcess = 0 <<newline>>""        end<<newline>>""    else<<newline>>""        data.shooting = data.shooting - dt<<newline>>""    end<<newline>>""    <<newline>>""    if data.started then<<newline>>""        player.canFireNextFrame = false<<newline>>""        data.invulTime = time + 0.5<<newline>>""        if data.shooting < 0.0 then<<newline>>""            data.started = false<<newline>>""            addExplosion(player.position, 160.0, 230.0, 250, 350, 0.1)<<newline>>""            playSound({path = \"~/resources/sounds/explode.ogg\"})<<newline>>""        end<<newline>>""        <<newline>>""        local count = 0<<newline>>""        data.hitTime = data.hitTime - dt<<newline>>""        if data.hitTime < 0.0 then<<newline>>""            data.hitTime = data.hitTime + 0.02<<newline>>""            <<newline>>""            runForEachMonsterInRadius(player.position, 50.0, {}, function(monster)<<newline>>""                local args = {doNotStun = true}<<newline>>""                local toMonster = monster.position - player.position<<newline>>""                toMonster:normalize()<<newline>>""                local side = player.aimDir:sideVec()<<newline>>""                monster:doDamageWithArgs(8 + math.random(8), toMonster, args)<<newline>>""                if toMonster:dot(side) > 0.0 then<<newline>>""                    monster:addKnockback(side * 30.0, 0.35)<<newline>>""                else<<newline>>""                    monster:addKnockback(-side * 30.0, 0.35)<<newline>>""                end<<newline>>""                <<newline>>""                if monster.data.flamethrowerObject == nil then<<newline>>""                    monster.data.flamethrowerObject = addGameObject(\"BurnMonsterObject\")<<newline>>""                    monster.data.flamethrowerObject.data.monster = monster<<newline>>""                    monster.data.flamethrowerObject.data.damageMin = 4<<newline>>""                    monster.data.flamethrowerObject.data.damageVar = 6<<newline>>""                end<<newline>>""                if monster.data.countedForPhoenixDiveAchievement == nil then<<newline>>""                    monster.data.countedForPhoenixDiveAchievement = true<<newline>>""                    count = count + 1<<newline>>""                end<<newline>>""                monster.data.flamethrowerObject.data.count = 4<<newline>>""            end)<<newline>>""        end<<newline>>""        <<newline>>""        <<newline>>""        if data.checkAchievement then<<newline>>""            if hasAchievement( \"ACH_PHOENIX_DIVE\" ) or player.isDead or missionData.isSurvival ~= true then<<newline>>""                data.checkAchievement = false<<newline>>""            end<<newline>>""            data.achievementProcess = data.achievementProcess + count<<newline>>""            <<newline>>""            if data.achievementProcess >= 10 then<<newline>>""                addAchievement( \"ACH_PHOENIX_DIVE\" )<<newline>>""                data.checkAchievement = false<<newline>>""            end<<newline>>""        end<<newline>>""        <<newline>>""        data.particleTime = data.particleTime - dt<<newline>>""        while data.particleTime < 0.0 do<<newline>>""            data.particleTime = data.particleTime + 0.02<<newline>>""            for i = 1,4 do<<newline>>""                data.particle:addParticle(player.position + Vec2.randDir() * 20.0 * (math.random() - 0.5), <<newline>>""                {   <<newline>>""                    moveSpeed = Vec2.fromAngle(data.moveAngle + (math.random() - 0.5) * math.pi  ) * 100.0,<<newline>>""                    initialScale = 2.0<<newline>>""                })<<newline>>""            end<<newline>>""        end<<newline>>""    end<<newline>>""    <<newline>>""end<<newline>>""<<newline>>""function PhoenixDive.onPlayerDamaged(gun, damage, dir, params)<<newline>>""    if gun.data.invulTime > time then<<newline>>""        return -1<<newline>>""    end<<newline>>""    return damage<<newline>>""end<<newline>>""<<newline>>""function PhoenixDive.spawnChance(gun)<<newline>>""    return ultimateSpawnChance()<<newline>>""end<<newline>>"""}, 
{"resources/ultimates/rocket_barrage/data.json", "{<<newline>>""  \"type\" : \"gun\",<<newline>>""  \"name\": \"Rocket Barrage\",<<newline>>""  \"icon\" : \"icon.png\",<<newline>>""  \"bulletTexture\" : \"bullet.png\",<<newline>>""  \"bulletSize\" : [4.0, 4.0],<<newline>>""  \"bulletRadius\" : 14.0,<<newline>>""  \"bulletSpeed\" : 350.0,<<newline>>""  \"bulletDamage\" : [40, 70],<<newline>>""  <<newline>>""  \"maxAmmo\" : 5,<<newline>>""  \"reloadTime\" : 15,<<newline>>""  <<newline>>""  \"firingSound\" : \"rocket.ogg\",<<newline>>""  <<newline>>""  \"ultimate\" : true,<<newline>>""  <<newline>>""  \"scriptFile\" : \"rocket_barrage.lua\",<<newline>>""  \"scriptName\" : \"RocketBarrage\"<<newline>>""}"}, 
{"resources/ultimates/rocket_barrage/rocket_barrage.lua", "<<newline>>""function RocketBarrage.init(gun)<<newline>>""    gun.spreadAngle = 0.0<<newline>>""    gun.crosshairDistance = 350.0<<newline>>""    gun.data.shooting = -1.0<<newline>>""    gun.newBulletData.cannotBeBuffed = true<<newline>>""end<<newline>>""<<newline>>""<<newline>>""function RocketBarrage.onTick(gun)<<newline>>""    local data = gun.data<<newline>>""    <<newline>>""    if data.shooting <= 0.0 then<<newline>>""        if gun.isTriggered and gun:hasAmmo()  then<<newline>>""            gun:consumeAmmo()<<newline>>""            data.shooting = 2.0<<newline>>""            data.shootDt = 0.0<<newline>>""            local buff = player.maxRotateSpeed:addBuff(0.06)<<newline>>""            player.maxRotateSpeed:setBuffDuration(buff, data.shooting + 0.3)<<newline>>""            player.maxRotateSpeed:setBuffFadeInFadeOut(buff, 0.05, 0.3)<<newline>>""            local buff = player.maxSpeed:addBuff(0.3)<<newline>>""            player.maxSpeed:setBuffDuration(buff, data.shooting)<<newline>>""            player.maxSpeed:setBuffFadeInFadeOut(buff, 0.1, 0.1)<<newline>>""        end<<newline>>""    else<<newline>>""        player.canFireNextFrame = false<<newline>>""        data.shooting = data.shooting - dt<<newline>>""        data.shootDt = data.shootDt + dt * 80<<newline>>""        player:addKnockback(-player.aimDir * 30.0, -1.0)<<newline>>""        while data.shootDt > 0.0 do<<newline>>""            data.shootDt = data.shootDt - 1<<newline>>""            local bullet = gun:addBullet()<<newline>>""            bullet.damage = math.floor(150 + math.random() * 40)<<newline>>""            bullet.moveSpeed = 400<<newline>>""            bullet.lifeTime = 0.2 + math.random() * 0.2<<newline>>""            bullet.moveSpeed = 750 + math.random() * 200.0<<newline>>""            local spread = 0.3<<newline>>""            local maxSpeed = 1.8<<newline>>""            bullet.data.rotateSpeed = maxSpeed * (math.random() * 0.5 + 0.5)<<newline>>""            if math.random() < 0.5 then<<newline>>""                bullet.data.rotateSpeed = -bullet.data.rotateSpeed<<newline>>""            end<<newline>>""            bullet.moveAngle = bullet.moveAngle + spread * (math.random() * 2.0 - 1.0)<<newline>>""    <<newline>>""            bullet.data.particleT = math.random() * 0.1<<newline>>""            <<newline>>""            local c = math.random() * 0.3 + 0.7<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""function RocketBarrage.onBulletHit(gun, bullet, monster)<<newline>>""    if monster ~= nil then<<newline>>""        addExplosion(bullet.position, 80.0, 180.0, 20, 30, 0.0, false, nil, true)<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""function RocketBarrage.onBulletTick(gun, bullet)<<newline>>""    bullet.moveAngle = bullet.moveAngle + bullet.data.rotateSpeed * dt<<newline>>""    local a = 1.0 - (time - bullet.startTime - bullet.lifeTime + 0.1) / 0.5<<newline>>""    bullet:setColor(Vec4:new(1.0, 1.0, 1.0, a))<<newline>>""    <<newline>>""    if bullet.data.particleT ~= nil then<<newline>>""        bullet.data.particleT = bullet.data.particleT - dt<<newline>>""        if bullet.data.particleT < 0.0 then<<newline>>""            bullet.data.particleT = nil<<newline>>""            bullet:addTrailParticle(\"RocketSmokeParticleBig\", Vec2.new(0.0, 0.0), 7.0, {})<<newline>>""        end<<newline>>""    end<<newline>>""end<<newline>>""<<newline>>""<<newline>>""function RocketBarrage.spawnChance(gun)<<newline>>""    return ultimateSpawnChance()<<newline>>""end<<newline>>"""}, 
};
std::vector<std::string> autoLoads = {
"resources/bonuses/bullet_crazy/data.json",
"resources/bonuses/circle_fire/data.json",
"resources/bonuses/double_exp/data.json",
"resources/bonuses/experience/data.json",
"resources/bonuses/explosion/data.json",
"resources/bonuses/extra_1000/data.json",
"resources/bonuses/extra_5000/data.json",
"resources/bonuses/faster_movement/data.json",
"resources/bonuses/homing/data.json",
"resources/bonuses/invincibility/data.json",
"resources/bonuses/level_up/data.json",
"resources/bonuses/medikit/data.json",
"resources/bonuses/quad_damage/data.json",
"resources/bonuses/reflex_boost/data.json",
"resources/bonuses/slow_monsters/data.json",
"resources/colliders/collider_data.json",
"resources/guns/bumerang_gun/data.json",
"resources/guns/flamethrower/data.json",
"resources/guns/flaregun/data.json",
"resources/guns/frost_laser/data.json",
"resources/guns/laser/data.json",
"resources/guns/laser_machinegun/data.json",
"resources/guns/laser_pistol/data.json",
"resources/guns/machinegun/data.json",
"resources/guns/minigun/data.json",
"resources/guns/pistol/data.json",
"resources/guns/plasmagun/data.json",
"resources/guns/pulsegun/data.json",
"resources/guns/railgun/data.json",
"resources/guns/rainbow_gun/data.json",
"resources/guns/rifle/data.json",
"resources/guns/rocketlauncher/data.json",
"resources/guns/shotgun/data.json",
"resources/guns/shrinkgun/data.json",
"resources/guns/splitgun/data.json",
"resources/guns/uzi/data.json",
"resources/missions/narsie_fight/data.json",
"resources/missions/narsie_fight/narsie/data.json",
"resources/missions/survival/data.json",
"resources/missions/tutorial/data.json",
"resources/monsters/alien/data.json",
"resources/monsters/egg/data.json",
"resources/monsters/spider/data.json",
"resources/particles/bulletTrail/data.json",
"resources/particles/critical/data.json",
"resources/particles/explosionFire/data.json",
"resources/particles/flame/data.json",
"resources/particles/flareTrail/data.json",
"resources/particles/plasmaTrail/data.json",
"resources/particles/railgunTrail/data.json",
"resources/particles/rainbowstrip/data.json",
"resources/particles/rocketSmoke/data.json",
"resources/particles/rocketSmokeBig/data.json",
"resources/particles/striptest/data.json",
"resources/perks/critical/data.json",
"resources/perks/dodger/data.json",
"resources/perks/double_shoot/data.json",
"resources/perks/experience/data.json",
"resources/perks/experience_boost/data.json",
"resources/perks/explosion_on_reload/data.json",
"resources/perks/extra_bullets/data.json",
"resources/perks/extra_perk/data.json",
"resources/perks/faster_bullets/data.json",
"resources/perks/faster_movement/data.json",
"resources/perks/faster_reload/data.json",
"resources/perks/faster_reload_stationary/data.json",
"resources/perks/faster_shoot/data.json",
"resources/perks/heal_up/data.json",
"resources/perks/iron_skin/data.json",
"resources/perks/less_spread/data.json",
"resources/perks/longer_bonuses/data.json",
"resources/perks/no_slowdown_on_hit/data.json",
"resources/perks/nuke_on_death/data.json",
"resources/perks/piercing_bullets/data.json",
"resources/perks/random_weapon/data.json",
"resources/perks/regen/data.json",
"resources/perks/scavenger/data.json",
"resources/perks/sprint/data.json",
"resources/player/assault/data.json",
"resources/player/gun_fire/data.json",
"resources/ultimates/banana_bomb/banana_anim.json",
"resources/ultimates/banana_bomb/data.json",
"resources/ultimates/big_laser/data.json",
"resources/ultimates/black_hole/data.json",
"resources/ultimates/phoenix_dive/data.json",
"resources/ultimates/rocket_barrage/data.json",
};
