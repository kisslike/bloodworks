#version 150
uniform sampler2D uTexture0;

in vec4 vColor;
in vec2 vVertexUV;

#define M_PI 3.1415926535897932384626433832795

uniform float uCurrentAmmo;
uniform int uMaxAmmo;

uniform float uReloading;

out vec4 outColor;

void main(void) 
{
	outColor = texture2D(uTexture0, vVertexUV) * vColor;
	
	vec2 t = vVertexUV - vec2(0.5);
	
	float angle = atan(t.x, t.y);
	
	float c = (angle + M_PI) / (2.0 * M_PI);
	
	if (c > (float(uCurrentAmmo)) / float(uMaxAmmo))
	{
		outColor.a = 0.0;
	}
	
	outColor.a *= 0.15;
	
	if (uMaxAmmo < 39)
	{
		float z = c * float(uMaxAmmo);
		float z2 = floor(z + 0.5);
		float z3 = abs(z-z2);
		
		const float start1 = 0.05;
		const float start2 = 0.1;
		float alphaMult = 1.0;
		if (z3 < start1)
		{
			alphaMult *= 0.0;
		}
		else if (z3 < start2)
		{
			alphaMult *= (z3 - start1) / (start2 - start1);
		}
		outColor.a *= mix(alphaMult, 1.0, uReloading);
		
	}
}
